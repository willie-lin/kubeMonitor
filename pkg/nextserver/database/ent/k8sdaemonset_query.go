// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sdaemonset"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// K8sDaemonSetQuery is the builder for querying K8sDaemonSet entities.
type K8sDaemonSetQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.K8sDaemonSet
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the K8sDaemonSetQuery builder.
func (kdsq *K8sDaemonSetQuery) Where(ps ...predicate.K8sDaemonSet) *K8sDaemonSetQuery {
	kdsq.predicates = append(kdsq.predicates, ps...)
	return kdsq
}

// Limit adds a limit step to the query.
func (kdsq *K8sDaemonSetQuery) Limit(limit int) *K8sDaemonSetQuery {
	kdsq.limit = &limit
	return kdsq
}

// Offset adds an offset step to the query.
func (kdsq *K8sDaemonSetQuery) Offset(offset int) *K8sDaemonSetQuery {
	kdsq.offset = &offset
	return kdsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kdsq *K8sDaemonSetQuery) Unique(unique bool) *K8sDaemonSetQuery {
	kdsq.unique = &unique
	return kdsq
}

// Order adds an order step to the query.
func (kdsq *K8sDaemonSetQuery) Order(o ...OrderFunc) *K8sDaemonSetQuery {
	kdsq.order = append(kdsq.order, o...)
	return kdsq
}

// First returns the first K8sDaemonSet entity from the query.
// Returns a *NotFoundError when no K8sDaemonSet was found.
func (kdsq *K8sDaemonSetQuery) First(ctx context.Context) (*K8sDaemonSet, error) {
	nodes, err := kdsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{k8sdaemonset.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kdsq *K8sDaemonSetQuery) FirstX(ctx context.Context) *K8sDaemonSet {
	node, err := kdsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first K8sDaemonSet ID from the query.
// Returns a *NotFoundError when no K8sDaemonSet ID was found.
func (kdsq *K8sDaemonSetQuery) FirstID(ctx context.Context) (id uint, err error) {
	var ids []uint
	if ids, err = kdsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{k8sdaemonset.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kdsq *K8sDaemonSetQuery) FirstIDX(ctx context.Context) uint {
	id, err := kdsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single K8sDaemonSet entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one K8sDaemonSet entity is not found.
// Returns a *NotFoundError when no K8sDaemonSet entities are found.
func (kdsq *K8sDaemonSetQuery) Only(ctx context.Context) (*K8sDaemonSet, error) {
	nodes, err := kdsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{k8sdaemonset.Label}
	default:
		return nil, &NotSingularError{k8sdaemonset.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kdsq *K8sDaemonSetQuery) OnlyX(ctx context.Context) *K8sDaemonSet {
	node, err := kdsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only K8sDaemonSet ID in the query.
// Returns a *NotSingularError when exactly one K8sDaemonSet ID is not found.
// Returns a *NotFoundError when no entities are found.
func (kdsq *K8sDaemonSetQuery) OnlyID(ctx context.Context) (id uint, err error) {
	var ids []uint
	if ids, err = kdsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{k8sdaemonset.Label}
	default:
		err = &NotSingularError{k8sdaemonset.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kdsq *K8sDaemonSetQuery) OnlyIDX(ctx context.Context) uint {
	id, err := kdsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of K8sDaemonSets.
func (kdsq *K8sDaemonSetQuery) All(ctx context.Context) ([]*K8sDaemonSet, error) {
	if err := kdsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return kdsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (kdsq *K8sDaemonSetQuery) AllX(ctx context.Context) []*K8sDaemonSet {
	nodes, err := kdsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of K8sDaemonSet IDs.
func (kdsq *K8sDaemonSetQuery) IDs(ctx context.Context) ([]uint, error) {
	var ids []uint
	if err := kdsq.Select(k8sdaemonset.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kdsq *K8sDaemonSetQuery) IDsX(ctx context.Context) []uint {
	ids, err := kdsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kdsq *K8sDaemonSetQuery) Count(ctx context.Context) (int, error) {
	if err := kdsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return kdsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (kdsq *K8sDaemonSetQuery) CountX(ctx context.Context) int {
	count, err := kdsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kdsq *K8sDaemonSetQuery) Exist(ctx context.Context) (bool, error) {
	if err := kdsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return kdsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (kdsq *K8sDaemonSetQuery) ExistX(ctx context.Context) bool {
	exist, err := kdsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the K8sDaemonSetQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kdsq *K8sDaemonSetQuery) Clone() *K8sDaemonSetQuery {
	if kdsq == nil {
		return nil
	}
	return &K8sDaemonSetQuery{
		config:     kdsq.config,
		limit:      kdsq.limit,
		offset:     kdsq.offset,
		order:      append([]OrderFunc{}, kdsq.order...),
		predicates: append([]predicate.K8sDaemonSet{}, kdsq.predicates...),
		// clone intermediate query.
		sql:  kdsq.sql.Clone(),
		path: kdsq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.K8sDaemonSet.Query().
//		GroupBy(k8sdaemonset.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (kdsq *K8sDaemonSetQuery) GroupBy(field string, fields ...string) *K8sDaemonSetGroupBy {
	group := &K8sDaemonSetGroupBy{config: kdsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := kdsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return kdsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.K8sDaemonSet.Query().
//		Select(k8sdaemonset.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (kdsq *K8sDaemonSetQuery) Select(fields ...string) *K8sDaemonSetSelect {
	kdsq.fields = append(kdsq.fields, fields...)
	return &K8sDaemonSetSelect{K8sDaemonSetQuery: kdsq}
}

func (kdsq *K8sDaemonSetQuery) prepareQuery(ctx context.Context) error {
	for _, f := range kdsq.fields {
		if !k8sdaemonset.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kdsq.path != nil {
		prev, err := kdsq.path(ctx)
		if err != nil {
			return err
		}
		kdsq.sql = prev
	}
	return nil
}

func (kdsq *K8sDaemonSetQuery) sqlAll(ctx context.Context) ([]*K8sDaemonSet, error) {
	var (
		nodes = []*K8sDaemonSet{}
		_spec = kdsq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &K8sDaemonSet{config: kdsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, kdsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (kdsq *K8sDaemonSetQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kdsq.querySpec()
	return sqlgraph.CountNodes(ctx, kdsq.driver, _spec)
}

func (kdsq *K8sDaemonSetQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := kdsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (kdsq *K8sDaemonSetQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sdaemonset.Table,
			Columns: k8sdaemonset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sdaemonset.FieldID,
			},
		},
		From:   kdsq.sql,
		Unique: true,
	}
	if unique := kdsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := kdsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, k8sdaemonset.FieldID)
		for i := range fields {
			if fields[i] != k8sdaemonset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kdsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kdsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kdsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kdsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kdsq *K8sDaemonSetQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kdsq.driver.Dialect())
	t1 := builder.Table(k8sdaemonset.Table)
	columns := kdsq.fields
	if len(columns) == 0 {
		columns = k8sdaemonset.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if kdsq.sql != nil {
		selector = kdsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range kdsq.predicates {
		p(selector)
	}
	for _, p := range kdsq.order {
		p(selector)
	}
	if offset := kdsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kdsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// K8sDaemonSetGroupBy is the group-by builder for K8sDaemonSet entities.
type K8sDaemonSetGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kdsgb *K8sDaemonSetGroupBy) Aggregate(fns ...AggregateFunc) *K8sDaemonSetGroupBy {
	kdsgb.fns = append(kdsgb.fns, fns...)
	return kdsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (kdsgb *K8sDaemonSetGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := kdsgb.path(ctx)
	if err != nil {
		return err
	}
	kdsgb.sql = query
	return kdsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kdsgb *K8sDaemonSetGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := kdsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (kdsgb *K8sDaemonSetGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(kdsgb.fields) > 1 {
		return nil, errors.New("ent: K8sDaemonSetGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := kdsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kdsgb *K8sDaemonSetGroupBy) StringsX(ctx context.Context) []string {
	v, err := kdsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kdsgb *K8sDaemonSetGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kdsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{k8sdaemonset.Label}
	default:
		err = fmt.Errorf("ent: K8sDaemonSetGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kdsgb *K8sDaemonSetGroupBy) StringX(ctx context.Context) string {
	v, err := kdsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (kdsgb *K8sDaemonSetGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(kdsgb.fields) > 1 {
		return nil, errors.New("ent: K8sDaemonSetGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := kdsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kdsgb *K8sDaemonSetGroupBy) IntsX(ctx context.Context) []int {
	v, err := kdsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kdsgb *K8sDaemonSetGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kdsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{k8sdaemonset.Label}
	default:
		err = fmt.Errorf("ent: K8sDaemonSetGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kdsgb *K8sDaemonSetGroupBy) IntX(ctx context.Context) int {
	v, err := kdsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (kdsgb *K8sDaemonSetGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(kdsgb.fields) > 1 {
		return nil, errors.New("ent: K8sDaemonSetGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := kdsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kdsgb *K8sDaemonSetGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := kdsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kdsgb *K8sDaemonSetGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kdsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{k8sdaemonset.Label}
	default:
		err = fmt.Errorf("ent: K8sDaemonSetGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kdsgb *K8sDaemonSetGroupBy) Float64X(ctx context.Context) float64 {
	v, err := kdsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (kdsgb *K8sDaemonSetGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(kdsgb.fields) > 1 {
		return nil, errors.New("ent: K8sDaemonSetGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := kdsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kdsgb *K8sDaemonSetGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := kdsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kdsgb *K8sDaemonSetGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kdsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{k8sdaemonset.Label}
	default:
		err = fmt.Errorf("ent: K8sDaemonSetGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kdsgb *K8sDaemonSetGroupBy) BoolX(ctx context.Context) bool {
	v, err := kdsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kdsgb *K8sDaemonSetGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range kdsgb.fields {
		if !k8sdaemonset.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := kdsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kdsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kdsgb *K8sDaemonSetGroupBy) sqlQuery() *sql.Selector {
	selector := kdsgb.sql.Select()
	aggregation := make([]string, 0, len(kdsgb.fns))
	for _, fn := range kdsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(kdsgb.fields)+len(kdsgb.fns))
		for _, f := range kdsgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(kdsgb.fields...)...)
}

// K8sDaemonSetSelect is the builder for selecting fields of K8sDaemonSet entities.
type K8sDaemonSetSelect struct {
	*K8sDaemonSetQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (kdss *K8sDaemonSetSelect) Scan(ctx context.Context, v interface{}) error {
	if err := kdss.prepareQuery(ctx); err != nil {
		return err
	}
	kdss.sql = kdss.K8sDaemonSetQuery.sqlQuery(ctx)
	return kdss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kdss *K8sDaemonSetSelect) ScanX(ctx context.Context, v interface{}) {
	if err := kdss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (kdss *K8sDaemonSetSelect) Strings(ctx context.Context) ([]string, error) {
	if len(kdss.fields) > 1 {
		return nil, errors.New("ent: K8sDaemonSetSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := kdss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kdss *K8sDaemonSetSelect) StringsX(ctx context.Context) []string {
	v, err := kdss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (kdss *K8sDaemonSetSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kdss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{k8sdaemonset.Label}
	default:
		err = fmt.Errorf("ent: K8sDaemonSetSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kdss *K8sDaemonSetSelect) StringX(ctx context.Context) string {
	v, err := kdss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (kdss *K8sDaemonSetSelect) Ints(ctx context.Context) ([]int, error) {
	if len(kdss.fields) > 1 {
		return nil, errors.New("ent: K8sDaemonSetSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := kdss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kdss *K8sDaemonSetSelect) IntsX(ctx context.Context) []int {
	v, err := kdss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (kdss *K8sDaemonSetSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kdss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{k8sdaemonset.Label}
	default:
		err = fmt.Errorf("ent: K8sDaemonSetSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kdss *K8sDaemonSetSelect) IntX(ctx context.Context) int {
	v, err := kdss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (kdss *K8sDaemonSetSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(kdss.fields) > 1 {
		return nil, errors.New("ent: K8sDaemonSetSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := kdss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kdss *K8sDaemonSetSelect) Float64sX(ctx context.Context) []float64 {
	v, err := kdss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (kdss *K8sDaemonSetSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kdss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{k8sdaemonset.Label}
	default:
		err = fmt.Errorf("ent: K8sDaemonSetSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kdss *K8sDaemonSetSelect) Float64X(ctx context.Context) float64 {
	v, err := kdss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (kdss *K8sDaemonSetSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(kdss.fields) > 1 {
		return nil, errors.New("ent: K8sDaemonSetSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := kdss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kdss *K8sDaemonSetSelect) BoolsX(ctx context.Context) []bool {
	v, err := kdss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (kdss *K8sDaemonSetSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kdss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{k8sdaemonset.Label}
	default:
		err = fmt.Errorf("ent: K8sDaemonSetSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kdss *K8sDaemonSetSelect) BoolX(ctx context.Context) bool {
	v, err := kdss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kdss *K8sDaemonSetSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := kdss.sql.Query()
	if err := kdss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
