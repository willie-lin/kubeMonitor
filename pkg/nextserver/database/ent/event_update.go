// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/event"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EventUpdate) SetDeletedAt(t time.Time) *EventUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetTs sets the "ts" field.
func (eu *EventUpdate) SetTs(t time.Time) *EventUpdate {
	eu.mutation.SetTs(t)
	return eu
}

// SetValue sets the "value" field.
func (eu *EventUpdate) SetValue(f float64) *EventUpdate {
	eu.mutation.ResetValue()
	eu.mutation.SetValue(f)
	return eu
}

// AddValue adds f to the "value" field.
func (eu *EventUpdate) AddValue(f float64) *EventUpdate {
	eu.mutation.AddValue(f)
	return eu
}

// SetAcked sets the "acked" field.
func (eu *EventUpdate) SetAcked(b bool) *EventUpdate {
	eu.mutation.SetAcked(b)
	return eu
}

// SetAckedTs sets the "ackedTs" field.
func (eu *EventUpdate) SetAckedTs(t time.Time) *EventUpdate {
	eu.mutation.SetAckedTs(t)
	return eu
}

// SetEndpointId sets the "endpointId" field.
func (eu *EventUpdate) SetEndpointId(u uint) *EventUpdate {
	eu.mutation.ResetEndpointId()
	eu.mutation.SetEndpointId(u)
	return eu
}

// AddEndpointId adds u to the "endpointId" field.
func (eu *EventUpdate) AddEndpointId(u uint) *EventUpdate {
	eu.mutation.AddEndpointId(u)
	return eu
}

// SetTypeId sets the "typeId" field.
func (eu *EventUpdate) SetTypeId(u uint) *EventUpdate {
	eu.mutation.ResetTypeId()
	eu.mutation.SetTypeId(u)
	return eu
}

// AddTypeId adds u to the "typeId" field.
func (eu *EventUpdate) AddTypeId(u uint) *EventUpdate {
	eu.mutation.AddTypeId(u)
	return eu
}

// SetNameId sets the "nameId" field.
func (eu *EventUpdate) SetNameId(u uint) *EventUpdate {
	eu.mutation.ResetNameId()
	eu.mutation.SetNameId(u)
	return eu
}

// AddNameId adds u to the "nameId" field.
func (eu *EventUpdate) AddNameId(u uint) *EventUpdate {
	eu.mutation.AddNameId(u)
	return eu
}

// SetLabelId sets the "labelId" field.
func (eu *EventUpdate) SetLabelId(u uint) *EventUpdate {
	eu.mutation.ResetLabelId()
	eu.mutation.SetLabelId(u)
	return eu
}

// AddLabelId adds u to the "labelId" field.
func (eu *EventUpdate) AddLabelId(u uint) *EventUpdate {
	eu.mutation.AddLabelId(u)
	return eu
}

// SetClusterId sets the "clusterId" field.
func (eu *EventUpdate) SetClusterId(u uint) *EventUpdate {
	eu.mutation.ResetClusterId()
	eu.mutation.SetClusterId(u)
	return eu
}

// AddClusterId adds u to the "clusterId" field.
func (eu *EventUpdate) AddClusterId(u uint) *EventUpdate {
	eu.mutation.AddClusterId(u)
	return eu
}

// SetAgentId sets the "agentId" field.
func (eu *EventUpdate) SetAgentId(u uint) *EventUpdate {
	eu.mutation.ResetAgentId()
	eu.mutation.SetAgentId(u)
	return eu
}

// AddAgentId adds u to the "agentId" field.
func (eu *EventUpdate) AddAgentId(u uint) *EventUpdate {
	eu.mutation.AddAgentId(u)
	return eu
}

// SetNodeId sets the "nodeId" field.
func (eu *EventUpdate) SetNodeId(u uint) *EventUpdate {
	eu.mutation.ResetNodeId()
	eu.mutation.SetNodeId(u)
	return eu
}

// AddNodeId adds u to the "nodeId" field.
func (eu *EventUpdate) AddNodeId(u uint) *EventUpdate {
	eu.mutation.AddNodeId(u)
	return eu
}

// SetProcesId sets the "procesId" field.
func (eu *EventUpdate) SetProcesId(u uint) *EventUpdate {
	eu.mutation.ResetProcesId()
	eu.mutation.SetProcesId(u)
	return eu
}

// AddProcesId adds u to the "procesId" field.
func (eu *EventUpdate) AddProcesId(u uint) *EventUpdate {
	eu.mutation.AddProcesId(u)
	return eu
}

// SetContainerId sets the "containerId" field.
func (eu *EventUpdate) SetContainerId(u uint) *EventUpdate {
	eu.mutation.ResetContainerId()
	eu.mutation.SetContainerId(u)
	return eu
}

// AddContainerId adds u to the "containerId" field.
func (eu *EventUpdate) AddContainerId(u uint) *EventUpdate {
	eu.mutation.AddContainerId(u)
	return eu
}

// SetPodId sets the "podId" field.
func (eu *EventUpdate) SetPodId(u uint) *EventUpdate {
	eu.mutation.ResetPodId()
	eu.mutation.SetPodId(u)
	return eu
}

// AddPodId adds u to the "podId" field.
func (eu *EventUpdate) AddPodId(u uint) *EventUpdate {
	eu.mutation.AddPodId(u)
	return eu
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	if _, ok := eu.mutation.DeletedAt(); !ok {
		v := event.UpdateDefaultDeletedAt()
		eu.mutation.SetDeletedAt(v)
	}
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldDeletedAt,
		})
	}
	if value, ok := eu.mutation.Ts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldTs,
		})
	}
	if value, ok := eu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: event.FieldValue,
		})
	}
	if value, ok := eu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: event.FieldValue,
		})
	}
	if value, ok := eu.mutation.Acked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: event.FieldAcked,
		})
	}
	if value, ok := eu.mutation.AckedTs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldAckedTs,
		})
	}
	if value, ok := eu.mutation.EndpointId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldEndpointId,
		})
	}
	if value, ok := eu.mutation.AddedEndpointId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldEndpointId,
		})
	}
	if value, ok := eu.mutation.TypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldTypeId,
		})
	}
	if value, ok := eu.mutation.AddedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldTypeId,
		})
	}
	if value, ok := eu.mutation.NameId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldNameId,
		})
	}
	if value, ok := eu.mutation.AddedNameId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldNameId,
		})
	}
	if value, ok := eu.mutation.LabelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldLabelId,
		})
	}
	if value, ok := eu.mutation.AddedLabelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldLabelId,
		})
	}
	if value, ok := eu.mutation.ClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldClusterId,
		})
	}
	if value, ok := eu.mutation.AddedClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldClusterId,
		})
	}
	if value, ok := eu.mutation.AgentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldAgentId,
		})
	}
	if value, ok := eu.mutation.AddedAgentId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldAgentId,
		})
	}
	if value, ok := eu.mutation.NodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldNodeId,
		})
	}
	if value, ok := eu.mutation.AddedNodeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldNodeId,
		})
	}
	if value, ok := eu.mutation.ProcesId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldProcesId,
		})
	}
	if value, ok := eu.mutation.AddedProcesId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldProcesId,
		})
	}
	if value, ok := eu.mutation.ContainerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldContainerId,
		})
	}
	if value, ok := eu.mutation.AddedContainerId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldContainerId,
		})
	}
	if value, ok := eu.mutation.PodId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldPodId,
		})
	}
	if value, ok := eu.mutation.AddedPodId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldPodId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EventUpdateOne) SetDeletedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetTs sets the "ts" field.
func (euo *EventUpdateOne) SetTs(t time.Time) *EventUpdateOne {
	euo.mutation.SetTs(t)
	return euo
}

// SetValue sets the "value" field.
func (euo *EventUpdateOne) SetValue(f float64) *EventUpdateOne {
	euo.mutation.ResetValue()
	euo.mutation.SetValue(f)
	return euo
}

// AddValue adds f to the "value" field.
func (euo *EventUpdateOne) AddValue(f float64) *EventUpdateOne {
	euo.mutation.AddValue(f)
	return euo
}

// SetAcked sets the "acked" field.
func (euo *EventUpdateOne) SetAcked(b bool) *EventUpdateOne {
	euo.mutation.SetAcked(b)
	return euo
}

// SetAckedTs sets the "ackedTs" field.
func (euo *EventUpdateOne) SetAckedTs(t time.Time) *EventUpdateOne {
	euo.mutation.SetAckedTs(t)
	return euo
}

// SetEndpointId sets the "endpointId" field.
func (euo *EventUpdateOne) SetEndpointId(u uint) *EventUpdateOne {
	euo.mutation.ResetEndpointId()
	euo.mutation.SetEndpointId(u)
	return euo
}

// AddEndpointId adds u to the "endpointId" field.
func (euo *EventUpdateOne) AddEndpointId(u uint) *EventUpdateOne {
	euo.mutation.AddEndpointId(u)
	return euo
}

// SetTypeId sets the "typeId" field.
func (euo *EventUpdateOne) SetTypeId(u uint) *EventUpdateOne {
	euo.mutation.ResetTypeId()
	euo.mutation.SetTypeId(u)
	return euo
}

// AddTypeId adds u to the "typeId" field.
func (euo *EventUpdateOne) AddTypeId(u uint) *EventUpdateOne {
	euo.mutation.AddTypeId(u)
	return euo
}

// SetNameId sets the "nameId" field.
func (euo *EventUpdateOne) SetNameId(u uint) *EventUpdateOne {
	euo.mutation.ResetNameId()
	euo.mutation.SetNameId(u)
	return euo
}

// AddNameId adds u to the "nameId" field.
func (euo *EventUpdateOne) AddNameId(u uint) *EventUpdateOne {
	euo.mutation.AddNameId(u)
	return euo
}

// SetLabelId sets the "labelId" field.
func (euo *EventUpdateOne) SetLabelId(u uint) *EventUpdateOne {
	euo.mutation.ResetLabelId()
	euo.mutation.SetLabelId(u)
	return euo
}

// AddLabelId adds u to the "labelId" field.
func (euo *EventUpdateOne) AddLabelId(u uint) *EventUpdateOne {
	euo.mutation.AddLabelId(u)
	return euo
}

// SetClusterId sets the "clusterId" field.
func (euo *EventUpdateOne) SetClusterId(u uint) *EventUpdateOne {
	euo.mutation.ResetClusterId()
	euo.mutation.SetClusterId(u)
	return euo
}

// AddClusterId adds u to the "clusterId" field.
func (euo *EventUpdateOne) AddClusterId(u uint) *EventUpdateOne {
	euo.mutation.AddClusterId(u)
	return euo
}

// SetAgentId sets the "agentId" field.
func (euo *EventUpdateOne) SetAgentId(u uint) *EventUpdateOne {
	euo.mutation.ResetAgentId()
	euo.mutation.SetAgentId(u)
	return euo
}

// AddAgentId adds u to the "agentId" field.
func (euo *EventUpdateOne) AddAgentId(u uint) *EventUpdateOne {
	euo.mutation.AddAgentId(u)
	return euo
}

// SetNodeId sets the "nodeId" field.
func (euo *EventUpdateOne) SetNodeId(u uint) *EventUpdateOne {
	euo.mutation.ResetNodeId()
	euo.mutation.SetNodeId(u)
	return euo
}

// AddNodeId adds u to the "nodeId" field.
func (euo *EventUpdateOne) AddNodeId(u uint) *EventUpdateOne {
	euo.mutation.AddNodeId(u)
	return euo
}

// SetProcesId sets the "procesId" field.
func (euo *EventUpdateOne) SetProcesId(u uint) *EventUpdateOne {
	euo.mutation.ResetProcesId()
	euo.mutation.SetProcesId(u)
	return euo
}

// AddProcesId adds u to the "procesId" field.
func (euo *EventUpdateOne) AddProcesId(u uint) *EventUpdateOne {
	euo.mutation.AddProcesId(u)
	return euo
}

// SetContainerId sets the "containerId" field.
func (euo *EventUpdateOne) SetContainerId(u uint) *EventUpdateOne {
	euo.mutation.ResetContainerId()
	euo.mutation.SetContainerId(u)
	return euo
}

// AddContainerId adds u to the "containerId" field.
func (euo *EventUpdateOne) AddContainerId(u uint) *EventUpdateOne {
	euo.mutation.AddContainerId(u)
	return euo
}

// SetPodId sets the "podId" field.
func (euo *EventUpdateOne) SetPodId(u uint) *EventUpdateOne {
	euo.mutation.ResetPodId()
	euo.mutation.SetPodId(u)
	return euo
}

// AddPodId adds u to the "podId" field.
func (euo *EventUpdateOne) AddPodId(u uint) *EventUpdateOne {
	euo.mutation.AddPodId(u)
	return euo
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	var (
		err  error
		node *Event
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	if _, ok := euo.mutation.DeletedAt(); !ok {
		v := event.UpdateDefaultDeletedAt()
		euo.mutation.SetDeletedAt(v)
	}
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: event.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Event.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldDeletedAt,
		})
	}
	if value, ok := euo.mutation.Ts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldTs,
		})
	}
	if value, ok := euo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: event.FieldValue,
		})
	}
	if value, ok := euo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: event.FieldValue,
		})
	}
	if value, ok := euo.mutation.Acked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: event.FieldAcked,
		})
	}
	if value, ok := euo.mutation.AckedTs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: event.FieldAckedTs,
		})
	}
	if value, ok := euo.mutation.EndpointId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldEndpointId,
		})
	}
	if value, ok := euo.mutation.AddedEndpointId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldEndpointId,
		})
	}
	if value, ok := euo.mutation.TypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldTypeId,
		})
	}
	if value, ok := euo.mutation.AddedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldTypeId,
		})
	}
	if value, ok := euo.mutation.NameId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldNameId,
		})
	}
	if value, ok := euo.mutation.AddedNameId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldNameId,
		})
	}
	if value, ok := euo.mutation.LabelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldLabelId,
		})
	}
	if value, ok := euo.mutation.AddedLabelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldLabelId,
		})
	}
	if value, ok := euo.mutation.ClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldClusterId,
		})
	}
	if value, ok := euo.mutation.AddedClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldClusterId,
		})
	}
	if value, ok := euo.mutation.AgentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldAgentId,
		})
	}
	if value, ok := euo.mutation.AddedAgentId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldAgentId,
		})
	}
	if value, ok := euo.mutation.NodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldNodeId,
		})
	}
	if value, ok := euo.mutation.AddedNodeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldNodeId,
		})
	}
	if value, ok := euo.mutation.ProcesId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldProcesId,
		})
	}
	if value, ok := euo.mutation.AddedProcesId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldProcesId,
		})
	}
	if value, ok := euo.mutation.ContainerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldContainerId,
		})
	}
	if value, ok := euo.mutation.AddedContainerId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldContainerId,
		})
	}
	if value, ok := euo.mutation.PodId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldPodId,
		})
	}
	if value, ok := euo.mutation.AddedPodId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: event.FieldPodId,
		})
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
