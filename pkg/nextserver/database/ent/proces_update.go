// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/container"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/node"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/proces"
)

// ProcesUpdate is the builder for updating Proces entities.
type ProcesUpdate struct {
	config
	hooks    []Hook
	mutation *ProcesMutation
}

// Where appends a list predicates to the ProcesUpdate builder.
func (pu *ProcesUpdate) Where(ps ...predicate.Proces) *ProcesUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProcesUpdate) SetUpdatedAt(t time.Time) *ProcesUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *ProcesUpdate) SetDeletedAt(t time.Time) *ProcesUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetName sets the "name" field.
func (pu *ProcesUpdate) SetName(s string) *ProcesUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetPId sets the "pId" field.
func (pu *ProcesUpdate) SetPId(i int32) *ProcesUpdate {
	pu.mutation.ResetPId()
	pu.mutation.SetPId(i)
	return pu
}

// AddPId adds i to the "pId" field.
func (pu *ProcesUpdate) AddPId(i int32) *ProcesUpdate {
	pu.mutation.AddPId(i)
	return pu
}

// SetCmd sets the "cmd" field.
func (pu *ProcesUpdate) SetCmd(s string) *ProcesUpdate {
	pu.mutation.SetCmd(s)
	return pu
}

// SetInfo sets the "info" field.
func (pu *ProcesUpdate) SetInfo(s []string) *ProcesUpdate {
	pu.mutation.SetInfo(s)
	return pu
}

// SetClusterId sets the "clusterId" field.
func (pu *ProcesUpdate) SetClusterId(s string) *ProcesUpdate {
	pu.mutation.SetClusterId(s)
	return pu
}

// SetNodeId sets the "nodeId" field.
func (pu *ProcesUpdate) SetNodeId(s string) *ProcesUpdate {
	pu.mutation.SetNodeId(s)
	return pu
}

// SetContainerId sets the "containerId" field.
func (pu *ProcesUpdate) SetContainerId(s string) *ProcesUpdate {
	pu.mutation.SetContainerId(s)
	return pu
}

// SetNodeProcessID sets the "node_process" edge to the Node entity by ID.
func (pu *ProcesUpdate) SetNodeProcessID(id uint) *ProcesUpdate {
	pu.mutation.SetNodeProcessID(id)
	return pu
}

// SetNillableNodeProcessID sets the "node_process" edge to the Node entity by ID if the given value is not nil.
func (pu *ProcesUpdate) SetNillableNodeProcessID(id *uint) *ProcesUpdate {
	if id != nil {
		pu = pu.SetNodeProcessID(*id)
	}
	return pu
}

// SetNodeProcess sets the "node_process" edge to the Node entity.
func (pu *ProcesUpdate) SetNodeProcess(n *Node) *ProcesUpdate {
	return pu.SetNodeProcessID(n.ID)
}

// SetContainerProcessID sets the "container_process" edge to the Container entity by ID.
func (pu *ProcesUpdate) SetContainerProcessID(id uint) *ProcesUpdate {
	pu.mutation.SetContainerProcessID(id)
	return pu
}

// SetNillableContainerProcessID sets the "container_process" edge to the Container entity by ID if the given value is not nil.
func (pu *ProcesUpdate) SetNillableContainerProcessID(id *uint) *ProcesUpdate {
	if id != nil {
		pu = pu.SetContainerProcessID(*id)
	}
	return pu
}

// SetContainerProcess sets the "container_process" edge to the Container entity.
func (pu *ProcesUpdate) SetContainerProcess(c *Container) *ProcesUpdate {
	return pu.SetContainerProcessID(c.ID)
}

// Mutation returns the ProcesMutation object of the builder.
func (pu *ProcesUpdate) Mutation() *ProcesMutation {
	return pu.mutation
}

// ClearNodeProcess clears the "node_process" edge to the Node entity.
func (pu *ProcesUpdate) ClearNodeProcess() *ProcesUpdate {
	pu.mutation.ClearNodeProcess()
	return pu
}

// ClearContainerProcess clears the "container_process" edge to the Container entity.
func (pu *ProcesUpdate) ClearContainerProcess() *ProcesUpdate {
	pu.mutation.ClearContainerProcess()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProcesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProcesUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProcesUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProcesUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProcesUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := proces.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	if _, ok := pu.mutation.DeletedAt(); !ok {
		v := proces.UpdateDefaultDeletedAt()
		pu.mutation.SetDeletedAt(v)
	}
}

func (pu *ProcesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   proces.Table,
			Columns: proces.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: proces.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proces.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proces.FieldDeletedAt,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proces.FieldName,
		})
	}
	if value, ok := pu.mutation.PId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: proces.FieldPId,
		})
	}
	if value, ok := pu.mutation.AddedPId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: proces.FieldPId,
		})
	}
	if value, ok := pu.mutation.Cmd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proces.FieldCmd,
		})
	}
	if value, ok := pu.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: proces.FieldInfo,
		})
	}
	if value, ok := pu.mutation.ClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proces.FieldClusterId,
		})
	}
	if value, ok := pu.mutation.NodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proces.FieldNodeId,
		})
	}
	if value, ok := pu.mutation.ContainerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proces.FieldContainerId,
		})
	}
	if pu.mutation.NodeProcessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proces.NodeProcessTable,
			Columns: []string{proces.NodeProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NodeProcessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proces.NodeProcessTable,
			Columns: []string{proces.NodeProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ContainerProcessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proces.ContainerProcessTable,
			Columns: []string{proces.ContainerProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: container.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ContainerProcessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proces.ContainerProcessTable,
			Columns: []string{proces.ContainerProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: container.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proces.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProcesUpdateOne is the builder for updating a single Proces entity.
type ProcesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProcesUpdateOne) SetUpdatedAt(t time.Time) *ProcesUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *ProcesUpdateOne) SetDeletedAt(t time.Time) *ProcesUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetName sets the "name" field.
func (puo *ProcesUpdateOne) SetName(s string) *ProcesUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetPId sets the "pId" field.
func (puo *ProcesUpdateOne) SetPId(i int32) *ProcesUpdateOne {
	puo.mutation.ResetPId()
	puo.mutation.SetPId(i)
	return puo
}

// AddPId adds i to the "pId" field.
func (puo *ProcesUpdateOne) AddPId(i int32) *ProcesUpdateOne {
	puo.mutation.AddPId(i)
	return puo
}

// SetCmd sets the "cmd" field.
func (puo *ProcesUpdateOne) SetCmd(s string) *ProcesUpdateOne {
	puo.mutation.SetCmd(s)
	return puo
}

// SetInfo sets the "info" field.
func (puo *ProcesUpdateOne) SetInfo(s []string) *ProcesUpdateOne {
	puo.mutation.SetInfo(s)
	return puo
}

// SetClusterId sets the "clusterId" field.
func (puo *ProcesUpdateOne) SetClusterId(s string) *ProcesUpdateOne {
	puo.mutation.SetClusterId(s)
	return puo
}

// SetNodeId sets the "nodeId" field.
func (puo *ProcesUpdateOne) SetNodeId(s string) *ProcesUpdateOne {
	puo.mutation.SetNodeId(s)
	return puo
}

// SetContainerId sets the "containerId" field.
func (puo *ProcesUpdateOne) SetContainerId(s string) *ProcesUpdateOne {
	puo.mutation.SetContainerId(s)
	return puo
}

// SetNodeProcessID sets the "node_process" edge to the Node entity by ID.
func (puo *ProcesUpdateOne) SetNodeProcessID(id uint) *ProcesUpdateOne {
	puo.mutation.SetNodeProcessID(id)
	return puo
}

// SetNillableNodeProcessID sets the "node_process" edge to the Node entity by ID if the given value is not nil.
func (puo *ProcesUpdateOne) SetNillableNodeProcessID(id *uint) *ProcesUpdateOne {
	if id != nil {
		puo = puo.SetNodeProcessID(*id)
	}
	return puo
}

// SetNodeProcess sets the "node_process" edge to the Node entity.
func (puo *ProcesUpdateOne) SetNodeProcess(n *Node) *ProcesUpdateOne {
	return puo.SetNodeProcessID(n.ID)
}

// SetContainerProcessID sets the "container_process" edge to the Container entity by ID.
func (puo *ProcesUpdateOne) SetContainerProcessID(id uint) *ProcesUpdateOne {
	puo.mutation.SetContainerProcessID(id)
	return puo
}

// SetNillableContainerProcessID sets the "container_process" edge to the Container entity by ID if the given value is not nil.
func (puo *ProcesUpdateOne) SetNillableContainerProcessID(id *uint) *ProcesUpdateOne {
	if id != nil {
		puo = puo.SetContainerProcessID(*id)
	}
	return puo
}

// SetContainerProcess sets the "container_process" edge to the Container entity.
func (puo *ProcesUpdateOne) SetContainerProcess(c *Container) *ProcesUpdateOne {
	return puo.SetContainerProcessID(c.ID)
}

// Mutation returns the ProcesMutation object of the builder.
func (puo *ProcesUpdateOne) Mutation() *ProcesMutation {
	return puo.mutation
}

// ClearNodeProcess clears the "node_process" edge to the Node entity.
func (puo *ProcesUpdateOne) ClearNodeProcess() *ProcesUpdateOne {
	puo.mutation.ClearNodeProcess()
	return puo
}

// ClearContainerProcess clears the "container_process" edge to the Container entity.
func (puo *ProcesUpdateOne) ClearContainerProcess() *ProcesUpdateOne {
	puo.mutation.ClearContainerProcess()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProcesUpdateOne) Select(field string, fields ...string) *ProcesUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Proces entity.
func (puo *ProcesUpdateOne) Save(ctx context.Context) (*Proces, error) {
	var (
		err  error
		node *Proces
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProcesUpdateOne) SaveX(ctx context.Context) *Proces {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProcesUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProcesUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProcesUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := proces.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	if _, ok := puo.mutation.DeletedAt(); !ok {
		v := proces.UpdateDefaultDeletedAt()
		puo.mutation.SetDeletedAt(v)
	}
}

func (puo *ProcesUpdateOne) sqlSave(ctx context.Context) (_node *Proces, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   proces.Table,
			Columns: proces.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: proces.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Proces.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proces.FieldID)
		for _, f := range fields {
			if !proces.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proces.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proces.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proces.FieldDeletedAt,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proces.FieldName,
		})
	}
	if value, ok := puo.mutation.PId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: proces.FieldPId,
		})
	}
	if value, ok := puo.mutation.AddedPId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: proces.FieldPId,
		})
	}
	if value, ok := puo.mutation.Cmd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proces.FieldCmd,
		})
	}
	if value, ok := puo.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: proces.FieldInfo,
		})
	}
	if value, ok := puo.mutation.ClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proces.FieldClusterId,
		})
	}
	if value, ok := puo.mutation.NodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proces.FieldNodeId,
		})
	}
	if value, ok := puo.mutation.ContainerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proces.FieldContainerId,
		})
	}
	if puo.mutation.NodeProcessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proces.NodeProcessTable,
			Columns: []string{proces.NodeProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NodeProcessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proces.NodeProcessTable,
			Columns: []string{proces.NodeProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ContainerProcessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proces.ContainerProcessTable,
			Columns: []string{proces.ContainerProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: container.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ContainerProcessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proces.ContainerProcessTable,
			Columns: []string{proces.ContainerProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: container.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Proces{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proces.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
