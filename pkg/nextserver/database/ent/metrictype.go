// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metrictype"
)

// MetricType is the model entity for the MetricType schema.
type MetricType struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetricTypeQuery when eager-loading is set.
	Edges MetricTypeEdges `json:"edges"`
}

// MetricTypeEdges holds the relations/edges for other nodes in the graph.
type MetricTypeEdges struct {
	// MetricNames holds the value of the metricNames edge.
	MetricNames []*MetricName `json:"metricNames,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MetricNamesOrErr returns the MetricNames value or an error if the edge
// was not loaded in eager-loading.
func (e MetricTypeEdges) MetricNamesOrErr() ([]*MetricName, error) {
	if e.loadedTypes[0] {
		return e.MetricNames, nil
	}
	return nil, &NotLoadedError{edge: "metricNames"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MetricType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case metrictype.FieldID:
			values[i] = new(sql.NullInt64)
		case metrictype.FieldName:
			values[i] = new(sql.NullString)
		case metrictype.FieldCreatedAt, metrictype.FieldUpdatedAt, metrictype.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MetricType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MetricType fields.
func (mt *MetricType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metrictype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mt.ID = uint(value.Int64)
		case metrictype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mt.CreatedAt = value.Time
			}
		case metrictype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mt.UpdatedAt = value.Time
			}
		case metrictype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mt.DeletedAt = value.Time
			}
		case metrictype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mt.Name = value.String
			}
		}
	}
	return nil
}

// QueryMetricNames queries the "metricNames" edge of the MetricType entity.
func (mt *MetricType) QueryMetricNames() *MetricNameQuery {
	return (&MetricTypeClient{config: mt.config}).QueryMetricNames(mt)
}

// Update returns a builder for updating this MetricType.
// Note that you need to call MetricType.Unwrap() before calling this method if this MetricType
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MetricType) Update() *MetricTypeUpdateOne {
	return (&MetricTypeClient{config: mt.config}).UpdateOne(mt)
}

// Unwrap unwraps the MetricType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mt *MetricType) Unwrap() *MetricType {
	tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetricType is not a transactional entity")
	}
	mt.config.driver = tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MetricType) String() string {
	var builder strings.Builder
	builder.WriteString("MetricType(")
	builder.WriteString(fmt.Sprintf("id=%v", mt.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(mt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(mt.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(mt.Name)
	builder.WriteByte(')')
	return builder.String()
}

// MetricTypes is a parsable slice of MetricType.
type MetricTypes []*MetricType

func (mt MetricTypes) config(cfg config) {
	for _i := range mt {
		mt[_i].config = cfg
	}
}
