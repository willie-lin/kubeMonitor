// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sdeployment"
)

// K8sDeployment is the model entity for the K8sDeployment schema.
type K8sDeployment struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// K8sClusterId holds the value of the "k8sClusterId" field.
	K8sClusterId uint `json:"k8sClusterId,omitempty"`
	// K8sNamespaceId holds the value of the "k8sNamespaceId" field.
	K8sNamespaceId uint `json:"k8sNamespaceId,omitempty"`
	// K8sObjectId holds the value of the "k8sObjectId" field.
	K8sObjectId uint `json:"k8sObjectId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*K8sDeployment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case k8sdeployment.FieldID, k8sdeployment.FieldK8sClusterId, k8sdeployment.FieldK8sNamespaceId, k8sdeployment.FieldK8sObjectId:
			values[i] = new(sql.NullInt64)
		case k8sdeployment.FieldName:
			values[i] = new(sql.NullString)
		case k8sdeployment.FieldCreatedAt, k8sdeployment.FieldUpdatedAt, k8sdeployment.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type K8sDeployment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the K8sDeployment fields.
func (kd *K8sDeployment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case k8sdeployment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kd.ID = uint(value.Int64)
		case k8sdeployment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				kd.CreatedAt = value.Time
			}
		case k8sdeployment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				kd.UpdatedAt = value.Time
			}
		case k8sdeployment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				kd.DeletedAt = value.Time
			}
		case k8sdeployment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				kd.Name = value.String
			}
		case k8sdeployment.FieldK8sClusterId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field k8sClusterId", values[i])
			} else if value.Valid {
				kd.K8sClusterId = uint(value.Int64)
			}
		case k8sdeployment.FieldK8sNamespaceId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field k8sNamespaceId", values[i])
			} else if value.Valid {
				kd.K8sNamespaceId = uint(value.Int64)
			}
		case k8sdeployment.FieldK8sObjectId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field k8sObjectId", values[i])
			} else if value.Valid {
				kd.K8sObjectId = uint(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this K8sDeployment.
// Note that you need to call K8sDeployment.Unwrap() before calling this method if this K8sDeployment
// was returned from a transaction, and the transaction was committed or rolled back.
func (kd *K8sDeployment) Update() *K8sDeploymentUpdateOne {
	return (&K8sDeploymentClient{config: kd.config}).UpdateOne(kd)
}

// Unwrap unwraps the K8sDeployment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kd *K8sDeployment) Unwrap() *K8sDeployment {
	tx, ok := kd.config.driver.(*txDriver)
	if !ok {
		panic("ent: K8sDeployment is not a transactional entity")
	}
	kd.config.driver = tx.drv
	return kd
}

// String implements the fmt.Stringer.
func (kd *K8sDeployment) String() string {
	var builder strings.Builder
	builder.WriteString("K8sDeployment(")
	builder.WriteString(fmt.Sprintf("id=%v", kd.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(kd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(kd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(kd.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(kd.Name)
	builder.WriteString(", k8sClusterId=")
	builder.WriteString(fmt.Sprintf("%v", kd.K8sClusterId))
	builder.WriteString(", k8sNamespaceId=")
	builder.WriteString(fmt.Sprintf("%v", kd.K8sNamespaceId))
	builder.WriteString(", k8sObjectId=")
	builder.WriteString(fmt.Sprintf("%v", kd.K8sObjectId))
	builder.WriteByte(')')
	return builder.String()
}

// K8sDeployments is a parsable slice of K8sDeployment.
type K8sDeployments []*K8sDeployment

func (kd K8sDeployments) config(cfg config) {
	for _i := range kd {
		kd[_i].config = cfg
	}
}
