// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8slabel"
)

// K8sLabelCreate is the builder for creating a K8sLabel entity.
type K8sLabelCreate struct {
	config
	mutation *K8sLabelMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (klc *K8sLabelCreate) SetCreatedAt(t time.Time) *K8sLabelCreate {
	klc.mutation.SetCreatedAt(t)
	return klc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (klc *K8sLabelCreate) SetNillableCreatedAt(t *time.Time) *K8sLabelCreate {
	if t != nil {
		klc.SetCreatedAt(*t)
	}
	return klc
}

// SetUpdatedAt sets the "updated_at" field.
func (klc *K8sLabelCreate) SetUpdatedAt(t time.Time) *K8sLabelCreate {
	klc.mutation.SetUpdatedAt(t)
	return klc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (klc *K8sLabelCreate) SetNillableUpdatedAt(t *time.Time) *K8sLabelCreate {
	if t != nil {
		klc.SetUpdatedAt(*t)
	}
	return klc
}

// SetDeletedAt sets the "deleted_at" field.
func (klc *K8sLabelCreate) SetDeletedAt(t time.Time) *K8sLabelCreate {
	klc.mutation.SetDeletedAt(t)
	return klc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (klc *K8sLabelCreate) SetNillableDeletedAt(t *time.Time) *K8sLabelCreate {
	if t != nil {
		klc.SetDeletedAt(*t)
	}
	return klc
}

// SetLabel sets the "label" field.
func (klc *K8sLabelCreate) SetLabel(s string) *K8sLabelCreate {
	klc.mutation.SetLabel(s)
	return klc
}

// SetK8sObjectId sets the "k8sObjectId" field.
func (klc *K8sLabelCreate) SetK8sObjectId(u uint) *K8sLabelCreate {
	klc.mutation.SetK8sObjectId(u)
	return klc
}

// SetID sets the "id" field.
func (klc *K8sLabelCreate) SetID(u uint) *K8sLabelCreate {
	klc.mutation.SetID(u)
	return klc
}

// Mutation returns the K8sLabelMutation object of the builder.
func (klc *K8sLabelCreate) Mutation() *K8sLabelMutation {
	return klc.mutation
}

// Save creates the K8sLabel in the database.
func (klc *K8sLabelCreate) Save(ctx context.Context) (*K8sLabel, error) {
	var (
		err  error
		node *K8sLabel
	)
	klc.defaults()
	if len(klc.hooks) == 0 {
		if err = klc.check(); err != nil {
			return nil, err
		}
		node, err = klc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sLabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = klc.check(); err != nil {
				return nil, err
			}
			klc.mutation = mutation
			if node, err = klc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(klc.hooks) - 1; i >= 0; i-- {
			if klc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = klc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, klc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (klc *K8sLabelCreate) SaveX(ctx context.Context) *K8sLabel {
	v, err := klc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (klc *K8sLabelCreate) Exec(ctx context.Context) error {
	_, err := klc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (klc *K8sLabelCreate) ExecX(ctx context.Context) {
	if err := klc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (klc *K8sLabelCreate) defaults() {
	if _, ok := klc.mutation.CreatedAt(); !ok {
		v := k8slabel.DefaultCreatedAt()
		klc.mutation.SetCreatedAt(v)
	}
	if _, ok := klc.mutation.UpdatedAt(); !ok {
		v := k8slabel.DefaultUpdatedAt()
		klc.mutation.SetUpdatedAt(v)
	}
	if _, ok := klc.mutation.DeletedAt(); !ok {
		v := k8slabel.DefaultDeletedAt()
		klc.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (klc *K8sLabelCreate) check() error {
	if _, ok := klc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := klc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := klc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "deleted_at"`)}
	}
	if _, ok := klc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "label"`)}
	}
	if v, ok := klc.mutation.Label(); ok {
		if err := k8slabel.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "label": %w`, err)}
		}
	}
	if _, ok := klc.mutation.K8sObjectId(); !ok {
		return &ValidationError{Name: "k8sObjectId", err: errors.New(`ent: missing required field "k8sObjectId"`)}
	}
	return nil
}

func (klc *K8sLabelCreate) sqlSave(ctx context.Context) (*K8sLabel, error) {
	_node, _spec := klc.createSpec()
	if err := sqlgraph.CreateNode(ctx, klc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	return _node, nil
}

func (klc *K8sLabelCreate) createSpec() (*K8sLabel, *sqlgraph.CreateSpec) {
	var (
		_node = &K8sLabel{config: klc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: k8slabel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8slabel.FieldID,
			},
		}
	)
	if id, ok := klc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := klc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8slabel.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := klc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8slabel.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := klc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8slabel.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := klc.mutation.Label(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8slabel.FieldLabel,
		})
		_node.Label = value
	}
	if value, ok := klc.mutation.K8sObjectId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8slabel.FieldK8sObjectId,
		})
		_node.K8sObjectId = value
	}
	return _node, _spec
}

// K8sLabelCreateBulk is the builder for creating many K8sLabel entities in bulk.
type K8sLabelCreateBulk struct {
	config
	builders []*K8sLabelCreate
}

// Save creates the K8sLabel entities in the database.
func (klcb *K8sLabelCreateBulk) Save(ctx context.Context) ([]*K8sLabel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(klcb.builders))
	nodes := make([]*K8sLabel, len(klcb.builders))
	mutators := make([]Mutator, len(klcb.builders))
	for i := range klcb.builders {
		func(i int, root context.Context) {
			builder := klcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*K8sLabelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, klcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, klcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, klcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (klcb *K8sLabelCreateBulk) SaveX(ctx context.Context) []*K8sLabel {
	v, err := klcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (klcb *K8sLabelCreateBulk) Exec(ctx context.Context) error {
	_, err := klcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (klcb *K8sLabelCreateBulk) ExecX(ctx context.Context) {
	if err := klcb.Exec(ctx); err != nil {
		panic(err)
	}
}
