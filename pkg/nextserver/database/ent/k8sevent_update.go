// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sevent"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// K8sEventUpdate is the builder for updating K8sEvent entities.
type K8sEventUpdate struct {
	config
	hooks    []Hook
	mutation *K8sEventMutation
}

// Where appends a list predicates to the K8sEventUpdate builder.
func (keu *K8sEventUpdate) Where(ps ...predicate.K8sEvent) *K8sEventUpdate {
	keu.mutation.Where(ps...)
	return keu
}

// SetUpdatedAt sets the "updated_at" field.
func (keu *K8sEventUpdate) SetUpdatedAt(t time.Time) *K8sEventUpdate {
	keu.mutation.SetUpdatedAt(t)
	return keu
}

// SetDeletedAt sets the "deleted_at" field.
func (keu *K8sEventUpdate) SetDeletedAt(t time.Time) *K8sEventUpdate {
	keu.mutation.SetDeletedAt(t)
	return keu
}

// SetTs sets the "ts" field.
func (keu *K8sEventUpdate) SetTs(t time.Time) *K8sEventUpdate {
	keu.mutation.SetTs(t)
	return keu
}

// SetValue sets the "value" field.
func (keu *K8sEventUpdate) SetValue(f float64) *K8sEventUpdate {
	keu.mutation.ResetValue()
	keu.mutation.SetValue(f)
	return keu
}

// AddValue adds f to the "value" field.
func (keu *K8sEventUpdate) AddValue(f float64) *K8sEventUpdate {
	keu.mutation.AddValue(f)
	return keu
}

// SetEndpointId sets the "endpointId" field.
func (keu *K8sEventUpdate) SetEndpointId(u uint) *K8sEventUpdate {
	keu.mutation.ResetEndpointId()
	keu.mutation.SetEndpointId(u)
	return keu
}

// AddEndpointId adds u to the "endpointId" field.
func (keu *K8sEventUpdate) AddEndpointId(u uint) *K8sEventUpdate {
	keu.mutation.AddEndpointId(u)
	return keu
}

// SetTypeId sets the "typeId" field.
func (keu *K8sEventUpdate) SetTypeId(u uint) *K8sEventUpdate {
	keu.mutation.ResetTypeId()
	keu.mutation.SetTypeId(u)
	return keu
}

// AddTypeId adds u to the "typeId" field.
func (keu *K8sEventUpdate) AddTypeId(u uint) *K8sEventUpdate {
	keu.mutation.AddTypeId(u)
	return keu
}

// SetNameId sets the "nameId" field.
func (keu *K8sEventUpdate) SetNameId(u uint) *K8sEventUpdate {
	keu.mutation.ResetNameId()
	keu.mutation.SetNameId(u)
	return keu
}

// AddNameId adds u to the "nameId" field.
func (keu *K8sEventUpdate) AddNameId(u uint) *K8sEventUpdate {
	keu.mutation.AddNameId(u)
	return keu
}

// SetLabelId sets the "labelId" field.
func (keu *K8sEventUpdate) SetLabelId(u uint) *K8sEventUpdate {
	keu.mutation.ResetLabelId()
	keu.mutation.SetLabelId(u)
	return keu
}

// AddLabelId adds u to the "labelId" field.
func (keu *K8sEventUpdate) AddLabelId(u uint) *K8sEventUpdate {
	keu.mutation.AddLabelId(u)
	return keu
}

// SetClusterId sets the "clusterId" field.
func (keu *K8sEventUpdate) SetClusterId(u uint) *K8sEventUpdate {
	keu.mutation.ResetClusterId()
	keu.mutation.SetClusterId(u)
	return keu
}

// AddClusterId adds u to the "clusterId" field.
func (keu *K8sEventUpdate) AddClusterId(u uint) *K8sEventUpdate {
	keu.mutation.AddClusterId(u)
	return keu
}

// SetNamespaceId sets the "namespaceId" field.
func (keu *K8sEventUpdate) SetNamespaceId(u uint) *K8sEventUpdate {
	keu.mutation.ResetNamespaceId()
	keu.mutation.SetNamespaceId(u)
	return keu
}

// AddNamespaceId adds u to the "namespaceId" field.
func (keu *K8sEventUpdate) AddNamespaceId(u uint) *K8sEventUpdate {
	keu.mutation.AddNamespaceId(u)
	return keu
}

// SetNodeId sets the "nodeId" field.
func (keu *K8sEventUpdate) SetNodeId(u uint) *K8sEventUpdate {
	keu.mutation.ResetNodeId()
	keu.mutation.SetNodeId(u)
	return keu
}

// AddNodeId adds u to the "nodeId" field.
func (keu *K8sEventUpdate) AddNodeId(u uint) *K8sEventUpdate {
	keu.mutation.AddNodeId(u)
	return keu
}

// SetContainerId sets the "containerId" field.
func (keu *K8sEventUpdate) SetContainerId(u uint) *K8sEventUpdate {
	keu.mutation.ResetContainerId()
	keu.mutation.SetContainerId(u)
	return keu
}

// AddContainerId adds u to the "containerId" field.
func (keu *K8sEventUpdate) AddContainerId(u uint) *K8sEventUpdate {
	keu.mutation.AddContainerId(u)
	return keu
}

// SetPodId sets the "podId" field.
func (keu *K8sEventUpdate) SetPodId(u uint) *K8sEventUpdate {
	keu.mutation.ResetPodId()
	keu.mutation.SetPodId(u)
	return keu
}

// AddPodId adds u to the "podId" field.
func (keu *K8sEventUpdate) AddPodId(u uint) *K8sEventUpdate {
	keu.mutation.AddPodId(u)
	return keu
}

// Mutation returns the K8sEventMutation object of the builder.
func (keu *K8sEventUpdate) Mutation() *K8sEventMutation {
	return keu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (keu *K8sEventUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	keu.defaults()
	if len(keu.hooks) == 0 {
		affected, err = keu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			keu.mutation = mutation
			affected, err = keu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(keu.hooks) - 1; i >= 0; i-- {
			if keu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = keu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, keu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (keu *K8sEventUpdate) SaveX(ctx context.Context) int {
	affected, err := keu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (keu *K8sEventUpdate) Exec(ctx context.Context) error {
	_, err := keu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (keu *K8sEventUpdate) ExecX(ctx context.Context) {
	if err := keu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (keu *K8sEventUpdate) defaults() {
	if _, ok := keu.mutation.UpdatedAt(); !ok {
		v := k8sevent.UpdateDefaultUpdatedAt()
		keu.mutation.SetUpdatedAt(v)
	}
	if _, ok := keu.mutation.DeletedAt(); !ok {
		v := k8sevent.UpdateDefaultDeletedAt()
		keu.mutation.SetDeletedAt(v)
	}
}

func (keu *K8sEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sevent.Table,
			Columns: k8sevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: k8sevent.FieldID,
			},
		},
	}
	if ps := keu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := keu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sevent.FieldUpdatedAt,
		})
	}
	if value, ok := keu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sevent.FieldDeletedAt,
		})
	}
	if value, ok := keu.mutation.Ts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sevent.FieldTs,
		})
	}
	if value, ok := keu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: k8sevent.FieldValue,
		})
	}
	if value, ok := keu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: k8sevent.FieldValue,
		})
	}
	if value, ok := keu.mutation.EndpointId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldEndpointId,
		})
	}
	if value, ok := keu.mutation.AddedEndpointId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldEndpointId,
		})
	}
	if value, ok := keu.mutation.TypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldTypeId,
		})
	}
	if value, ok := keu.mutation.AddedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldTypeId,
		})
	}
	if value, ok := keu.mutation.NameId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNameId,
		})
	}
	if value, ok := keu.mutation.AddedNameId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNameId,
		})
	}
	if value, ok := keu.mutation.LabelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldLabelId,
		})
	}
	if value, ok := keu.mutation.AddedLabelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldLabelId,
		})
	}
	if value, ok := keu.mutation.ClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldClusterId,
		})
	}
	if value, ok := keu.mutation.AddedClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldClusterId,
		})
	}
	if value, ok := keu.mutation.NamespaceId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNamespaceId,
		})
	}
	if value, ok := keu.mutation.AddedNamespaceId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNamespaceId,
		})
	}
	if value, ok := keu.mutation.NodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNodeId,
		})
	}
	if value, ok := keu.mutation.AddedNodeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNodeId,
		})
	}
	if value, ok := keu.mutation.ContainerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldContainerId,
		})
	}
	if value, ok := keu.mutation.AddedContainerId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldContainerId,
		})
	}
	if value, ok := keu.mutation.PodId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldPodId,
		})
	}
	if value, ok := keu.mutation.AddedPodId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldPodId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, keu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8sevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// K8sEventUpdateOne is the builder for updating a single K8sEvent entity.
type K8sEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *K8sEventMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (keuo *K8sEventUpdateOne) SetUpdatedAt(t time.Time) *K8sEventUpdateOne {
	keuo.mutation.SetUpdatedAt(t)
	return keuo
}

// SetDeletedAt sets the "deleted_at" field.
func (keuo *K8sEventUpdateOne) SetDeletedAt(t time.Time) *K8sEventUpdateOne {
	keuo.mutation.SetDeletedAt(t)
	return keuo
}

// SetTs sets the "ts" field.
func (keuo *K8sEventUpdateOne) SetTs(t time.Time) *K8sEventUpdateOne {
	keuo.mutation.SetTs(t)
	return keuo
}

// SetValue sets the "value" field.
func (keuo *K8sEventUpdateOne) SetValue(f float64) *K8sEventUpdateOne {
	keuo.mutation.ResetValue()
	keuo.mutation.SetValue(f)
	return keuo
}

// AddValue adds f to the "value" field.
func (keuo *K8sEventUpdateOne) AddValue(f float64) *K8sEventUpdateOne {
	keuo.mutation.AddValue(f)
	return keuo
}

// SetEndpointId sets the "endpointId" field.
func (keuo *K8sEventUpdateOne) SetEndpointId(u uint) *K8sEventUpdateOne {
	keuo.mutation.ResetEndpointId()
	keuo.mutation.SetEndpointId(u)
	return keuo
}

// AddEndpointId adds u to the "endpointId" field.
func (keuo *K8sEventUpdateOne) AddEndpointId(u uint) *K8sEventUpdateOne {
	keuo.mutation.AddEndpointId(u)
	return keuo
}

// SetTypeId sets the "typeId" field.
func (keuo *K8sEventUpdateOne) SetTypeId(u uint) *K8sEventUpdateOne {
	keuo.mutation.ResetTypeId()
	keuo.mutation.SetTypeId(u)
	return keuo
}

// AddTypeId adds u to the "typeId" field.
func (keuo *K8sEventUpdateOne) AddTypeId(u uint) *K8sEventUpdateOne {
	keuo.mutation.AddTypeId(u)
	return keuo
}

// SetNameId sets the "nameId" field.
func (keuo *K8sEventUpdateOne) SetNameId(u uint) *K8sEventUpdateOne {
	keuo.mutation.ResetNameId()
	keuo.mutation.SetNameId(u)
	return keuo
}

// AddNameId adds u to the "nameId" field.
func (keuo *K8sEventUpdateOne) AddNameId(u uint) *K8sEventUpdateOne {
	keuo.mutation.AddNameId(u)
	return keuo
}

// SetLabelId sets the "labelId" field.
func (keuo *K8sEventUpdateOne) SetLabelId(u uint) *K8sEventUpdateOne {
	keuo.mutation.ResetLabelId()
	keuo.mutation.SetLabelId(u)
	return keuo
}

// AddLabelId adds u to the "labelId" field.
func (keuo *K8sEventUpdateOne) AddLabelId(u uint) *K8sEventUpdateOne {
	keuo.mutation.AddLabelId(u)
	return keuo
}

// SetClusterId sets the "clusterId" field.
func (keuo *K8sEventUpdateOne) SetClusterId(u uint) *K8sEventUpdateOne {
	keuo.mutation.ResetClusterId()
	keuo.mutation.SetClusterId(u)
	return keuo
}

// AddClusterId adds u to the "clusterId" field.
func (keuo *K8sEventUpdateOne) AddClusterId(u uint) *K8sEventUpdateOne {
	keuo.mutation.AddClusterId(u)
	return keuo
}

// SetNamespaceId sets the "namespaceId" field.
func (keuo *K8sEventUpdateOne) SetNamespaceId(u uint) *K8sEventUpdateOne {
	keuo.mutation.ResetNamespaceId()
	keuo.mutation.SetNamespaceId(u)
	return keuo
}

// AddNamespaceId adds u to the "namespaceId" field.
func (keuo *K8sEventUpdateOne) AddNamespaceId(u uint) *K8sEventUpdateOne {
	keuo.mutation.AddNamespaceId(u)
	return keuo
}

// SetNodeId sets the "nodeId" field.
func (keuo *K8sEventUpdateOne) SetNodeId(u uint) *K8sEventUpdateOne {
	keuo.mutation.ResetNodeId()
	keuo.mutation.SetNodeId(u)
	return keuo
}

// AddNodeId adds u to the "nodeId" field.
func (keuo *K8sEventUpdateOne) AddNodeId(u uint) *K8sEventUpdateOne {
	keuo.mutation.AddNodeId(u)
	return keuo
}

// SetContainerId sets the "containerId" field.
func (keuo *K8sEventUpdateOne) SetContainerId(u uint) *K8sEventUpdateOne {
	keuo.mutation.ResetContainerId()
	keuo.mutation.SetContainerId(u)
	return keuo
}

// AddContainerId adds u to the "containerId" field.
func (keuo *K8sEventUpdateOne) AddContainerId(u uint) *K8sEventUpdateOne {
	keuo.mutation.AddContainerId(u)
	return keuo
}

// SetPodId sets the "podId" field.
func (keuo *K8sEventUpdateOne) SetPodId(u uint) *K8sEventUpdateOne {
	keuo.mutation.ResetPodId()
	keuo.mutation.SetPodId(u)
	return keuo
}

// AddPodId adds u to the "podId" field.
func (keuo *K8sEventUpdateOne) AddPodId(u uint) *K8sEventUpdateOne {
	keuo.mutation.AddPodId(u)
	return keuo
}

// Mutation returns the K8sEventMutation object of the builder.
func (keuo *K8sEventUpdateOne) Mutation() *K8sEventMutation {
	return keuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (keuo *K8sEventUpdateOne) Select(field string, fields ...string) *K8sEventUpdateOne {
	keuo.fields = append([]string{field}, fields...)
	return keuo
}

// Save executes the query and returns the updated K8sEvent entity.
func (keuo *K8sEventUpdateOne) Save(ctx context.Context) (*K8sEvent, error) {
	var (
		err  error
		node *K8sEvent
	)
	keuo.defaults()
	if len(keuo.hooks) == 0 {
		node, err = keuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			keuo.mutation = mutation
			node, err = keuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(keuo.hooks) - 1; i >= 0; i-- {
			if keuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = keuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, keuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (keuo *K8sEventUpdateOne) SaveX(ctx context.Context) *K8sEvent {
	node, err := keuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (keuo *K8sEventUpdateOne) Exec(ctx context.Context) error {
	_, err := keuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (keuo *K8sEventUpdateOne) ExecX(ctx context.Context) {
	if err := keuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (keuo *K8sEventUpdateOne) defaults() {
	if _, ok := keuo.mutation.UpdatedAt(); !ok {
		v := k8sevent.UpdateDefaultUpdatedAt()
		keuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := keuo.mutation.DeletedAt(); !ok {
		v := k8sevent.UpdateDefaultDeletedAt()
		keuo.mutation.SetDeletedAt(v)
	}
}

func (keuo *K8sEventUpdateOne) sqlSave(ctx context.Context) (_node *K8sEvent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sevent.Table,
			Columns: k8sevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: k8sevent.FieldID,
			},
		},
	}
	id, ok := keuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing K8sEvent.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := keuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, k8sevent.FieldID)
		for _, f := range fields {
			if !k8sevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != k8sevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := keuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := keuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sevent.FieldUpdatedAt,
		})
	}
	if value, ok := keuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sevent.FieldDeletedAt,
		})
	}
	if value, ok := keuo.mutation.Ts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sevent.FieldTs,
		})
	}
	if value, ok := keuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: k8sevent.FieldValue,
		})
	}
	if value, ok := keuo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: k8sevent.FieldValue,
		})
	}
	if value, ok := keuo.mutation.EndpointId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldEndpointId,
		})
	}
	if value, ok := keuo.mutation.AddedEndpointId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldEndpointId,
		})
	}
	if value, ok := keuo.mutation.TypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldTypeId,
		})
	}
	if value, ok := keuo.mutation.AddedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldTypeId,
		})
	}
	if value, ok := keuo.mutation.NameId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNameId,
		})
	}
	if value, ok := keuo.mutation.AddedNameId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNameId,
		})
	}
	if value, ok := keuo.mutation.LabelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldLabelId,
		})
	}
	if value, ok := keuo.mutation.AddedLabelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldLabelId,
		})
	}
	if value, ok := keuo.mutation.ClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldClusterId,
		})
	}
	if value, ok := keuo.mutation.AddedClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldClusterId,
		})
	}
	if value, ok := keuo.mutation.NamespaceId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNamespaceId,
		})
	}
	if value, ok := keuo.mutation.AddedNamespaceId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNamespaceId,
		})
	}
	if value, ok := keuo.mutation.NodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNodeId,
		})
	}
	if value, ok := keuo.mutation.AddedNodeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldNodeId,
		})
	}
	if value, ok := keuo.mutation.ContainerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldContainerId,
		})
	}
	if value, ok := keuo.mutation.AddedContainerId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldContainerId,
		})
	}
	if value, ok := keuo.mutation.PodId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldPodId,
		})
	}
	if value, ok := keuo.mutation.AddedPodId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sevent.FieldPodId,
		})
	}
	_node = &K8sEvent{config: keuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, keuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8sevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
