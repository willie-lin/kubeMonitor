// Code generated by entc, DO NOT EDIT.

package agent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Online applies equality check predicate on the "online" field. It's identical to OnlineEQ.
func Online(v bool) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnline), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// Ipv4 applies equality check predicate on the "ipv4" field. It's identical to Ipv4EQ.
func Ipv4(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIpv4), v))
	})
}

// Ipv6 applies equality check predicate on the "ipv6" field. It's identical to Ipv6EQ.
func Ipv6(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIpv6), v))
	})
}

// PublicIpv4 applies equality check predicate on the "public_ipv4" field. It's identical to PublicIpv4EQ.
func PublicIpv4(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv6 applies equality check predicate on the "public_ipv6" field. It's identical to PublicIpv6EQ.
func PublicIpv6(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicIpv6), v))
	})
}

// LastContact applies equality check predicate on the "last_contact" field. It's identical to LastContactEQ.
func LastContact(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastContact), v))
	})
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisabled), v))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// MachineId applies equality check predicate on the "machineId" field. It's identical to MachineIdEQ.
func MachineId(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMachineId), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// ClusterId applies equality check predicate on the "clusterId" field. It's identical to ClusterIdEQ.
func ClusterId(v uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClusterId), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// OnlineEQ applies the EQ predicate on the "online" field.
func OnlineEQ(v bool) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnline), v))
	})
}

// OnlineNEQ applies the NEQ predicate on the "online" field.
func OnlineNEQ(v bool) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnline), v))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVersion), v))
	})
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVersion), v))
	})
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVersion), v))
	})
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVersion), v))
	})
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVersion), v))
	})
}

// Ipv4EQ applies the EQ predicate on the "ipv4" field.
func Ipv4EQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIpv4), v))
	})
}

// Ipv4NEQ applies the NEQ predicate on the "ipv4" field.
func Ipv4NEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIpv4), v))
	})
}

// Ipv4In applies the In predicate on the "ipv4" field.
func Ipv4In(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIpv4), v...))
	})
}

// Ipv4NotIn applies the NotIn predicate on the "ipv4" field.
func Ipv4NotIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIpv4), v...))
	})
}

// Ipv4GT applies the GT predicate on the "ipv4" field.
func Ipv4GT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIpv4), v))
	})
}

// Ipv4GTE applies the GTE predicate on the "ipv4" field.
func Ipv4GTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIpv4), v))
	})
}

// Ipv4LT applies the LT predicate on the "ipv4" field.
func Ipv4LT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIpv4), v))
	})
}

// Ipv4LTE applies the LTE predicate on the "ipv4" field.
func Ipv4LTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIpv4), v))
	})
}

// Ipv4Contains applies the Contains predicate on the "ipv4" field.
func Ipv4Contains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIpv4), v))
	})
}

// Ipv4HasPrefix applies the HasPrefix predicate on the "ipv4" field.
func Ipv4HasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIpv4), v))
	})
}

// Ipv4HasSuffix applies the HasSuffix predicate on the "ipv4" field.
func Ipv4HasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIpv4), v))
	})
}

// Ipv4EqualFold applies the EqualFold predicate on the "ipv4" field.
func Ipv4EqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIpv4), v))
	})
}

// Ipv4ContainsFold applies the ContainsFold predicate on the "ipv4" field.
func Ipv4ContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIpv4), v))
	})
}

// Ipv6EQ applies the EQ predicate on the "ipv6" field.
func Ipv6EQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIpv6), v))
	})
}

// Ipv6NEQ applies the NEQ predicate on the "ipv6" field.
func Ipv6NEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIpv6), v))
	})
}

// Ipv6In applies the In predicate on the "ipv6" field.
func Ipv6In(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIpv6), v...))
	})
}

// Ipv6NotIn applies the NotIn predicate on the "ipv6" field.
func Ipv6NotIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIpv6), v...))
	})
}

// Ipv6GT applies the GT predicate on the "ipv6" field.
func Ipv6GT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIpv6), v))
	})
}

// Ipv6GTE applies the GTE predicate on the "ipv6" field.
func Ipv6GTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIpv6), v))
	})
}

// Ipv6LT applies the LT predicate on the "ipv6" field.
func Ipv6LT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIpv6), v))
	})
}

// Ipv6LTE applies the LTE predicate on the "ipv6" field.
func Ipv6LTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIpv6), v))
	})
}

// Ipv6Contains applies the Contains predicate on the "ipv6" field.
func Ipv6Contains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIpv6), v))
	})
}

// Ipv6HasPrefix applies the HasPrefix predicate on the "ipv6" field.
func Ipv6HasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIpv6), v))
	})
}

// Ipv6HasSuffix applies the HasSuffix predicate on the "ipv6" field.
func Ipv6HasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIpv6), v))
	})
}

// Ipv6EqualFold applies the EqualFold predicate on the "ipv6" field.
func Ipv6EqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIpv6), v))
	})
}

// Ipv6ContainsFold applies the ContainsFold predicate on the "ipv6" field.
func Ipv6ContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIpv6), v))
	})
}

// PublicIpv4EQ applies the EQ predicate on the "public_ipv4" field.
func PublicIpv4EQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv4NEQ applies the NEQ predicate on the "public_ipv4" field.
func PublicIpv4NEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv4In applies the In predicate on the "public_ipv4" field.
func PublicIpv4In(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublicIpv4), v...))
	})
}

// PublicIpv4NotIn applies the NotIn predicate on the "public_ipv4" field.
func PublicIpv4NotIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublicIpv4), v...))
	})
}

// PublicIpv4GT applies the GT predicate on the "public_ipv4" field.
func PublicIpv4GT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv4GTE applies the GTE predicate on the "public_ipv4" field.
func PublicIpv4GTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv4LT applies the LT predicate on the "public_ipv4" field.
func PublicIpv4LT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv4LTE applies the LTE predicate on the "public_ipv4" field.
func PublicIpv4LTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv4Contains applies the Contains predicate on the "public_ipv4" field.
func PublicIpv4Contains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv4HasPrefix applies the HasPrefix predicate on the "public_ipv4" field.
func PublicIpv4HasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv4HasSuffix applies the HasSuffix predicate on the "public_ipv4" field.
func PublicIpv4HasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv4EqualFold applies the EqualFold predicate on the "public_ipv4" field.
func PublicIpv4EqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv4ContainsFold applies the ContainsFold predicate on the "public_ipv4" field.
func PublicIpv4ContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPublicIpv4), v))
	})
}

// PublicIpv6EQ applies the EQ predicate on the "public_ipv6" field.
func PublicIpv6EQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicIpv6), v))
	})
}

// PublicIpv6NEQ applies the NEQ predicate on the "public_ipv6" field.
func PublicIpv6NEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublicIpv6), v))
	})
}

// PublicIpv6In applies the In predicate on the "public_ipv6" field.
func PublicIpv6In(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublicIpv6), v...))
	})
}

// PublicIpv6NotIn applies the NotIn predicate on the "public_ipv6" field.
func PublicIpv6NotIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublicIpv6), v...))
	})
}

// PublicIpv6GT applies the GT predicate on the "public_ipv6" field.
func PublicIpv6GT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublicIpv6), v))
	})
}

// PublicIpv6GTE applies the GTE predicate on the "public_ipv6" field.
func PublicIpv6GTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublicIpv6), v))
	})
}

// PublicIpv6LT applies the LT predicate on the "public_ipv6" field.
func PublicIpv6LT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublicIpv6), v))
	})
}

// PublicIpv6LTE applies the LTE predicate on the "public_ipv6" field.
func PublicIpv6LTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublicIpv6), v))
	})
}

// PublicIpv6Contains applies the Contains predicate on the "public_ipv6" field.
func PublicIpv6Contains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPublicIpv6), v))
	})
}

// PublicIpv6HasPrefix applies the HasPrefix predicate on the "public_ipv6" field.
func PublicIpv6HasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPublicIpv6), v))
	})
}

// PublicIpv6HasSuffix applies the HasSuffix predicate on the "public_ipv6" field.
func PublicIpv6HasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPublicIpv6), v))
	})
}

// PublicIpv6EqualFold applies the EqualFold predicate on the "public_ipv6" field.
func PublicIpv6EqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPublicIpv6), v))
	})
}

// PublicIpv6ContainsFold applies the ContainsFold predicate on the "public_ipv6" field.
func PublicIpv6ContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPublicIpv6), v))
	})
}

// LastContactEQ applies the EQ predicate on the "last_contact" field.
func LastContactEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastContact), v))
	})
}

// LastContactNEQ applies the NEQ predicate on the "last_contact" field.
func LastContactNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastContact), v))
	})
}

// LastContactIn applies the In predicate on the "last_contact" field.
func LastContactIn(vs ...time.Time) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastContact), v...))
	})
}

// LastContactNotIn applies the NotIn predicate on the "last_contact" field.
func LastContactNotIn(vs ...time.Time) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastContact), v...))
	})
}

// LastContactGT applies the GT predicate on the "last_contact" field.
func LastContactGT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastContact), v))
	})
}

// LastContactGTE applies the GTE predicate on the "last_contact" field.
func LastContactGTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastContact), v))
	})
}

// LastContactLT applies the LT predicate on the "last_contact" field.
func LastContactLT(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastContact), v))
	})
}

// LastContactLTE applies the LTE predicate on the "last_contact" field.
func LastContactLTE(v time.Time) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastContact), v))
	})
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisabled), v))
	})
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisabled), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUUID), v))
	})
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUUID), v))
	})
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUUID), v))
	})
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUUID), v))
	})
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUUID), v))
	})
}

// MachineIdEQ applies the EQ predicate on the "machineId" field.
func MachineIdEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMachineId), v))
	})
}

// MachineIdNEQ applies the NEQ predicate on the "machineId" field.
func MachineIdNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMachineId), v))
	})
}

// MachineIdIn applies the In predicate on the "machineId" field.
func MachineIdIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMachineId), v...))
	})
}

// MachineIdNotIn applies the NotIn predicate on the "machineId" field.
func MachineIdNotIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMachineId), v...))
	})
}

// MachineIdGT applies the GT predicate on the "machineId" field.
func MachineIdGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMachineId), v))
	})
}

// MachineIdGTE applies the GTE predicate on the "machineId" field.
func MachineIdGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMachineId), v))
	})
}

// MachineIdLT applies the LT predicate on the "machineId" field.
func MachineIdLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMachineId), v))
	})
}

// MachineIdLTE applies the LTE predicate on the "machineId" field.
func MachineIdLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMachineId), v))
	})
}

// MachineIdContains applies the Contains predicate on the "machineId" field.
func MachineIdContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMachineId), v))
	})
}

// MachineIdHasPrefix applies the HasPrefix predicate on the "machineId" field.
func MachineIdHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMachineId), v))
	})
}

// MachineIdHasSuffix applies the HasSuffix predicate on the "machineId" field.
func MachineIdHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMachineId), v))
	})
}

// MachineIdEqualFold applies the EqualFold predicate on the "machineId" field.
func MachineIdEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMachineId), v))
	})
}

// MachineIdContainsFold applies the ContainsFold predicate on the "machineId" field.
func MachineIdContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMachineId), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// ClusterIdEQ applies the EQ predicate on the "clusterId" field.
func ClusterIdEQ(v uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClusterId), v))
	})
}

// ClusterIdNEQ applies the NEQ predicate on the "clusterId" field.
func ClusterIdNEQ(v uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClusterId), v))
	})
}

// ClusterIdIn applies the In predicate on the "clusterId" field.
func ClusterIdIn(vs ...uint) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClusterId), v...))
	})
}

// ClusterIdNotIn applies the NotIn predicate on the "clusterId" field.
func ClusterIdNotIn(vs ...uint) predicate.Agent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Agent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClusterId), v...))
	})
}

// ClusterIdGT applies the GT predicate on the "clusterId" field.
func ClusterIdGT(v uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClusterId), v))
	})
}

// ClusterIdGTE applies the GTE predicate on the "clusterId" field.
func ClusterIdGTE(v uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClusterId), v))
	})
}

// ClusterIdLT applies the LT predicate on the "clusterId" field.
func ClusterIdLT(v uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClusterId), v))
	})
}

// ClusterIdLTE applies the LTE predicate on the "clusterId" field.
func ClusterIdLTE(v uint) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClusterId), v))
	})
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NodeTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NodeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Cluster) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Agent) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		p(s.Not())
	})
}
