// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metricname"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metrictype"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// MetricTypeUpdate is the builder for updating MetricType entities.
type MetricTypeUpdate struct {
	config
	hooks    []Hook
	mutation *MetricTypeMutation
}

// Where appends a list predicates to the MetricTypeUpdate builder.
func (mtu *MetricTypeUpdate) Where(ps ...predicate.MetricType) *MetricTypeUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetUpdatedAt sets the "updated_at" field.
func (mtu *MetricTypeUpdate) SetUpdatedAt(t time.Time) *MetricTypeUpdate {
	mtu.mutation.SetUpdatedAt(t)
	return mtu
}

// SetDeletedAt sets the "deleted_at" field.
func (mtu *MetricTypeUpdate) SetDeletedAt(t time.Time) *MetricTypeUpdate {
	mtu.mutation.SetDeletedAt(t)
	return mtu
}

// SetName sets the "name" field.
func (mtu *MetricTypeUpdate) SetName(s string) *MetricTypeUpdate {
	mtu.mutation.SetName(s)
	return mtu
}

// AddMetricNameIDs adds the "metricNames" edge to the MetricName entity by IDs.
func (mtu *MetricTypeUpdate) AddMetricNameIDs(ids ...uint) *MetricTypeUpdate {
	mtu.mutation.AddMetricNameIDs(ids...)
	return mtu
}

// AddMetricNames adds the "metricNames" edges to the MetricName entity.
func (mtu *MetricTypeUpdate) AddMetricNames(m ...*MetricName) *MetricTypeUpdate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.AddMetricNameIDs(ids...)
}

// Mutation returns the MetricTypeMutation object of the builder.
func (mtu *MetricTypeUpdate) Mutation() *MetricTypeMutation {
	return mtu.mutation
}

// ClearMetricNames clears all "metricNames" edges to the MetricName entity.
func (mtu *MetricTypeUpdate) ClearMetricNames() *MetricTypeUpdate {
	mtu.mutation.ClearMetricNames()
	return mtu
}

// RemoveMetricNameIDs removes the "metricNames" edge to MetricName entities by IDs.
func (mtu *MetricTypeUpdate) RemoveMetricNameIDs(ids ...uint) *MetricTypeUpdate {
	mtu.mutation.RemoveMetricNameIDs(ids...)
	return mtu
}

// RemoveMetricNames removes "metricNames" edges to MetricName entities.
func (mtu *MetricTypeUpdate) RemoveMetricNames(m ...*MetricName) *MetricTypeUpdate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.RemoveMetricNameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MetricTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mtu.defaults()
	if len(mtu.hooks) == 0 {
		affected, err = mtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetricTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtu.mutation = mutation
			affected, err = mtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mtu.hooks) - 1; i >= 0; i-- {
			if mtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MetricTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MetricTypeUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MetricTypeUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtu *MetricTypeUpdate) defaults() {
	if _, ok := mtu.mutation.UpdatedAt(); !ok {
		v := metrictype.UpdateDefaultUpdatedAt()
		mtu.mutation.SetUpdatedAt(v)
	}
	if _, ok := mtu.mutation.DeletedAt(); !ok {
		v := metrictype.UpdateDefaultDeletedAt()
		mtu.mutation.SetDeletedAt(v)
	}
}

func (mtu *MetricTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metrictype.Table,
			Columns: metrictype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: metrictype.FieldID,
			},
		},
	}
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metrictype.FieldUpdatedAt,
		})
	}
	if value, ok := mtu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metrictype.FieldDeletedAt,
		})
	}
	if value, ok := mtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metrictype.FieldName,
		})
	}
	if mtu.mutation.MetricNamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrictype.MetricNamesTable,
			Columns: []string{metrictype.MetricNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: metricname.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.RemovedMetricNamesIDs(); len(nodes) > 0 && !mtu.mutation.MetricNamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrictype.MetricNamesTable,
			Columns: []string{metrictype.MetricNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: metricname.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.MetricNamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrictype.MetricNamesTable,
			Columns: []string{metrictype.MetricNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: metricname.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metrictype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MetricTypeUpdateOne is the builder for updating a single MetricType entity.
type MetricTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetricTypeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mtuo *MetricTypeUpdateOne) SetUpdatedAt(t time.Time) *MetricTypeUpdateOne {
	mtuo.mutation.SetUpdatedAt(t)
	return mtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (mtuo *MetricTypeUpdateOne) SetDeletedAt(t time.Time) *MetricTypeUpdateOne {
	mtuo.mutation.SetDeletedAt(t)
	return mtuo
}

// SetName sets the "name" field.
func (mtuo *MetricTypeUpdateOne) SetName(s string) *MetricTypeUpdateOne {
	mtuo.mutation.SetName(s)
	return mtuo
}

// AddMetricNameIDs adds the "metricNames" edge to the MetricName entity by IDs.
func (mtuo *MetricTypeUpdateOne) AddMetricNameIDs(ids ...uint) *MetricTypeUpdateOne {
	mtuo.mutation.AddMetricNameIDs(ids...)
	return mtuo
}

// AddMetricNames adds the "metricNames" edges to the MetricName entity.
func (mtuo *MetricTypeUpdateOne) AddMetricNames(m ...*MetricName) *MetricTypeUpdateOne {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.AddMetricNameIDs(ids...)
}

// Mutation returns the MetricTypeMutation object of the builder.
func (mtuo *MetricTypeUpdateOne) Mutation() *MetricTypeMutation {
	return mtuo.mutation
}

// ClearMetricNames clears all "metricNames" edges to the MetricName entity.
func (mtuo *MetricTypeUpdateOne) ClearMetricNames() *MetricTypeUpdateOne {
	mtuo.mutation.ClearMetricNames()
	return mtuo
}

// RemoveMetricNameIDs removes the "metricNames" edge to MetricName entities by IDs.
func (mtuo *MetricTypeUpdateOne) RemoveMetricNameIDs(ids ...uint) *MetricTypeUpdateOne {
	mtuo.mutation.RemoveMetricNameIDs(ids...)
	return mtuo
}

// RemoveMetricNames removes "metricNames" edges to MetricName entities.
func (mtuo *MetricTypeUpdateOne) RemoveMetricNames(m ...*MetricName) *MetricTypeUpdateOne {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.RemoveMetricNameIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MetricTypeUpdateOne) Select(field string, fields ...string) *MetricTypeUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MetricType entity.
func (mtuo *MetricTypeUpdateOne) Save(ctx context.Context) (*MetricType, error) {
	var (
		err  error
		node *MetricType
	)
	mtuo.defaults()
	if len(mtuo.hooks) == 0 {
		node, err = mtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetricTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtuo.mutation = mutation
			node, err = mtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtuo.hooks) - 1; i >= 0; i-- {
			if mtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MetricTypeUpdateOne) SaveX(ctx context.Context) *MetricType {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MetricTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MetricTypeUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtuo *MetricTypeUpdateOne) defaults() {
	if _, ok := mtuo.mutation.UpdatedAt(); !ok {
		v := metrictype.UpdateDefaultUpdatedAt()
		mtuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := mtuo.mutation.DeletedAt(); !ok {
		v := metrictype.UpdateDefaultDeletedAt()
		mtuo.mutation.SetDeletedAt(v)
	}
}

func (mtuo *MetricTypeUpdateOne) sqlSave(ctx context.Context) (_node *MetricType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metrictype.Table,
			Columns: metrictype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: metrictype.FieldID,
			},
		},
	}
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MetricType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metrictype.FieldID)
		for _, f := range fields {
			if !metrictype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metrictype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metrictype.FieldUpdatedAt,
		})
	}
	if value, ok := mtuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metrictype.FieldDeletedAt,
		})
	}
	if value, ok := mtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metrictype.FieldName,
		})
	}
	if mtuo.mutation.MetricNamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrictype.MetricNamesTable,
			Columns: []string{metrictype.MetricNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: metricname.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.RemovedMetricNamesIDs(); len(nodes) > 0 && !mtuo.mutation.MetricNamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrictype.MetricNamesTable,
			Columns: []string{metrictype.MetricNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: metricname.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.MetricNamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrictype.MetricNamesTable,
			Columns: []string{metrictype.MetricNamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: metricname.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MetricType{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metrictype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
