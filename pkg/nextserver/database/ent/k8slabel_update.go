// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8slabel"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// K8sLabelUpdate is the builder for updating K8sLabel entities.
type K8sLabelUpdate struct {
	config
	hooks    []Hook
	mutation *K8sLabelMutation
}

// Where appends a list predicates to the K8sLabelUpdate builder.
func (klu *K8sLabelUpdate) Where(ps ...predicate.K8sLabel) *K8sLabelUpdate {
	klu.mutation.Where(ps...)
	return klu
}

// SetUpdatedAt sets the "updated_at" field.
func (klu *K8sLabelUpdate) SetUpdatedAt(t time.Time) *K8sLabelUpdate {
	klu.mutation.SetUpdatedAt(t)
	return klu
}

// SetDeletedAt sets the "deleted_at" field.
func (klu *K8sLabelUpdate) SetDeletedAt(t time.Time) *K8sLabelUpdate {
	klu.mutation.SetDeletedAt(t)
	return klu
}

// SetLabel sets the "label" field.
func (klu *K8sLabelUpdate) SetLabel(s string) *K8sLabelUpdate {
	klu.mutation.SetLabel(s)
	return klu
}

// SetK8sObjectId sets the "k8sObjectId" field.
func (klu *K8sLabelUpdate) SetK8sObjectId(u uint) *K8sLabelUpdate {
	klu.mutation.ResetK8sObjectId()
	klu.mutation.SetK8sObjectId(u)
	return klu
}

// AddK8sObjectId adds u to the "k8sObjectId" field.
func (klu *K8sLabelUpdate) AddK8sObjectId(u uint) *K8sLabelUpdate {
	klu.mutation.AddK8sObjectId(u)
	return klu
}

// Mutation returns the K8sLabelMutation object of the builder.
func (klu *K8sLabelUpdate) Mutation() *K8sLabelMutation {
	return klu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (klu *K8sLabelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	klu.defaults()
	if len(klu.hooks) == 0 {
		if err = klu.check(); err != nil {
			return 0, err
		}
		affected, err = klu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sLabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = klu.check(); err != nil {
				return 0, err
			}
			klu.mutation = mutation
			affected, err = klu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(klu.hooks) - 1; i >= 0; i-- {
			if klu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = klu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, klu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (klu *K8sLabelUpdate) SaveX(ctx context.Context) int {
	affected, err := klu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (klu *K8sLabelUpdate) Exec(ctx context.Context) error {
	_, err := klu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (klu *K8sLabelUpdate) ExecX(ctx context.Context) {
	if err := klu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (klu *K8sLabelUpdate) defaults() {
	if _, ok := klu.mutation.UpdatedAt(); !ok {
		v := k8slabel.UpdateDefaultUpdatedAt()
		klu.mutation.SetUpdatedAt(v)
	}
	if _, ok := klu.mutation.DeletedAt(); !ok {
		v := k8slabel.UpdateDefaultDeletedAt()
		klu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (klu *K8sLabelUpdate) check() error {
	if v, ok := klu.mutation.Label(); ok {
		if err := k8slabel.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf("ent: validator failed for field \"label\": %w", err)}
		}
	}
	return nil
}

func (klu *K8sLabelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8slabel.Table,
			Columns: k8slabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8slabel.FieldID,
			},
		},
	}
	if ps := klu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := klu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8slabel.FieldUpdatedAt,
		})
	}
	if value, ok := klu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8slabel.FieldDeletedAt,
		})
	}
	if value, ok := klu.mutation.Label(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8slabel.FieldLabel,
		})
	}
	if value, ok := klu.mutation.K8sObjectId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8slabel.FieldK8sObjectId,
		})
	}
	if value, ok := klu.mutation.AddedK8sObjectId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8slabel.FieldK8sObjectId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, klu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8slabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// K8sLabelUpdateOne is the builder for updating a single K8sLabel entity.
type K8sLabelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *K8sLabelMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (kluo *K8sLabelUpdateOne) SetUpdatedAt(t time.Time) *K8sLabelUpdateOne {
	kluo.mutation.SetUpdatedAt(t)
	return kluo
}

// SetDeletedAt sets the "deleted_at" field.
func (kluo *K8sLabelUpdateOne) SetDeletedAt(t time.Time) *K8sLabelUpdateOne {
	kluo.mutation.SetDeletedAt(t)
	return kluo
}

// SetLabel sets the "label" field.
func (kluo *K8sLabelUpdateOne) SetLabel(s string) *K8sLabelUpdateOne {
	kluo.mutation.SetLabel(s)
	return kluo
}

// SetK8sObjectId sets the "k8sObjectId" field.
func (kluo *K8sLabelUpdateOne) SetK8sObjectId(u uint) *K8sLabelUpdateOne {
	kluo.mutation.ResetK8sObjectId()
	kluo.mutation.SetK8sObjectId(u)
	return kluo
}

// AddK8sObjectId adds u to the "k8sObjectId" field.
func (kluo *K8sLabelUpdateOne) AddK8sObjectId(u uint) *K8sLabelUpdateOne {
	kluo.mutation.AddK8sObjectId(u)
	return kluo
}

// Mutation returns the K8sLabelMutation object of the builder.
func (kluo *K8sLabelUpdateOne) Mutation() *K8sLabelMutation {
	return kluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kluo *K8sLabelUpdateOne) Select(field string, fields ...string) *K8sLabelUpdateOne {
	kluo.fields = append([]string{field}, fields...)
	return kluo
}

// Save executes the query and returns the updated K8sLabel entity.
func (kluo *K8sLabelUpdateOne) Save(ctx context.Context) (*K8sLabel, error) {
	var (
		err  error
		node *K8sLabel
	)
	kluo.defaults()
	if len(kluo.hooks) == 0 {
		if err = kluo.check(); err != nil {
			return nil, err
		}
		node, err = kluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sLabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kluo.check(); err != nil {
				return nil, err
			}
			kluo.mutation = mutation
			node, err = kluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kluo.hooks) - 1; i >= 0; i-- {
			if kluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kluo *K8sLabelUpdateOne) SaveX(ctx context.Context) *K8sLabel {
	node, err := kluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kluo *K8sLabelUpdateOne) Exec(ctx context.Context) error {
	_, err := kluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kluo *K8sLabelUpdateOne) ExecX(ctx context.Context) {
	if err := kluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kluo *K8sLabelUpdateOne) defaults() {
	if _, ok := kluo.mutation.UpdatedAt(); !ok {
		v := k8slabel.UpdateDefaultUpdatedAt()
		kluo.mutation.SetUpdatedAt(v)
	}
	if _, ok := kluo.mutation.DeletedAt(); !ok {
		v := k8slabel.UpdateDefaultDeletedAt()
		kluo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kluo *K8sLabelUpdateOne) check() error {
	if v, ok := kluo.mutation.Label(); ok {
		if err := k8slabel.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf("ent: validator failed for field \"label\": %w", err)}
		}
	}
	return nil
}

func (kluo *K8sLabelUpdateOne) sqlSave(ctx context.Context) (_node *K8sLabel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8slabel.Table,
			Columns: k8slabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8slabel.FieldID,
			},
		},
	}
	id, ok := kluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing K8sLabel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, k8slabel.FieldID)
		for _, f := range fields {
			if !k8slabel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != k8slabel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8slabel.FieldUpdatedAt,
		})
	}
	if value, ok := kluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8slabel.FieldDeletedAt,
		})
	}
	if value, ok := kluo.mutation.Label(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8slabel.FieldLabel,
		})
	}
	if value, ok := kluo.mutation.K8sObjectId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8slabel.FieldK8sObjectId,
		})
	}
	if value, ok := kluo.mutation.AddedK8sObjectId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8slabel.FieldK8sObjectId,
		})
	}
	_node = &K8sLabel{config: kluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8slabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
