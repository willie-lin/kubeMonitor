// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/migrate"

	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/agent"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/cluster"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/container"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/event"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/incidentbasicrule"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8scluster"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sconnector"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8scontainer"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sdaemonset"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sdeployment"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sevent"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8slabel"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8smetric"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8snamespace"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8snode"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sobject"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sobjecttag"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8spod"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sreplicaset"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sstatefulset"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metric"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metricendpoint"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metriclabel"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metricname"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metrictype"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/node"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/proces"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/setting"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Agent is the client for interacting with the Agent builders.
	Agent *AgentClient
	// Cluster is the client for interacting with the Cluster builders.
	Cluster *ClusterClient
	// Container is the client for interacting with the Container builders.
	Container *ContainerClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// IncidentBasicRule is the client for interacting with the IncidentBasicRule builders.
	IncidentBasicRule *IncidentBasicRuleClient
	// K8sCluster is the client for interacting with the K8sCluster builders.
	K8sCluster *K8sClusterClient
	// K8sConnector is the client for interacting with the K8sConnector builders.
	K8sConnector *K8sConnectorClient
	// K8sContainer is the client for interacting with the K8sContainer builders.
	K8sContainer *K8sContainerClient
	// K8sDaemonSet is the client for interacting with the K8sDaemonSet builders.
	K8sDaemonSet *K8sDaemonSetClient
	// K8sDeployment is the client for interacting with the K8sDeployment builders.
	K8sDeployment *K8sDeploymentClient
	// K8sEvent is the client for interacting with the K8sEvent builders.
	K8sEvent *K8sEventClient
	// K8sLabel is the client for interacting with the K8sLabel builders.
	K8sLabel *K8sLabelClient
	// K8sMetric is the client for interacting with the K8sMetric builders.
	K8sMetric *K8sMetricClient
	// K8sNamespace is the client for interacting with the K8sNamespace builders.
	K8sNamespace *K8sNamespaceClient
	// K8sNode is the client for interacting with the K8sNode builders.
	K8sNode *K8sNodeClient
	// K8sObject is the client for interacting with the K8sObject builders.
	K8sObject *K8sObjectClient
	// K8sObjectTag is the client for interacting with the K8sObjectTag builders.
	K8sObjectTag *K8sObjectTagClient
	// K8sPod is the client for interacting with the K8sPod builders.
	K8sPod *K8sPodClient
	// K8sReplicaSet is the client for interacting with the K8sReplicaSet builders.
	K8sReplicaSet *K8sReplicaSetClient
	// K8sStatefulSet is the client for interacting with the K8sStatefulSet builders.
	K8sStatefulSet *K8sStatefulSetClient
	// Metric is the client for interacting with the Metric builders.
	Metric *MetricClient
	// MetricEndpoint is the client for interacting with the MetricEndpoint builders.
	MetricEndpoint *MetricEndpointClient
	// MetricLabel is the client for interacting with the MetricLabel builders.
	MetricLabel *MetricLabelClient
	// MetricName is the client for interacting with the MetricName builders.
	MetricName *MetricNameClient
	// MetricType is the client for interacting with the MetricType builders.
	MetricType *MetricTypeClient
	// Node is the client for interacting with the Node builders.
	Node *NodeClient
	// Proces is the client for interacting with the Proces builders.
	Proces *ProcesClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Agent = NewAgentClient(c.config)
	c.Cluster = NewClusterClient(c.config)
	c.Container = NewContainerClient(c.config)
	c.Event = NewEventClient(c.config)
	c.IncidentBasicRule = NewIncidentBasicRuleClient(c.config)
	c.K8sCluster = NewK8sClusterClient(c.config)
	c.K8sConnector = NewK8sConnectorClient(c.config)
	c.K8sContainer = NewK8sContainerClient(c.config)
	c.K8sDaemonSet = NewK8sDaemonSetClient(c.config)
	c.K8sDeployment = NewK8sDeploymentClient(c.config)
	c.K8sEvent = NewK8sEventClient(c.config)
	c.K8sLabel = NewK8sLabelClient(c.config)
	c.K8sMetric = NewK8sMetricClient(c.config)
	c.K8sNamespace = NewK8sNamespaceClient(c.config)
	c.K8sNode = NewK8sNodeClient(c.config)
	c.K8sObject = NewK8sObjectClient(c.config)
	c.K8sObjectTag = NewK8sObjectTagClient(c.config)
	c.K8sPod = NewK8sPodClient(c.config)
	c.K8sReplicaSet = NewK8sReplicaSetClient(c.config)
	c.K8sStatefulSet = NewK8sStatefulSetClient(c.config)
	c.Metric = NewMetricClient(c.config)
	c.MetricEndpoint = NewMetricEndpointClient(c.config)
	c.MetricLabel = NewMetricLabelClient(c.config)
	c.MetricName = NewMetricNameClient(c.config)
	c.MetricType = NewMetricTypeClient(c.config)
	c.Node = NewNodeClient(c.config)
	c.Proces = NewProcesClient(c.config)
	c.Setting = NewSettingClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Agent:             NewAgentClient(cfg),
		Cluster:           NewClusterClient(cfg),
		Container:         NewContainerClient(cfg),
		Event:             NewEventClient(cfg),
		IncidentBasicRule: NewIncidentBasicRuleClient(cfg),
		K8sCluster:        NewK8sClusterClient(cfg),
		K8sConnector:      NewK8sConnectorClient(cfg),
		K8sContainer:      NewK8sContainerClient(cfg),
		K8sDaemonSet:      NewK8sDaemonSetClient(cfg),
		K8sDeployment:     NewK8sDeploymentClient(cfg),
		K8sEvent:          NewK8sEventClient(cfg),
		K8sLabel:          NewK8sLabelClient(cfg),
		K8sMetric:         NewK8sMetricClient(cfg),
		K8sNamespace:      NewK8sNamespaceClient(cfg),
		K8sNode:           NewK8sNodeClient(cfg),
		K8sObject:         NewK8sObjectClient(cfg),
		K8sObjectTag:      NewK8sObjectTagClient(cfg),
		K8sPod:            NewK8sPodClient(cfg),
		K8sReplicaSet:     NewK8sReplicaSetClient(cfg),
		K8sStatefulSet:    NewK8sStatefulSetClient(cfg),
		Metric:            NewMetricClient(cfg),
		MetricEndpoint:    NewMetricEndpointClient(cfg),
		MetricLabel:       NewMetricLabelClient(cfg),
		MetricName:        NewMetricNameClient(cfg),
		MetricType:        NewMetricTypeClient(cfg),
		Node:              NewNodeClient(cfg),
		Proces:            NewProcesClient(cfg),
		Setting:           NewSettingClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:            cfg,
		Agent:             NewAgentClient(cfg),
		Cluster:           NewClusterClient(cfg),
		Container:         NewContainerClient(cfg),
		Event:             NewEventClient(cfg),
		IncidentBasicRule: NewIncidentBasicRuleClient(cfg),
		K8sCluster:        NewK8sClusterClient(cfg),
		K8sConnector:      NewK8sConnectorClient(cfg),
		K8sContainer:      NewK8sContainerClient(cfg),
		K8sDaemonSet:      NewK8sDaemonSetClient(cfg),
		K8sDeployment:     NewK8sDeploymentClient(cfg),
		K8sEvent:          NewK8sEventClient(cfg),
		K8sLabel:          NewK8sLabelClient(cfg),
		K8sMetric:         NewK8sMetricClient(cfg),
		K8sNamespace:      NewK8sNamespaceClient(cfg),
		K8sNode:           NewK8sNodeClient(cfg),
		K8sObject:         NewK8sObjectClient(cfg),
		K8sObjectTag:      NewK8sObjectTagClient(cfg),
		K8sPod:            NewK8sPodClient(cfg),
		K8sReplicaSet:     NewK8sReplicaSetClient(cfg),
		K8sStatefulSet:    NewK8sStatefulSetClient(cfg),
		Metric:            NewMetricClient(cfg),
		MetricEndpoint:    NewMetricEndpointClient(cfg),
		MetricLabel:       NewMetricLabelClient(cfg),
		MetricName:        NewMetricNameClient(cfg),
		MetricType:        NewMetricTypeClient(cfg),
		Node:              NewNodeClient(cfg),
		Proces:            NewProcesClient(cfg),
		Setting:           NewSettingClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Agent.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Agent.Use(hooks...)
	c.Cluster.Use(hooks...)
	c.Container.Use(hooks...)
	c.Event.Use(hooks...)
	c.IncidentBasicRule.Use(hooks...)
	c.K8sCluster.Use(hooks...)
	c.K8sConnector.Use(hooks...)
	c.K8sContainer.Use(hooks...)
	c.K8sDaemonSet.Use(hooks...)
	c.K8sDeployment.Use(hooks...)
	c.K8sEvent.Use(hooks...)
	c.K8sLabel.Use(hooks...)
	c.K8sMetric.Use(hooks...)
	c.K8sNamespace.Use(hooks...)
	c.K8sNode.Use(hooks...)
	c.K8sObject.Use(hooks...)
	c.K8sObjectTag.Use(hooks...)
	c.K8sPod.Use(hooks...)
	c.K8sReplicaSet.Use(hooks...)
	c.K8sStatefulSet.Use(hooks...)
	c.Metric.Use(hooks...)
	c.MetricEndpoint.Use(hooks...)
	c.MetricLabel.Use(hooks...)
	c.MetricName.Use(hooks...)
	c.MetricType.Use(hooks...)
	c.Node.Use(hooks...)
	c.Proces.Use(hooks...)
	c.Setting.Use(hooks...)
}

// AgentClient is a client for the Agent schema.
type AgentClient struct {
	config
}

// NewAgentClient returns a client for the Agent from the given config.
func NewAgentClient(c config) *AgentClient {
	return &AgentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agent.Hooks(f(g(h())))`.
func (c *AgentClient) Use(hooks ...Hook) {
	c.hooks.Agent = append(c.hooks.Agent, hooks...)
}

// Create returns a create builder for Agent.
func (c *AgentClient) Create() *AgentCreate {
	mutation := newAgentMutation(c.config, OpCreate)
	return &AgentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Agent entities.
func (c *AgentClient) CreateBulk(builders ...*AgentCreate) *AgentCreateBulk {
	return &AgentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Agent.
func (c *AgentClient) Update() *AgentUpdate {
	mutation := newAgentMutation(c.config, OpUpdate)
	return &AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentClient) UpdateOne(a *Agent) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgent(a))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentClient) UpdateOneID(id uint) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgentID(id))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Agent.
func (c *AgentClient) Delete() *AgentDelete {
	mutation := newAgentMutation(c.config, OpDelete)
	return &AgentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AgentClient) DeleteOne(a *Agent) *AgentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AgentClient) DeleteOneID(id uint) *AgentDeleteOne {
	builder := c.Delete().Where(agent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentDeleteOne{builder}
}

// Query returns a query builder for Agent.
func (c *AgentClient) Query() *AgentQuery {
	return &AgentQuery{
		config: c.config,
	}
}

// Get returns a Agent entity by its id.
func (c *AgentClient) Get(ctx context.Context, id uint) (*Agent, error) {
	return c.Query().Where(agent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentClient) GetX(ctx context.Context, id uint) *Agent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNodes queries the nodes edge of a Agent.
func (c *AgentClient) QueryNodes(a *Agent) *NodeQuery {
	query := &NodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, id),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agent.NodesTable, agent.NodesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AgentClient) Hooks() []Hook {
	return c.hooks.Agent
}

// ClusterClient is a client for the Cluster schema.
type ClusterClient struct {
	config
}

// NewClusterClient returns a client for the Cluster from the given config.
func NewClusterClient(c config) *ClusterClient {
	return &ClusterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cluster.Hooks(f(g(h())))`.
func (c *ClusterClient) Use(hooks ...Hook) {
	c.hooks.Cluster = append(c.hooks.Cluster, hooks...)
}

// Create returns a create builder for Cluster.
func (c *ClusterClient) Create() *ClusterCreate {
	mutation := newClusterMutation(c.config, OpCreate)
	return &ClusterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cluster entities.
func (c *ClusterClient) CreateBulk(builders ...*ClusterCreate) *ClusterCreateBulk {
	return &ClusterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cluster.
func (c *ClusterClient) Update() *ClusterUpdate {
	mutation := newClusterMutation(c.config, OpUpdate)
	return &ClusterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClusterClient) UpdateOne(cl *Cluster) *ClusterUpdateOne {
	mutation := newClusterMutation(c.config, OpUpdateOne, withCluster(cl))
	return &ClusterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClusterClient) UpdateOneID(id uint) *ClusterUpdateOne {
	mutation := newClusterMutation(c.config, OpUpdateOne, withClusterID(id))
	return &ClusterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cluster.
func (c *ClusterClient) Delete() *ClusterDelete {
	mutation := newClusterMutation(c.config, OpDelete)
	return &ClusterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClusterClient) DeleteOne(cl *Cluster) *ClusterDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClusterClient) DeleteOneID(id uint) *ClusterDeleteOne {
	builder := c.Delete().Where(cluster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClusterDeleteOne{builder}
}

// Query returns a query builder for Cluster.
func (c *ClusterClient) Query() *ClusterQuery {
	return &ClusterQuery{
		config: c.config,
	}
}

// Get returns a Cluster entity by its id.
func (c *ClusterClient) Get(ctx context.Context, id uint) (*Cluster, error) {
	return c.Query().Where(cluster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClusterClient) GetX(ctx context.Context, id uint) *Cluster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAgents queries the agents edge of a Cluster.
func (c *ClusterClient) QueryAgents(cl *Cluster) *AgentQuery {
	query := &AgentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cluster.Table, cluster.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cluster.AgentsTable, cluster.AgentsColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNodes queries the nodes edge of a Cluster.
func (c *ClusterClient) QueryNodes(cl *Cluster) *NodeQuery {
	query := &NodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cluster.Table, cluster.FieldID, id),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cluster.NodesTable, cluster.NodesColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClusterClient) Hooks() []Hook {
	return c.hooks.Cluster
}

// ContainerClient is a client for the Container schema.
type ContainerClient struct {
	config
}

// NewContainerClient returns a client for the Container from the given config.
func NewContainerClient(c config) *ContainerClient {
	return &ContainerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `container.Hooks(f(g(h())))`.
func (c *ContainerClient) Use(hooks ...Hook) {
	c.hooks.Container = append(c.hooks.Container, hooks...)
}

// Create returns a create builder for Container.
func (c *ContainerClient) Create() *ContainerCreate {
	mutation := newContainerMutation(c.config, OpCreate)
	return &ContainerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Container entities.
func (c *ContainerClient) CreateBulk(builders ...*ContainerCreate) *ContainerCreateBulk {
	return &ContainerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Container.
func (c *ContainerClient) Update() *ContainerUpdate {
	mutation := newContainerMutation(c.config, OpUpdate)
	return &ContainerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContainerClient) UpdateOne(co *Container) *ContainerUpdateOne {
	mutation := newContainerMutation(c.config, OpUpdateOne, withContainer(co))
	return &ContainerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContainerClient) UpdateOneID(id uint) *ContainerUpdateOne {
	mutation := newContainerMutation(c.config, OpUpdateOne, withContainerID(id))
	return &ContainerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Container.
func (c *ContainerClient) Delete() *ContainerDelete {
	mutation := newContainerMutation(c.config, OpDelete)
	return &ContainerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ContainerClient) DeleteOne(co *Container) *ContainerDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ContainerClient) DeleteOneID(id uint) *ContainerDeleteOne {
	builder := c.Delete().Where(container.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContainerDeleteOne{builder}
}

// Query returns a query builder for Container.
func (c *ContainerClient) Query() *ContainerQuery {
	return &ContainerQuery{
		config: c.config,
	}
}

// Get returns a Container entity by its id.
func (c *ContainerClient) Get(ctx context.Context, id uint) (*Container, error) {
	return c.Query().Where(container.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContainerClient) GetX(ctx context.Context, id uint) *Container {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProcess queries the process edge of a Container.
func (c *ContainerClient) QueryProcess(co *Container) *ProcesQuery {
	query := &ProcesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(container.Table, container.FieldID, id),
			sqlgraph.To(proces.Table, proces.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, container.ProcessTable, container.ProcessColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContainerClient) Hooks() []Hook {
	return c.hooks.Container
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Create returns a create builder for Event.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id int) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EventClient) DeleteOneID(id int) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id int) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id int) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}

// IncidentBasicRuleClient is a client for the IncidentBasicRule schema.
type IncidentBasicRuleClient struct {
	config
}

// NewIncidentBasicRuleClient returns a client for the IncidentBasicRule from the given config.
func NewIncidentBasicRuleClient(c config) *IncidentBasicRuleClient {
	return &IncidentBasicRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `incidentbasicrule.Hooks(f(g(h())))`.
func (c *IncidentBasicRuleClient) Use(hooks ...Hook) {
	c.hooks.IncidentBasicRule = append(c.hooks.IncidentBasicRule, hooks...)
}

// Create returns a create builder for IncidentBasicRule.
func (c *IncidentBasicRuleClient) Create() *IncidentBasicRuleCreate {
	mutation := newIncidentBasicRuleMutation(c.config, OpCreate)
	return &IncidentBasicRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IncidentBasicRule entities.
func (c *IncidentBasicRuleClient) CreateBulk(builders ...*IncidentBasicRuleCreate) *IncidentBasicRuleCreateBulk {
	return &IncidentBasicRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IncidentBasicRule.
func (c *IncidentBasicRuleClient) Update() *IncidentBasicRuleUpdate {
	mutation := newIncidentBasicRuleMutation(c.config, OpUpdate)
	return &IncidentBasicRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IncidentBasicRuleClient) UpdateOne(ibr *IncidentBasicRule) *IncidentBasicRuleUpdateOne {
	mutation := newIncidentBasicRuleMutation(c.config, OpUpdateOne, withIncidentBasicRule(ibr))
	return &IncidentBasicRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IncidentBasicRuleClient) UpdateOneID(id uint) *IncidentBasicRuleUpdateOne {
	mutation := newIncidentBasicRuleMutation(c.config, OpUpdateOne, withIncidentBasicRuleID(id))
	return &IncidentBasicRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IncidentBasicRule.
func (c *IncidentBasicRuleClient) Delete() *IncidentBasicRuleDelete {
	mutation := newIncidentBasicRuleMutation(c.config, OpDelete)
	return &IncidentBasicRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IncidentBasicRuleClient) DeleteOne(ibr *IncidentBasicRule) *IncidentBasicRuleDeleteOne {
	return c.DeleteOneID(ibr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IncidentBasicRuleClient) DeleteOneID(id uint) *IncidentBasicRuleDeleteOne {
	builder := c.Delete().Where(incidentbasicrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IncidentBasicRuleDeleteOne{builder}
}

// Query returns a query builder for IncidentBasicRule.
func (c *IncidentBasicRuleClient) Query() *IncidentBasicRuleQuery {
	return &IncidentBasicRuleQuery{
		config: c.config,
	}
}

// Get returns a IncidentBasicRule entity by its id.
func (c *IncidentBasicRuleClient) Get(ctx context.Context, id uint) (*IncidentBasicRule, error) {
	return c.Query().Where(incidentbasicrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IncidentBasicRuleClient) GetX(ctx context.Context, id uint) *IncidentBasicRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IncidentBasicRuleClient) Hooks() []Hook {
	return c.hooks.IncidentBasicRule
}

// K8sClusterClient is a client for the K8sCluster schema.
type K8sClusterClient struct {
	config
}

// NewK8sClusterClient returns a client for the K8sCluster from the given config.
func NewK8sClusterClient(c config) *K8sClusterClient {
	return &K8sClusterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8scluster.Hooks(f(g(h())))`.
func (c *K8sClusterClient) Use(hooks ...Hook) {
	c.hooks.K8sCluster = append(c.hooks.K8sCluster, hooks...)
}

// Create returns a create builder for K8sCluster.
func (c *K8sClusterClient) Create() *K8sClusterCreate {
	mutation := newK8sClusterMutation(c.config, OpCreate)
	return &K8sClusterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sCluster entities.
func (c *K8sClusterClient) CreateBulk(builders ...*K8sClusterCreate) *K8sClusterCreateBulk {
	return &K8sClusterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sCluster.
func (c *K8sClusterClient) Update() *K8sClusterUpdate {
	mutation := newK8sClusterMutation(c.config, OpUpdate)
	return &K8sClusterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sClusterClient) UpdateOne(kc *K8sCluster) *K8sClusterUpdateOne {
	mutation := newK8sClusterMutation(c.config, OpUpdateOne, withK8sCluster(kc))
	return &K8sClusterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sClusterClient) UpdateOneID(id uint) *K8sClusterUpdateOne {
	mutation := newK8sClusterMutation(c.config, OpUpdateOne, withK8sClusterID(id))
	return &K8sClusterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sCluster.
func (c *K8sClusterClient) Delete() *K8sClusterDelete {
	mutation := newK8sClusterMutation(c.config, OpDelete)
	return &K8sClusterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sClusterClient) DeleteOne(kc *K8sCluster) *K8sClusterDeleteOne {
	return c.DeleteOneID(kc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sClusterClient) DeleteOneID(id uint) *K8sClusterDeleteOne {
	builder := c.Delete().Where(k8scluster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sClusterDeleteOne{builder}
}

// Query returns a query builder for K8sCluster.
func (c *K8sClusterClient) Query() *K8sClusterQuery {
	return &K8sClusterQuery{
		config: c.config,
	}
}

// Get returns a K8sCluster entity by its id.
func (c *K8sClusterClient) Get(ctx context.Context, id uint) (*K8sCluster, error) {
	return c.Query().Where(k8scluster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sClusterClient) GetX(ctx context.Context, id uint) *K8sCluster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sClusterClient) Hooks() []Hook {
	return c.hooks.K8sCluster
}

// K8sConnectorClient is a client for the K8sConnector schema.
type K8sConnectorClient struct {
	config
}

// NewK8sConnectorClient returns a client for the K8sConnector from the given config.
func NewK8sConnectorClient(c config) *K8sConnectorClient {
	return &K8sConnectorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8sconnector.Hooks(f(g(h())))`.
func (c *K8sConnectorClient) Use(hooks ...Hook) {
	c.hooks.K8sConnector = append(c.hooks.K8sConnector, hooks...)
}

// Create returns a create builder for K8sConnector.
func (c *K8sConnectorClient) Create() *K8sConnectorCreate {
	mutation := newK8sConnectorMutation(c.config, OpCreate)
	return &K8sConnectorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sConnector entities.
func (c *K8sConnectorClient) CreateBulk(builders ...*K8sConnectorCreate) *K8sConnectorCreateBulk {
	return &K8sConnectorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sConnector.
func (c *K8sConnectorClient) Update() *K8sConnectorUpdate {
	mutation := newK8sConnectorMutation(c.config, OpUpdate)
	return &K8sConnectorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sConnectorClient) UpdateOne(kc *K8sConnector) *K8sConnectorUpdateOne {
	mutation := newK8sConnectorMutation(c.config, OpUpdateOne, withK8sConnector(kc))
	return &K8sConnectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sConnectorClient) UpdateOneID(id uint) *K8sConnectorUpdateOne {
	mutation := newK8sConnectorMutation(c.config, OpUpdateOne, withK8sConnectorID(id))
	return &K8sConnectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sConnector.
func (c *K8sConnectorClient) Delete() *K8sConnectorDelete {
	mutation := newK8sConnectorMutation(c.config, OpDelete)
	return &K8sConnectorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sConnectorClient) DeleteOne(kc *K8sConnector) *K8sConnectorDeleteOne {
	return c.DeleteOneID(kc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sConnectorClient) DeleteOneID(id uint) *K8sConnectorDeleteOne {
	builder := c.Delete().Where(k8sconnector.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sConnectorDeleteOne{builder}
}

// Query returns a query builder for K8sConnector.
func (c *K8sConnectorClient) Query() *K8sConnectorQuery {
	return &K8sConnectorQuery{
		config: c.config,
	}
}

// Get returns a K8sConnector entity by its id.
func (c *K8sConnectorClient) Get(ctx context.Context, id uint) (*K8sConnector, error) {
	return c.Query().Where(k8sconnector.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sConnectorClient) GetX(ctx context.Context, id uint) *K8sConnector {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sConnectorClient) Hooks() []Hook {
	return c.hooks.K8sConnector
}

// K8sContainerClient is a client for the K8sContainer schema.
type K8sContainerClient struct {
	config
}

// NewK8sContainerClient returns a client for the K8sContainer from the given config.
func NewK8sContainerClient(c config) *K8sContainerClient {
	return &K8sContainerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8scontainer.Hooks(f(g(h())))`.
func (c *K8sContainerClient) Use(hooks ...Hook) {
	c.hooks.K8sContainer = append(c.hooks.K8sContainer, hooks...)
}

// Create returns a create builder for K8sContainer.
func (c *K8sContainerClient) Create() *K8sContainerCreate {
	mutation := newK8sContainerMutation(c.config, OpCreate)
	return &K8sContainerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sContainer entities.
func (c *K8sContainerClient) CreateBulk(builders ...*K8sContainerCreate) *K8sContainerCreateBulk {
	return &K8sContainerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sContainer.
func (c *K8sContainerClient) Update() *K8sContainerUpdate {
	mutation := newK8sContainerMutation(c.config, OpUpdate)
	return &K8sContainerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sContainerClient) UpdateOne(kc *K8sContainer) *K8sContainerUpdateOne {
	mutation := newK8sContainerMutation(c.config, OpUpdateOne, withK8sContainer(kc))
	return &K8sContainerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sContainerClient) UpdateOneID(id uint) *K8sContainerUpdateOne {
	mutation := newK8sContainerMutation(c.config, OpUpdateOne, withK8sContainerID(id))
	return &K8sContainerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sContainer.
func (c *K8sContainerClient) Delete() *K8sContainerDelete {
	mutation := newK8sContainerMutation(c.config, OpDelete)
	return &K8sContainerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sContainerClient) DeleteOne(kc *K8sContainer) *K8sContainerDeleteOne {
	return c.DeleteOneID(kc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sContainerClient) DeleteOneID(id uint) *K8sContainerDeleteOne {
	builder := c.Delete().Where(k8scontainer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sContainerDeleteOne{builder}
}

// Query returns a query builder for K8sContainer.
func (c *K8sContainerClient) Query() *K8sContainerQuery {
	return &K8sContainerQuery{
		config: c.config,
	}
}

// Get returns a K8sContainer entity by its id.
func (c *K8sContainerClient) Get(ctx context.Context, id uint) (*K8sContainer, error) {
	return c.Query().Where(k8scontainer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sContainerClient) GetX(ctx context.Context, id uint) *K8sContainer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sContainerClient) Hooks() []Hook {
	return c.hooks.K8sContainer
}

// K8sDaemonSetClient is a client for the K8sDaemonSet schema.
type K8sDaemonSetClient struct {
	config
}

// NewK8sDaemonSetClient returns a client for the K8sDaemonSet from the given config.
func NewK8sDaemonSetClient(c config) *K8sDaemonSetClient {
	return &K8sDaemonSetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8sdaemonset.Hooks(f(g(h())))`.
func (c *K8sDaemonSetClient) Use(hooks ...Hook) {
	c.hooks.K8sDaemonSet = append(c.hooks.K8sDaemonSet, hooks...)
}

// Create returns a create builder for K8sDaemonSet.
func (c *K8sDaemonSetClient) Create() *K8sDaemonSetCreate {
	mutation := newK8sDaemonSetMutation(c.config, OpCreate)
	return &K8sDaemonSetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sDaemonSet entities.
func (c *K8sDaemonSetClient) CreateBulk(builders ...*K8sDaemonSetCreate) *K8sDaemonSetCreateBulk {
	return &K8sDaemonSetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sDaemonSet.
func (c *K8sDaemonSetClient) Update() *K8sDaemonSetUpdate {
	mutation := newK8sDaemonSetMutation(c.config, OpUpdate)
	return &K8sDaemonSetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sDaemonSetClient) UpdateOne(kds *K8sDaemonSet) *K8sDaemonSetUpdateOne {
	mutation := newK8sDaemonSetMutation(c.config, OpUpdateOne, withK8sDaemonSet(kds))
	return &K8sDaemonSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sDaemonSetClient) UpdateOneID(id uint) *K8sDaemonSetUpdateOne {
	mutation := newK8sDaemonSetMutation(c.config, OpUpdateOne, withK8sDaemonSetID(id))
	return &K8sDaemonSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sDaemonSet.
func (c *K8sDaemonSetClient) Delete() *K8sDaemonSetDelete {
	mutation := newK8sDaemonSetMutation(c.config, OpDelete)
	return &K8sDaemonSetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sDaemonSetClient) DeleteOne(kds *K8sDaemonSet) *K8sDaemonSetDeleteOne {
	return c.DeleteOneID(kds.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sDaemonSetClient) DeleteOneID(id uint) *K8sDaemonSetDeleteOne {
	builder := c.Delete().Where(k8sdaemonset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sDaemonSetDeleteOne{builder}
}

// Query returns a query builder for K8sDaemonSet.
func (c *K8sDaemonSetClient) Query() *K8sDaemonSetQuery {
	return &K8sDaemonSetQuery{
		config: c.config,
	}
}

// Get returns a K8sDaemonSet entity by its id.
func (c *K8sDaemonSetClient) Get(ctx context.Context, id uint) (*K8sDaemonSet, error) {
	return c.Query().Where(k8sdaemonset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sDaemonSetClient) GetX(ctx context.Context, id uint) *K8sDaemonSet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sDaemonSetClient) Hooks() []Hook {
	return c.hooks.K8sDaemonSet
}

// K8sDeploymentClient is a client for the K8sDeployment schema.
type K8sDeploymentClient struct {
	config
}

// NewK8sDeploymentClient returns a client for the K8sDeployment from the given config.
func NewK8sDeploymentClient(c config) *K8sDeploymentClient {
	return &K8sDeploymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8sdeployment.Hooks(f(g(h())))`.
func (c *K8sDeploymentClient) Use(hooks ...Hook) {
	c.hooks.K8sDeployment = append(c.hooks.K8sDeployment, hooks...)
}

// Create returns a create builder for K8sDeployment.
func (c *K8sDeploymentClient) Create() *K8sDeploymentCreate {
	mutation := newK8sDeploymentMutation(c.config, OpCreate)
	return &K8sDeploymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sDeployment entities.
func (c *K8sDeploymentClient) CreateBulk(builders ...*K8sDeploymentCreate) *K8sDeploymentCreateBulk {
	return &K8sDeploymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sDeployment.
func (c *K8sDeploymentClient) Update() *K8sDeploymentUpdate {
	mutation := newK8sDeploymentMutation(c.config, OpUpdate)
	return &K8sDeploymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sDeploymentClient) UpdateOne(kd *K8sDeployment) *K8sDeploymentUpdateOne {
	mutation := newK8sDeploymentMutation(c.config, OpUpdateOne, withK8sDeployment(kd))
	return &K8sDeploymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sDeploymentClient) UpdateOneID(id uint) *K8sDeploymentUpdateOne {
	mutation := newK8sDeploymentMutation(c.config, OpUpdateOne, withK8sDeploymentID(id))
	return &K8sDeploymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sDeployment.
func (c *K8sDeploymentClient) Delete() *K8sDeploymentDelete {
	mutation := newK8sDeploymentMutation(c.config, OpDelete)
	return &K8sDeploymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sDeploymentClient) DeleteOne(kd *K8sDeployment) *K8sDeploymentDeleteOne {
	return c.DeleteOneID(kd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sDeploymentClient) DeleteOneID(id uint) *K8sDeploymentDeleteOne {
	builder := c.Delete().Where(k8sdeployment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sDeploymentDeleteOne{builder}
}

// Query returns a query builder for K8sDeployment.
func (c *K8sDeploymentClient) Query() *K8sDeploymentQuery {
	return &K8sDeploymentQuery{
		config: c.config,
	}
}

// Get returns a K8sDeployment entity by its id.
func (c *K8sDeploymentClient) Get(ctx context.Context, id uint) (*K8sDeployment, error) {
	return c.Query().Where(k8sdeployment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sDeploymentClient) GetX(ctx context.Context, id uint) *K8sDeployment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sDeploymentClient) Hooks() []Hook {
	return c.hooks.K8sDeployment
}

// K8sEventClient is a client for the K8sEvent schema.
type K8sEventClient struct {
	config
}

// NewK8sEventClient returns a client for the K8sEvent from the given config.
func NewK8sEventClient(c config) *K8sEventClient {
	return &K8sEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8sevent.Hooks(f(g(h())))`.
func (c *K8sEventClient) Use(hooks ...Hook) {
	c.hooks.K8sEvent = append(c.hooks.K8sEvent, hooks...)
}

// Create returns a create builder for K8sEvent.
func (c *K8sEventClient) Create() *K8sEventCreate {
	mutation := newK8sEventMutation(c.config, OpCreate)
	return &K8sEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sEvent entities.
func (c *K8sEventClient) CreateBulk(builders ...*K8sEventCreate) *K8sEventCreateBulk {
	return &K8sEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sEvent.
func (c *K8sEventClient) Update() *K8sEventUpdate {
	mutation := newK8sEventMutation(c.config, OpUpdate)
	return &K8sEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sEventClient) UpdateOne(ke *K8sEvent) *K8sEventUpdateOne {
	mutation := newK8sEventMutation(c.config, OpUpdateOne, withK8sEvent(ke))
	return &K8sEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sEventClient) UpdateOneID(id int) *K8sEventUpdateOne {
	mutation := newK8sEventMutation(c.config, OpUpdateOne, withK8sEventID(id))
	return &K8sEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sEvent.
func (c *K8sEventClient) Delete() *K8sEventDelete {
	mutation := newK8sEventMutation(c.config, OpDelete)
	return &K8sEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sEventClient) DeleteOne(ke *K8sEvent) *K8sEventDeleteOne {
	return c.DeleteOneID(ke.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sEventClient) DeleteOneID(id int) *K8sEventDeleteOne {
	builder := c.Delete().Where(k8sevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sEventDeleteOne{builder}
}

// Query returns a query builder for K8sEvent.
func (c *K8sEventClient) Query() *K8sEventQuery {
	return &K8sEventQuery{
		config: c.config,
	}
}

// Get returns a K8sEvent entity by its id.
func (c *K8sEventClient) Get(ctx context.Context, id int) (*K8sEvent, error) {
	return c.Query().Where(k8sevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sEventClient) GetX(ctx context.Context, id int) *K8sEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sEventClient) Hooks() []Hook {
	return c.hooks.K8sEvent
}

// K8sLabelClient is a client for the K8sLabel schema.
type K8sLabelClient struct {
	config
}

// NewK8sLabelClient returns a client for the K8sLabel from the given config.
func NewK8sLabelClient(c config) *K8sLabelClient {
	return &K8sLabelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8slabel.Hooks(f(g(h())))`.
func (c *K8sLabelClient) Use(hooks ...Hook) {
	c.hooks.K8sLabel = append(c.hooks.K8sLabel, hooks...)
}

// Create returns a create builder for K8sLabel.
func (c *K8sLabelClient) Create() *K8sLabelCreate {
	mutation := newK8sLabelMutation(c.config, OpCreate)
	return &K8sLabelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sLabel entities.
func (c *K8sLabelClient) CreateBulk(builders ...*K8sLabelCreate) *K8sLabelCreateBulk {
	return &K8sLabelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sLabel.
func (c *K8sLabelClient) Update() *K8sLabelUpdate {
	mutation := newK8sLabelMutation(c.config, OpUpdate)
	return &K8sLabelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sLabelClient) UpdateOne(kl *K8sLabel) *K8sLabelUpdateOne {
	mutation := newK8sLabelMutation(c.config, OpUpdateOne, withK8sLabel(kl))
	return &K8sLabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sLabelClient) UpdateOneID(id uint) *K8sLabelUpdateOne {
	mutation := newK8sLabelMutation(c.config, OpUpdateOne, withK8sLabelID(id))
	return &K8sLabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sLabel.
func (c *K8sLabelClient) Delete() *K8sLabelDelete {
	mutation := newK8sLabelMutation(c.config, OpDelete)
	return &K8sLabelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sLabelClient) DeleteOne(kl *K8sLabel) *K8sLabelDeleteOne {
	return c.DeleteOneID(kl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sLabelClient) DeleteOneID(id uint) *K8sLabelDeleteOne {
	builder := c.Delete().Where(k8slabel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sLabelDeleteOne{builder}
}

// Query returns a query builder for K8sLabel.
func (c *K8sLabelClient) Query() *K8sLabelQuery {
	return &K8sLabelQuery{
		config: c.config,
	}
}

// Get returns a K8sLabel entity by its id.
func (c *K8sLabelClient) Get(ctx context.Context, id uint) (*K8sLabel, error) {
	return c.Query().Where(k8slabel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sLabelClient) GetX(ctx context.Context, id uint) *K8sLabel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sLabelClient) Hooks() []Hook {
	return c.hooks.K8sLabel
}

// K8sMetricClient is a client for the K8sMetric schema.
type K8sMetricClient struct {
	config
}

// NewK8sMetricClient returns a client for the K8sMetric from the given config.
func NewK8sMetricClient(c config) *K8sMetricClient {
	return &K8sMetricClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8smetric.Hooks(f(g(h())))`.
func (c *K8sMetricClient) Use(hooks ...Hook) {
	c.hooks.K8sMetric = append(c.hooks.K8sMetric, hooks...)
}

// Create returns a create builder for K8sMetric.
func (c *K8sMetricClient) Create() *K8sMetricCreate {
	mutation := newK8sMetricMutation(c.config, OpCreate)
	return &K8sMetricCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sMetric entities.
func (c *K8sMetricClient) CreateBulk(builders ...*K8sMetricCreate) *K8sMetricCreateBulk {
	return &K8sMetricCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sMetric.
func (c *K8sMetricClient) Update() *K8sMetricUpdate {
	mutation := newK8sMetricMutation(c.config, OpUpdate)
	return &K8sMetricUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sMetricClient) UpdateOne(km *K8sMetric) *K8sMetricUpdateOne {
	mutation := newK8sMetricMutation(c.config, OpUpdateOne, withK8sMetric(km))
	return &K8sMetricUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sMetricClient) UpdateOneID(id int) *K8sMetricUpdateOne {
	mutation := newK8sMetricMutation(c.config, OpUpdateOne, withK8sMetricID(id))
	return &K8sMetricUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sMetric.
func (c *K8sMetricClient) Delete() *K8sMetricDelete {
	mutation := newK8sMetricMutation(c.config, OpDelete)
	return &K8sMetricDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sMetricClient) DeleteOne(km *K8sMetric) *K8sMetricDeleteOne {
	return c.DeleteOneID(km.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sMetricClient) DeleteOneID(id int) *K8sMetricDeleteOne {
	builder := c.Delete().Where(k8smetric.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sMetricDeleteOne{builder}
}

// Query returns a query builder for K8sMetric.
func (c *K8sMetricClient) Query() *K8sMetricQuery {
	return &K8sMetricQuery{
		config: c.config,
	}
}

// Get returns a K8sMetric entity by its id.
func (c *K8sMetricClient) Get(ctx context.Context, id int) (*K8sMetric, error) {
	return c.Query().Where(k8smetric.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sMetricClient) GetX(ctx context.Context, id int) *K8sMetric {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sMetricClient) Hooks() []Hook {
	return c.hooks.K8sMetric
}

// K8sNamespaceClient is a client for the K8sNamespace schema.
type K8sNamespaceClient struct {
	config
}

// NewK8sNamespaceClient returns a client for the K8sNamespace from the given config.
func NewK8sNamespaceClient(c config) *K8sNamespaceClient {
	return &K8sNamespaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8snamespace.Hooks(f(g(h())))`.
func (c *K8sNamespaceClient) Use(hooks ...Hook) {
	c.hooks.K8sNamespace = append(c.hooks.K8sNamespace, hooks...)
}

// Create returns a create builder for K8sNamespace.
func (c *K8sNamespaceClient) Create() *K8sNamespaceCreate {
	mutation := newK8sNamespaceMutation(c.config, OpCreate)
	return &K8sNamespaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sNamespace entities.
func (c *K8sNamespaceClient) CreateBulk(builders ...*K8sNamespaceCreate) *K8sNamespaceCreateBulk {
	return &K8sNamespaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sNamespace.
func (c *K8sNamespaceClient) Update() *K8sNamespaceUpdate {
	mutation := newK8sNamespaceMutation(c.config, OpUpdate)
	return &K8sNamespaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sNamespaceClient) UpdateOne(kn *K8sNamespace) *K8sNamespaceUpdateOne {
	mutation := newK8sNamespaceMutation(c.config, OpUpdateOne, withK8sNamespace(kn))
	return &K8sNamespaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sNamespaceClient) UpdateOneID(id uint) *K8sNamespaceUpdateOne {
	mutation := newK8sNamespaceMutation(c.config, OpUpdateOne, withK8sNamespaceID(id))
	return &K8sNamespaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sNamespace.
func (c *K8sNamespaceClient) Delete() *K8sNamespaceDelete {
	mutation := newK8sNamespaceMutation(c.config, OpDelete)
	return &K8sNamespaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sNamespaceClient) DeleteOne(kn *K8sNamespace) *K8sNamespaceDeleteOne {
	return c.DeleteOneID(kn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sNamespaceClient) DeleteOneID(id uint) *K8sNamespaceDeleteOne {
	builder := c.Delete().Where(k8snamespace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sNamespaceDeleteOne{builder}
}

// Query returns a query builder for K8sNamespace.
func (c *K8sNamespaceClient) Query() *K8sNamespaceQuery {
	return &K8sNamespaceQuery{
		config: c.config,
	}
}

// Get returns a K8sNamespace entity by its id.
func (c *K8sNamespaceClient) Get(ctx context.Context, id uint) (*K8sNamespace, error) {
	return c.Query().Where(k8snamespace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sNamespaceClient) GetX(ctx context.Context, id uint) *K8sNamespace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sNamespaceClient) Hooks() []Hook {
	return c.hooks.K8sNamespace
}

// K8sNodeClient is a client for the K8sNode schema.
type K8sNodeClient struct {
	config
}

// NewK8sNodeClient returns a client for the K8sNode from the given config.
func NewK8sNodeClient(c config) *K8sNodeClient {
	return &K8sNodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8snode.Hooks(f(g(h())))`.
func (c *K8sNodeClient) Use(hooks ...Hook) {
	c.hooks.K8sNode = append(c.hooks.K8sNode, hooks...)
}

// Create returns a create builder for K8sNode.
func (c *K8sNodeClient) Create() *K8sNodeCreate {
	mutation := newK8sNodeMutation(c.config, OpCreate)
	return &K8sNodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sNode entities.
func (c *K8sNodeClient) CreateBulk(builders ...*K8sNodeCreate) *K8sNodeCreateBulk {
	return &K8sNodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sNode.
func (c *K8sNodeClient) Update() *K8sNodeUpdate {
	mutation := newK8sNodeMutation(c.config, OpUpdate)
	return &K8sNodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sNodeClient) UpdateOne(kn *K8sNode) *K8sNodeUpdateOne {
	mutation := newK8sNodeMutation(c.config, OpUpdateOne, withK8sNode(kn))
	return &K8sNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sNodeClient) UpdateOneID(id uint) *K8sNodeUpdateOne {
	mutation := newK8sNodeMutation(c.config, OpUpdateOne, withK8sNodeID(id))
	return &K8sNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sNode.
func (c *K8sNodeClient) Delete() *K8sNodeDelete {
	mutation := newK8sNodeMutation(c.config, OpDelete)
	return &K8sNodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sNodeClient) DeleteOne(kn *K8sNode) *K8sNodeDeleteOne {
	return c.DeleteOneID(kn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sNodeClient) DeleteOneID(id uint) *K8sNodeDeleteOne {
	builder := c.Delete().Where(k8snode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sNodeDeleteOne{builder}
}

// Query returns a query builder for K8sNode.
func (c *K8sNodeClient) Query() *K8sNodeQuery {
	return &K8sNodeQuery{
		config: c.config,
	}
}

// Get returns a K8sNode entity by its id.
func (c *K8sNodeClient) Get(ctx context.Context, id uint) (*K8sNode, error) {
	return c.Query().Where(k8snode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sNodeClient) GetX(ctx context.Context, id uint) *K8sNode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sNodeClient) Hooks() []Hook {
	return c.hooks.K8sNode
}

// K8sObjectClient is a client for the K8sObject schema.
type K8sObjectClient struct {
	config
}

// NewK8sObjectClient returns a client for the K8sObject from the given config.
func NewK8sObjectClient(c config) *K8sObjectClient {
	return &K8sObjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8sobject.Hooks(f(g(h())))`.
func (c *K8sObjectClient) Use(hooks ...Hook) {
	c.hooks.K8sObject = append(c.hooks.K8sObject, hooks...)
}

// Create returns a create builder for K8sObject.
func (c *K8sObjectClient) Create() *K8sObjectCreate {
	mutation := newK8sObjectMutation(c.config, OpCreate)
	return &K8sObjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sObject entities.
func (c *K8sObjectClient) CreateBulk(builders ...*K8sObjectCreate) *K8sObjectCreateBulk {
	return &K8sObjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sObject.
func (c *K8sObjectClient) Update() *K8sObjectUpdate {
	mutation := newK8sObjectMutation(c.config, OpUpdate)
	return &K8sObjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sObjectClient) UpdateOne(ko *K8sObject) *K8sObjectUpdateOne {
	mutation := newK8sObjectMutation(c.config, OpUpdateOne, withK8sObject(ko))
	return &K8sObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sObjectClient) UpdateOneID(id uint) *K8sObjectUpdateOne {
	mutation := newK8sObjectMutation(c.config, OpUpdateOne, withK8sObjectID(id))
	return &K8sObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sObject.
func (c *K8sObjectClient) Delete() *K8sObjectDelete {
	mutation := newK8sObjectMutation(c.config, OpDelete)
	return &K8sObjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sObjectClient) DeleteOne(ko *K8sObject) *K8sObjectDeleteOne {
	return c.DeleteOneID(ko.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sObjectClient) DeleteOneID(id uint) *K8sObjectDeleteOne {
	builder := c.Delete().Where(k8sobject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sObjectDeleteOne{builder}
}

// Query returns a query builder for K8sObject.
func (c *K8sObjectClient) Query() *K8sObjectQuery {
	return &K8sObjectQuery{
		config: c.config,
	}
}

// Get returns a K8sObject entity by its id.
func (c *K8sObjectClient) Get(ctx context.Context, id uint) (*K8sObject, error) {
	return c.Query().Where(k8sobject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sObjectClient) GetX(ctx context.Context, id uint) *K8sObject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sObjectClient) Hooks() []Hook {
	return c.hooks.K8sObject
}

// K8sObjectTagClient is a client for the K8sObjectTag schema.
type K8sObjectTagClient struct {
	config
}

// NewK8sObjectTagClient returns a client for the K8sObjectTag from the given config.
func NewK8sObjectTagClient(c config) *K8sObjectTagClient {
	return &K8sObjectTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8sobjecttag.Hooks(f(g(h())))`.
func (c *K8sObjectTagClient) Use(hooks ...Hook) {
	c.hooks.K8sObjectTag = append(c.hooks.K8sObjectTag, hooks...)
}

// Create returns a create builder for K8sObjectTag.
func (c *K8sObjectTagClient) Create() *K8sObjectTagCreate {
	mutation := newK8sObjectTagMutation(c.config, OpCreate)
	return &K8sObjectTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sObjectTag entities.
func (c *K8sObjectTagClient) CreateBulk(builders ...*K8sObjectTagCreate) *K8sObjectTagCreateBulk {
	return &K8sObjectTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sObjectTag.
func (c *K8sObjectTagClient) Update() *K8sObjectTagUpdate {
	mutation := newK8sObjectTagMutation(c.config, OpUpdate)
	return &K8sObjectTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sObjectTagClient) UpdateOne(kot *K8sObjectTag) *K8sObjectTagUpdateOne {
	mutation := newK8sObjectTagMutation(c.config, OpUpdateOne, withK8sObjectTag(kot))
	return &K8sObjectTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sObjectTagClient) UpdateOneID(id uint) *K8sObjectTagUpdateOne {
	mutation := newK8sObjectTagMutation(c.config, OpUpdateOne, withK8sObjectTagID(id))
	return &K8sObjectTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sObjectTag.
func (c *K8sObjectTagClient) Delete() *K8sObjectTagDelete {
	mutation := newK8sObjectTagMutation(c.config, OpDelete)
	return &K8sObjectTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sObjectTagClient) DeleteOne(kot *K8sObjectTag) *K8sObjectTagDeleteOne {
	return c.DeleteOneID(kot.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sObjectTagClient) DeleteOneID(id uint) *K8sObjectTagDeleteOne {
	builder := c.Delete().Where(k8sobjecttag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sObjectTagDeleteOne{builder}
}

// Query returns a query builder for K8sObjectTag.
func (c *K8sObjectTagClient) Query() *K8sObjectTagQuery {
	return &K8sObjectTagQuery{
		config: c.config,
	}
}

// Get returns a K8sObjectTag entity by its id.
func (c *K8sObjectTagClient) Get(ctx context.Context, id uint) (*K8sObjectTag, error) {
	return c.Query().Where(k8sobjecttag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sObjectTagClient) GetX(ctx context.Context, id uint) *K8sObjectTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sObjectTagClient) Hooks() []Hook {
	return c.hooks.K8sObjectTag
}

// K8sPodClient is a client for the K8sPod schema.
type K8sPodClient struct {
	config
}

// NewK8sPodClient returns a client for the K8sPod from the given config.
func NewK8sPodClient(c config) *K8sPodClient {
	return &K8sPodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8spod.Hooks(f(g(h())))`.
func (c *K8sPodClient) Use(hooks ...Hook) {
	c.hooks.K8sPod = append(c.hooks.K8sPod, hooks...)
}

// Create returns a create builder for K8sPod.
func (c *K8sPodClient) Create() *K8sPodCreate {
	mutation := newK8sPodMutation(c.config, OpCreate)
	return &K8sPodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sPod entities.
func (c *K8sPodClient) CreateBulk(builders ...*K8sPodCreate) *K8sPodCreateBulk {
	return &K8sPodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sPod.
func (c *K8sPodClient) Update() *K8sPodUpdate {
	mutation := newK8sPodMutation(c.config, OpUpdate)
	return &K8sPodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sPodClient) UpdateOne(kp *K8sPod) *K8sPodUpdateOne {
	mutation := newK8sPodMutation(c.config, OpUpdateOne, withK8sPod(kp))
	return &K8sPodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sPodClient) UpdateOneID(id uint) *K8sPodUpdateOne {
	mutation := newK8sPodMutation(c.config, OpUpdateOne, withK8sPodID(id))
	return &K8sPodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sPod.
func (c *K8sPodClient) Delete() *K8sPodDelete {
	mutation := newK8sPodMutation(c.config, OpDelete)
	return &K8sPodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sPodClient) DeleteOne(kp *K8sPod) *K8sPodDeleteOne {
	return c.DeleteOneID(kp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sPodClient) DeleteOneID(id uint) *K8sPodDeleteOne {
	builder := c.Delete().Where(k8spod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sPodDeleteOne{builder}
}

// Query returns a query builder for K8sPod.
func (c *K8sPodClient) Query() *K8sPodQuery {
	return &K8sPodQuery{
		config: c.config,
	}
}

// Get returns a K8sPod entity by its id.
func (c *K8sPodClient) Get(ctx context.Context, id uint) (*K8sPod, error) {
	return c.Query().Where(k8spod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sPodClient) GetX(ctx context.Context, id uint) *K8sPod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sPodClient) Hooks() []Hook {
	return c.hooks.K8sPod
}

// K8sReplicaSetClient is a client for the K8sReplicaSet schema.
type K8sReplicaSetClient struct {
	config
}

// NewK8sReplicaSetClient returns a client for the K8sReplicaSet from the given config.
func NewK8sReplicaSetClient(c config) *K8sReplicaSetClient {
	return &K8sReplicaSetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8sreplicaset.Hooks(f(g(h())))`.
func (c *K8sReplicaSetClient) Use(hooks ...Hook) {
	c.hooks.K8sReplicaSet = append(c.hooks.K8sReplicaSet, hooks...)
}

// Create returns a create builder for K8sReplicaSet.
func (c *K8sReplicaSetClient) Create() *K8sReplicaSetCreate {
	mutation := newK8sReplicaSetMutation(c.config, OpCreate)
	return &K8sReplicaSetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sReplicaSet entities.
func (c *K8sReplicaSetClient) CreateBulk(builders ...*K8sReplicaSetCreate) *K8sReplicaSetCreateBulk {
	return &K8sReplicaSetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sReplicaSet.
func (c *K8sReplicaSetClient) Update() *K8sReplicaSetUpdate {
	mutation := newK8sReplicaSetMutation(c.config, OpUpdate)
	return &K8sReplicaSetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sReplicaSetClient) UpdateOne(krs *K8sReplicaSet) *K8sReplicaSetUpdateOne {
	mutation := newK8sReplicaSetMutation(c.config, OpUpdateOne, withK8sReplicaSet(krs))
	return &K8sReplicaSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sReplicaSetClient) UpdateOneID(id uint) *K8sReplicaSetUpdateOne {
	mutation := newK8sReplicaSetMutation(c.config, OpUpdateOne, withK8sReplicaSetID(id))
	return &K8sReplicaSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sReplicaSet.
func (c *K8sReplicaSetClient) Delete() *K8sReplicaSetDelete {
	mutation := newK8sReplicaSetMutation(c.config, OpDelete)
	return &K8sReplicaSetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sReplicaSetClient) DeleteOne(krs *K8sReplicaSet) *K8sReplicaSetDeleteOne {
	return c.DeleteOneID(krs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sReplicaSetClient) DeleteOneID(id uint) *K8sReplicaSetDeleteOne {
	builder := c.Delete().Where(k8sreplicaset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sReplicaSetDeleteOne{builder}
}

// Query returns a query builder for K8sReplicaSet.
func (c *K8sReplicaSetClient) Query() *K8sReplicaSetQuery {
	return &K8sReplicaSetQuery{
		config: c.config,
	}
}

// Get returns a K8sReplicaSet entity by its id.
func (c *K8sReplicaSetClient) Get(ctx context.Context, id uint) (*K8sReplicaSet, error) {
	return c.Query().Where(k8sreplicaset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sReplicaSetClient) GetX(ctx context.Context, id uint) *K8sReplicaSet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sReplicaSetClient) Hooks() []Hook {
	return c.hooks.K8sReplicaSet
}

// K8sStatefulSetClient is a client for the K8sStatefulSet schema.
type K8sStatefulSetClient struct {
	config
}

// NewK8sStatefulSetClient returns a client for the K8sStatefulSet from the given config.
func NewK8sStatefulSetClient(c config) *K8sStatefulSetClient {
	return &K8sStatefulSetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `k8sstatefulset.Hooks(f(g(h())))`.
func (c *K8sStatefulSetClient) Use(hooks ...Hook) {
	c.hooks.K8sStatefulSet = append(c.hooks.K8sStatefulSet, hooks...)
}

// Create returns a create builder for K8sStatefulSet.
func (c *K8sStatefulSetClient) Create() *K8sStatefulSetCreate {
	mutation := newK8sStatefulSetMutation(c.config, OpCreate)
	return &K8sStatefulSetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of K8sStatefulSet entities.
func (c *K8sStatefulSetClient) CreateBulk(builders ...*K8sStatefulSetCreate) *K8sStatefulSetCreateBulk {
	return &K8sStatefulSetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for K8sStatefulSet.
func (c *K8sStatefulSetClient) Update() *K8sStatefulSetUpdate {
	mutation := newK8sStatefulSetMutation(c.config, OpUpdate)
	return &K8sStatefulSetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *K8sStatefulSetClient) UpdateOne(kss *K8sStatefulSet) *K8sStatefulSetUpdateOne {
	mutation := newK8sStatefulSetMutation(c.config, OpUpdateOne, withK8sStatefulSet(kss))
	return &K8sStatefulSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *K8sStatefulSetClient) UpdateOneID(id uint) *K8sStatefulSetUpdateOne {
	mutation := newK8sStatefulSetMutation(c.config, OpUpdateOne, withK8sStatefulSetID(id))
	return &K8sStatefulSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for K8sStatefulSet.
func (c *K8sStatefulSetClient) Delete() *K8sStatefulSetDelete {
	mutation := newK8sStatefulSetMutation(c.config, OpDelete)
	return &K8sStatefulSetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *K8sStatefulSetClient) DeleteOne(kss *K8sStatefulSet) *K8sStatefulSetDeleteOne {
	return c.DeleteOneID(kss.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *K8sStatefulSetClient) DeleteOneID(id uint) *K8sStatefulSetDeleteOne {
	builder := c.Delete().Where(k8sstatefulset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &K8sStatefulSetDeleteOne{builder}
}

// Query returns a query builder for K8sStatefulSet.
func (c *K8sStatefulSetClient) Query() *K8sStatefulSetQuery {
	return &K8sStatefulSetQuery{
		config: c.config,
	}
}

// Get returns a K8sStatefulSet entity by its id.
func (c *K8sStatefulSetClient) Get(ctx context.Context, id uint) (*K8sStatefulSet, error) {
	return c.Query().Where(k8sstatefulset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *K8sStatefulSetClient) GetX(ctx context.Context, id uint) *K8sStatefulSet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *K8sStatefulSetClient) Hooks() []Hook {
	return c.hooks.K8sStatefulSet
}

// MetricClient is a client for the Metric schema.
type MetricClient struct {
	config
}

// NewMetricClient returns a client for the Metric from the given config.
func NewMetricClient(c config) *MetricClient {
	return &MetricClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `metric.Hooks(f(g(h())))`.
func (c *MetricClient) Use(hooks ...Hook) {
	c.hooks.Metric = append(c.hooks.Metric, hooks...)
}

// Create returns a create builder for Metric.
func (c *MetricClient) Create() *MetricCreate {
	mutation := newMetricMutation(c.config, OpCreate)
	return &MetricCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Metric entities.
func (c *MetricClient) CreateBulk(builders ...*MetricCreate) *MetricCreateBulk {
	return &MetricCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Metric.
func (c *MetricClient) Update() *MetricUpdate {
	mutation := newMetricMutation(c.config, OpUpdate)
	return &MetricUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetricClient) UpdateOne(m *Metric) *MetricUpdateOne {
	mutation := newMetricMutation(c.config, OpUpdateOne, withMetric(m))
	return &MetricUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MetricClient) UpdateOneID(id int) *MetricUpdateOne {
	mutation := newMetricMutation(c.config, OpUpdateOne, withMetricID(id))
	return &MetricUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Metric.
func (c *MetricClient) Delete() *MetricDelete {
	mutation := newMetricMutation(c.config, OpDelete)
	return &MetricDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MetricClient) DeleteOne(m *Metric) *MetricDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MetricClient) DeleteOneID(id int) *MetricDeleteOne {
	builder := c.Delete().Where(metric.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MetricDeleteOne{builder}
}

// Query returns a query builder for Metric.
func (c *MetricClient) Query() *MetricQuery {
	return &MetricQuery{
		config: c.config,
	}
}

// Get returns a Metric entity by its id.
func (c *MetricClient) Get(ctx context.Context, id int) (*Metric, error) {
	return c.Query().Where(metric.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetricClient) GetX(ctx context.Context, id int) *Metric {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MetricClient) Hooks() []Hook {
	return c.hooks.Metric
}

// MetricEndpointClient is a client for the MetricEndpoint schema.
type MetricEndpointClient struct {
	config
}

// NewMetricEndpointClient returns a client for the MetricEndpoint from the given config.
func NewMetricEndpointClient(c config) *MetricEndpointClient {
	return &MetricEndpointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `metricendpoint.Hooks(f(g(h())))`.
func (c *MetricEndpointClient) Use(hooks ...Hook) {
	c.hooks.MetricEndpoint = append(c.hooks.MetricEndpoint, hooks...)
}

// Create returns a create builder for MetricEndpoint.
func (c *MetricEndpointClient) Create() *MetricEndpointCreate {
	mutation := newMetricEndpointMutation(c.config, OpCreate)
	return &MetricEndpointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MetricEndpoint entities.
func (c *MetricEndpointClient) CreateBulk(builders ...*MetricEndpointCreate) *MetricEndpointCreateBulk {
	return &MetricEndpointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MetricEndpoint.
func (c *MetricEndpointClient) Update() *MetricEndpointUpdate {
	mutation := newMetricEndpointMutation(c.config, OpUpdate)
	return &MetricEndpointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetricEndpointClient) UpdateOne(me *MetricEndpoint) *MetricEndpointUpdateOne {
	mutation := newMetricEndpointMutation(c.config, OpUpdateOne, withMetricEndpoint(me))
	return &MetricEndpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MetricEndpointClient) UpdateOneID(id uint) *MetricEndpointUpdateOne {
	mutation := newMetricEndpointMutation(c.config, OpUpdateOne, withMetricEndpointID(id))
	return &MetricEndpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MetricEndpoint.
func (c *MetricEndpointClient) Delete() *MetricEndpointDelete {
	mutation := newMetricEndpointMutation(c.config, OpDelete)
	return &MetricEndpointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MetricEndpointClient) DeleteOne(me *MetricEndpoint) *MetricEndpointDeleteOne {
	return c.DeleteOneID(me.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MetricEndpointClient) DeleteOneID(id uint) *MetricEndpointDeleteOne {
	builder := c.Delete().Where(metricendpoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MetricEndpointDeleteOne{builder}
}

// Query returns a query builder for MetricEndpoint.
func (c *MetricEndpointClient) Query() *MetricEndpointQuery {
	return &MetricEndpointQuery{
		config: c.config,
	}
}

// Get returns a MetricEndpoint entity by its id.
func (c *MetricEndpointClient) Get(ctx context.Context, id uint) (*MetricEndpoint, error) {
	return c.Query().Where(metricendpoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetricEndpointClient) GetX(ctx context.Context, id uint) *MetricEndpoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetrics queries the metrics edge of a MetricEndpoint.
func (c *MetricEndpointClient) QueryMetrics(me *MetricEndpoint) *MetricQuery {
	query := &MetricQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := me.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(metricendpoint.Table, metricendpoint.FieldID, id),
			sqlgraph.To(metric.Table, metric.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, metricendpoint.MetricsTable, metricendpoint.MetricsColumn),
		)
		fromV = sqlgraph.Neighbors(me.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a MetricEndpoint.
func (c *MetricEndpointClient) QueryEvents(me *MetricEndpoint) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := me.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(metricendpoint.Table, metricendpoint.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, metricendpoint.EventsTable, metricendpoint.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(me.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MetricEndpointClient) Hooks() []Hook {
	return c.hooks.MetricEndpoint
}

// MetricLabelClient is a client for the MetricLabel schema.
type MetricLabelClient struct {
	config
}

// NewMetricLabelClient returns a client for the MetricLabel from the given config.
func NewMetricLabelClient(c config) *MetricLabelClient {
	return &MetricLabelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `metriclabel.Hooks(f(g(h())))`.
func (c *MetricLabelClient) Use(hooks ...Hook) {
	c.hooks.MetricLabel = append(c.hooks.MetricLabel, hooks...)
}

// Create returns a create builder for MetricLabel.
func (c *MetricLabelClient) Create() *MetricLabelCreate {
	mutation := newMetricLabelMutation(c.config, OpCreate)
	return &MetricLabelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MetricLabel entities.
func (c *MetricLabelClient) CreateBulk(builders ...*MetricLabelCreate) *MetricLabelCreateBulk {
	return &MetricLabelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MetricLabel.
func (c *MetricLabelClient) Update() *MetricLabelUpdate {
	mutation := newMetricLabelMutation(c.config, OpUpdate)
	return &MetricLabelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetricLabelClient) UpdateOne(ml *MetricLabel) *MetricLabelUpdateOne {
	mutation := newMetricLabelMutation(c.config, OpUpdateOne, withMetricLabel(ml))
	return &MetricLabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MetricLabelClient) UpdateOneID(id uint) *MetricLabelUpdateOne {
	mutation := newMetricLabelMutation(c.config, OpUpdateOne, withMetricLabelID(id))
	return &MetricLabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MetricLabel.
func (c *MetricLabelClient) Delete() *MetricLabelDelete {
	mutation := newMetricLabelMutation(c.config, OpDelete)
	return &MetricLabelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MetricLabelClient) DeleteOne(ml *MetricLabel) *MetricLabelDeleteOne {
	return c.DeleteOneID(ml.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MetricLabelClient) DeleteOneID(id uint) *MetricLabelDeleteOne {
	builder := c.Delete().Where(metriclabel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MetricLabelDeleteOne{builder}
}

// Query returns a query builder for MetricLabel.
func (c *MetricLabelClient) Query() *MetricLabelQuery {
	return &MetricLabelQuery{
		config: c.config,
	}
}

// Get returns a MetricLabel entity by its id.
func (c *MetricLabelClient) Get(ctx context.Context, id uint) (*MetricLabel, error) {
	return c.Query().Where(metriclabel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetricLabelClient) GetX(ctx context.Context, id uint) *MetricLabel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetrics queries the metrics edge of a MetricLabel.
func (c *MetricLabelClient) QueryMetrics(ml *MetricLabel) *MetricQuery {
	query := &MetricQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ml.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(metriclabel.Table, metriclabel.FieldID, id),
			sqlgraph.To(metric.Table, metric.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, metriclabel.MetricsTable, metriclabel.MetricsColumn),
		)
		fromV = sqlgraph.Neighbors(ml.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a MetricLabel.
func (c *MetricLabelClient) QueryEvents(ml *MetricLabel) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ml.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(metriclabel.Table, metriclabel.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, metriclabel.EventsTable, metriclabel.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(ml.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MetricLabelClient) Hooks() []Hook {
	return c.hooks.MetricLabel
}

// MetricNameClient is a client for the MetricName schema.
type MetricNameClient struct {
	config
}

// NewMetricNameClient returns a client for the MetricName from the given config.
func NewMetricNameClient(c config) *MetricNameClient {
	return &MetricNameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `metricname.Hooks(f(g(h())))`.
func (c *MetricNameClient) Use(hooks ...Hook) {
	c.hooks.MetricName = append(c.hooks.MetricName, hooks...)
}

// Create returns a create builder for MetricName.
func (c *MetricNameClient) Create() *MetricNameCreate {
	mutation := newMetricNameMutation(c.config, OpCreate)
	return &MetricNameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MetricName entities.
func (c *MetricNameClient) CreateBulk(builders ...*MetricNameCreate) *MetricNameCreateBulk {
	return &MetricNameCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MetricName.
func (c *MetricNameClient) Update() *MetricNameUpdate {
	mutation := newMetricNameMutation(c.config, OpUpdate)
	return &MetricNameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetricNameClient) UpdateOne(mn *MetricName) *MetricNameUpdateOne {
	mutation := newMetricNameMutation(c.config, OpUpdateOne, withMetricName(mn))
	return &MetricNameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MetricNameClient) UpdateOneID(id uint) *MetricNameUpdateOne {
	mutation := newMetricNameMutation(c.config, OpUpdateOne, withMetricNameID(id))
	return &MetricNameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MetricName.
func (c *MetricNameClient) Delete() *MetricNameDelete {
	mutation := newMetricNameMutation(c.config, OpDelete)
	return &MetricNameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MetricNameClient) DeleteOne(mn *MetricName) *MetricNameDeleteOne {
	return c.DeleteOneID(mn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MetricNameClient) DeleteOneID(id uint) *MetricNameDeleteOne {
	builder := c.Delete().Where(metricname.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MetricNameDeleteOne{builder}
}

// Query returns a query builder for MetricName.
func (c *MetricNameClient) Query() *MetricNameQuery {
	return &MetricNameQuery{
		config: c.config,
	}
}

// Get returns a MetricName entity by its id.
func (c *MetricNameClient) Get(ctx context.Context, id uint) (*MetricName, error) {
	return c.Query().Where(metricname.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetricNameClient) GetX(ctx context.Context, id uint) *MetricName {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetrics queries the metrics edge of a MetricName.
func (c *MetricNameClient) QueryMetrics(mn *MetricName) *MetricQuery {
	query := &MetricQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(metricname.Table, metricname.FieldID, id),
			sqlgraph.To(metric.Table, metric.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, metricname.MetricsTable, metricname.MetricsColumn),
		)
		fromV = sqlgraph.Neighbors(mn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a MetricName.
func (c *MetricNameClient) QueryEvents(mn *MetricName) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(metricname.Table, metricname.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, metricname.EventsTable, metricname.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(mn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MetricNameClient) Hooks() []Hook {
	return c.hooks.MetricName
}

// MetricTypeClient is a client for the MetricType schema.
type MetricTypeClient struct {
	config
}

// NewMetricTypeClient returns a client for the MetricType from the given config.
func NewMetricTypeClient(c config) *MetricTypeClient {
	return &MetricTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `metrictype.Hooks(f(g(h())))`.
func (c *MetricTypeClient) Use(hooks ...Hook) {
	c.hooks.MetricType = append(c.hooks.MetricType, hooks...)
}

// Create returns a create builder for MetricType.
func (c *MetricTypeClient) Create() *MetricTypeCreate {
	mutation := newMetricTypeMutation(c.config, OpCreate)
	return &MetricTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MetricType entities.
func (c *MetricTypeClient) CreateBulk(builders ...*MetricTypeCreate) *MetricTypeCreateBulk {
	return &MetricTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MetricType.
func (c *MetricTypeClient) Update() *MetricTypeUpdate {
	mutation := newMetricTypeMutation(c.config, OpUpdate)
	return &MetricTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetricTypeClient) UpdateOne(mt *MetricType) *MetricTypeUpdateOne {
	mutation := newMetricTypeMutation(c.config, OpUpdateOne, withMetricType(mt))
	return &MetricTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MetricTypeClient) UpdateOneID(id uint) *MetricTypeUpdateOne {
	mutation := newMetricTypeMutation(c.config, OpUpdateOne, withMetricTypeID(id))
	return &MetricTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MetricType.
func (c *MetricTypeClient) Delete() *MetricTypeDelete {
	mutation := newMetricTypeMutation(c.config, OpDelete)
	return &MetricTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MetricTypeClient) DeleteOne(mt *MetricType) *MetricTypeDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MetricTypeClient) DeleteOneID(id uint) *MetricTypeDeleteOne {
	builder := c.Delete().Where(metrictype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MetricTypeDeleteOne{builder}
}

// Query returns a query builder for MetricType.
func (c *MetricTypeClient) Query() *MetricTypeQuery {
	return &MetricTypeQuery{
		config: c.config,
	}
}

// Get returns a MetricType entity by its id.
func (c *MetricTypeClient) Get(ctx context.Context, id uint) (*MetricType, error) {
	return c.Query().Where(metrictype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetricTypeClient) GetX(ctx context.Context, id uint) *MetricType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetricNames queries the metricNames edge of a MetricType.
func (c *MetricTypeClient) QueryMetricNames(mt *MetricType) *MetricNameQuery {
	query := &MetricNameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(metrictype.Table, metrictype.FieldID, id),
			sqlgraph.To(metricname.Table, metricname.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, metrictype.MetricNamesTable, metrictype.MetricNamesColumn),
		)
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MetricTypeClient) Hooks() []Hook {
	return c.hooks.MetricType
}

// NodeClient is a client for the Node schema.
type NodeClient struct {
	config
}

// NewNodeClient returns a client for the Node from the given config.
func NewNodeClient(c config) *NodeClient {
	return &NodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `node.Hooks(f(g(h())))`.
func (c *NodeClient) Use(hooks ...Hook) {
	c.hooks.Node = append(c.hooks.Node, hooks...)
}

// Create returns a create builder for Node.
func (c *NodeClient) Create() *NodeCreate {
	mutation := newNodeMutation(c.config, OpCreate)
	return &NodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Node entities.
func (c *NodeClient) CreateBulk(builders ...*NodeCreate) *NodeCreateBulk {
	return &NodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Node.
func (c *NodeClient) Update() *NodeUpdate {
	mutation := newNodeMutation(c.config, OpUpdate)
	return &NodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NodeClient) UpdateOne(n *Node) *NodeUpdateOne {
	mutation := newNodeMutation(c.config, OpUpdateOne, withNode(n))
	return &NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NodeClient) UpdateOneID(id uint) *NodeUpdateOne {
	mutation := newNodeMutation(c.config, OpUpdateOne, withNodeID(id))
	return &NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Node.
func (c *NodeClient) Delete() *NodeDelete {
	mutation := newNodeMutation(c.config, OpDelete)
	return &NodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NodeClient) DeleteOne(n *Node) *NodeDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NodeClient) DeleteOneID(id uint) *NodeDeleteOne {
	builder := c.Delete().Where(node.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NodeDeleteOne{builder}
}

// Query returns a query builder for Node.
func (c *NodeClient) Query() *NodeQuery {
	return &NodeQuery{
		config: c.config,
	}
}

// Get returns a Node entity by its id.
func (c *NodeClient) Get(ctx context.Context, id uint) (*Node, error) {
	return c.Query().Where(node.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NodeClient) GetX(ctx context.Context, id uint) *Node {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContainers queries the containers edge of a Node.
func (c *NodeClient) QueryContainers(n *Node) *ContainerQuery {
	query := &ContainerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(node.Table, node.FieldID, id),
			sqlgraph.To(container.Table, container.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, node.ContainersTable, node.ContainersColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProcess queries the process edge of a Node.
func (c *NodeClient) QueryProcess(n *Node) *ProcesQuery {
	query := &ProcesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(node.Table, node.FieldID, id),
			sqlgraph.To(proces.Table, proces.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, node.ProcessTable, node.ProcessColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NodeClient) Hooks() []Hook {
	return c.hooks.Node
}

// ProcesClient is a client for the Proces schema.
type ProcesClient struct {
	config
}

// NewProcesClient returns a client for the Proces from the given config.
func NewProcesClient(c config) *ProcesClient {
	return &ProcesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proces.Hooks(f(g(h())))`.
func (c *ProcesClient) Use(hooks ...Hook) {
	c.hooks.Proces = append(c.hooks.Proces, hooks...)
}

// Create returns a create builder for Proces.
func (c *ProcesClient) Create() *ProcesCreate {
	mutation := newProcesMutation(c.config, OpCreate)
	return &ProcesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Proces entities.
func (c *ProcesClient) CreateBulk(builders ...*ProcesCreate) *ProcesCreateBulk {
	return &ProcesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Proces.
func (c *ProcesClient) Update() *ProcesUpdate {
	mutation := newProcesMutation(c.config, OpUpdate)
	return &ProcesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcesClient) UpdateOne(pr *Proces) *ProcesUpdateOne {
	mutation := newProcesMutation(c.config, OpUpdateOne, withProces(pr))
	return &ProcesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcesClient) UpdateOneID(id uint) *ProcesUpdateOne {
	mutation := newProcesMutation(c.config, OpUpdateOne, withProcesID(id))
	return &ProcesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Proces.
func (c *ProcesClient) Delete() *ProcesDelete {
	mutation := newProcesMutation(c.config, OpDelete)
	return &ProcesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProcesClient) DeleteOne(pr *Proces) *ProcesDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProcesClient) DeleteOneID(id uint) *ProcesDeleteOne {
	builder := c.Delete().Where(proces.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcesDeleteOne{builder}
}

// Query returns a query builder for Proces.
func (c *ProcesClient) Query() *ProcesQuery {
	return &ProcesQuery{
		config: c.config,
	}
}

// Get returns a Proces entity by its id.
func (c *ProcesClient) Get(ctx context.Context, id uint) (*Proces, error) {
	return c.Query().Where(proces.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcesClient) GetX(ctx context.Context, id uint) *Proces {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcesClient) Hooks() []Hook {
	return c.hooks.Proces
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Create returns a create builder for Setting.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id uint) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SettingClient) DeleteOneID(id uint) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id uint) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id uint) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	return c.hooks.Setting
}
