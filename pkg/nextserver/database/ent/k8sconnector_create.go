// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sconnector"
)

// K8sConnectorCreate is the builder for creating a K8sConnector entity.
type K8sConnectorCreate struct {
	config
	mutation *K8sConnectorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (kcc *K8sConnectorCreate) SetCreatedAt(t time.Time) *K8sConnectorCreate {
	kcc.mutation.SetCreatedAt(t)
	return kcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kcc *K8sConnectorCreate) SetNillableCreatedAt(t *time.Time) *K8sConnectorCreate {
	if t != nil {
		kcc.SetCreatedAt(*t)
	}
	return kcc
}

// SetUpdatedAt sets the "updated_at" field.
func (kcc *K8sConnectorCreate) SetUpdatedAt(t time.Time) *K8sConnectorCreate {
	kcc.mutation.SetUpdatedAt(t)
	return kcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kcc *K8sConnectorCreate) SetNillableUpdatedAt(t *time.Time) *K8sConnectorCreate {
	if t != nil {
		kcc.SetUpdatedAt(*t)
	}
	return kcc
}

// SetDeletedAt sets the "deleted_at" field.
func (kcc *K8sConnectorCreate) SetDeletedAt(t time.Time) *K8sConnectorCreate {
	kcc.mutation.SetDeletedAt(t)
	return kcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kcc *K8sConnectorCreate) SetNillableDeletedAt(t *time.Time) *K8sConnectorCreate {
	if t != nil {
		kcc.SetDeletedAt(*t)
	}
	return kcc
}

// SetName sets the "name" field.
func (kcc *K8sConnectorCreate) SetName(s string) *K8sConnectorCreate {
	kcc.mutation.SetName(s)
	return kcc
}

// SetStatus sets the "status" field.
func (kcc *K8sConnectorCreate) SetStatus(s string) *K8sConnectorCreate {
	kcc.mutation.SetStatus(s)
	return kcc
}

// SetMethod sets the "method" field.
func (kcc *K8sConnectorCreate) SetMethod(s string) *K8sConnectorCreate {
	kcc.mutation.SetMethod(s)
	return kcc
}

// SetInCluster sets the "inCluster" field.
func (kcc *K8sConnectorCreate) SetInCluster(b bool) *K8sConnectorCreate {
	kcc.mutation.SetInCluster(b)
	return kcc
}

// SetBearerToken sets the "bearerToken" field.
func (kcc *K8sConnectorCreate) SetBearerToken(s string) *K8sConnectorCreate {
	kcc.mutation.SetBearerToken(s)
	return kcc
}

// SetKubeConfig sets the "kubeConfig" field.
func (kcc *K8sConnectorCreate) SetKubeConfig(s string) *K8sConnectorCreate {
	kcc.mutation.SetKubeConfig(s)
	return kcc
}

// SetID sets the "id" field.
func (kcc *K8sConnectorCreate) SetID(u uint) *K8sConnectorCreate {
	kcc.mutation.SetID(u)
	return kcc
}

// Mutation returns the K8sConnectorMutation object of the builder.
func (kcc *K8sConnectorCreate) Mutation() *K8sConnectorMutation {
	return kcc.mutation
}

// Save creates the K8sConnector in the database.
func (kcc *K8sConnectorCreate) Save(ctx context.Context) (*K8sConnector, error) {
	var (
		err  error
		node *K8sConnector
	)
	kcc.defaults()
	if len(kcc.hooks) == 0 {
		if err = kcc.check(); err != nil {
			return nil, err
		}
		node, err = kcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sConnectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kcc.check(); err != nil {
				return nil, err
			}
			kcc.mutation = mutation
			if node, err = kcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(kcc.hooks) - 1; i >= 0; i-- {
			if kcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kcc *K8sConnectorCreate) SaveX(ctx context.Context) *K8sConnector {
	v, err := kcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kcc *K8sConnectorCreate) Exec(ctx context.Context) error {
	_, err := kcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcc *K8sConnectorCreate) ExecX(ctx context.Context) {
	if err := kcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcc *K8sConnectorCreate) defaults() {
	if _, ok := kcc.mutation.CreatedAt(); !ok {
		v := k8sconnector.DefaultCreatedAt()
		kcc.mutation.SetCreatedAt(v)
	}
	if _, ok := kcc.mutation.UpdatedAt(); !ok {
		v := k8sconnector.DefaultUpdatedAt()
		kcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := kcc.mutation.DeletedAt(); !ok {
		v := k8sconnector.DefaultDeletedAt()
		kcc.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcc *K8sConnectorCreate) check() error {
	if _, ok := kcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := kcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := kcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "deleted_at"`)}
	}
	if _, ok := kcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := kcc.mutation.Name(); ok {
		if err := k8sconnector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := kcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if v, ok := kcc.mutation.Status(); ok {
		if err := k8sconnector.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "status": %w`, err)}
		}
	}
	if _, ok := kcc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "method"`)}
	}
	if v, ok := kcc.mutation.Method(); ok {
		if err := k8sconnector.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "method": %w`, err)}
		}
	}
	if _, ok := kcc.mutation.InCluster(); !ok {
		return &ValidationError{Name: "inCluster", err: errors.New(`ent: missing required field "inCluster"`)}
	}
	if _, ok := kcc.mutation.BearerToken(); !ok {
		return &ValidationError{Name: "bearerToken", err: errors.New(`ent: missing required field "bearerToken"`)}
	}
	if _, ok := kcc.mutation.KubeConfig(); !ok {
		return &ValidationError{Name: "kubeConfig", err: errors.New(`ent: missing required field "kubeConfig"`)}
	}
	return nil
}

func (kcc *K8sConnectorCreate) sqlSave(ctx context.Context) (*K8sConnector, error) {
	_node, _spec := kcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	return _node, nil
}

func (kcc *K8sConnectorCreate) createSpec() (*K8sConnector, *sqlgraph.CreateSpec) {
	var (
		_node = &K8sConnector{config: kcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: k8sconnector.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sconnector.FieldID,
			},
		}
	)
	if id, ok := kcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := kcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sconnector.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := kcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sconnector.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := kcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sconnector.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := kcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldName,
		})
		_node.Name = value
	}
	if value, ok := kcc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := kcc.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := kcc.mutation.InCluster(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: k8sconnector.FieldInCluster,
		})
		_node.InCluster = value
	}
	if value, ok := kcc.mutation.BearerToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldBearerToken,
		})
		_node.BearerToken = value
	}
	if value, ok := kcc.mutation.KubeConfig(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldKubeConfig,
		})
		_node.KubeConfig = value
	}
	return _node, _spec
}

// K8sConnectorCreateBulk is the builder for creating many K8sConnector entities in bulk.
type K8sConnectorCreateBulk struct {
	config
	builders []*K8sConnectorCreate
}

// Save creates the K8sConnector entities in the database.
func (kccb *K8sConnectorCreateBulk) Save(ctx context.Context) ([]*K8sConnector, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kccb.builders))
	nodes := make([]*K8sConnector, len(kccb.builders))
	mutators := make([]Mutator, len(kccb.builders))
	for i := range kccb.builders {
		func(i int, root context.Context) {
			builder := kccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*K8sConnectorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kccb *K8sConnectorCreateBulk) SaveX(ctx context.Context) []*K8sConnector {
	v, err := kccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kccb *K8sConnectorCreateBulk) Exec(ctx context.Context) error {
	_, err := kccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kccb *K8sConnectorCreateBulk) ExecX(ctx context.Context) {
	if err := kccb.Exec(ctx); err != nil {
		panic(err)
	}
}
