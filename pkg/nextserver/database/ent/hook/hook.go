// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent"
)

// The AgentFunc type is an adapter to allow the use of ordinary
// function as Agent mutator.
type AgentFunc func(context.Context, *ent.AgentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AgentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AgentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AgentMutation", m)
	}
	return f(ctx, mv)
}

// The ClusterFunc type is an adapter to allow the use of ordinary
// function as Cluster mutator.
type ClusterFunc func(context.Context, *ent.ClusterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ClusterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ClusterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ClusterMutation", m)
	}
	return f(ctx, mv)
}

// The ContainerFunc type is an adapter to allow the use of ordinary
// function as Container mutator.
type ContainerFunc func(context.Context, *ent.ContainerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContainerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ContainerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContainerMutation", m)
	}
	return f(ctx, mv)
}

// The EventFunc type is an adapter to allow the use of ordinary
// function as Event mutator.
type EventFunc func(context.Context, *ent.EventMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EventFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EventMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EventMutation", m)
	}
	return f(ctx, mv)
}

// The IncidentBasicRuleFunc type is an adapter to allow the use of ordinary
// function as IncidentBasicRule mutator.
type IncidentBasicRuleFunc func(context.Context, *ent.IncidentBasicRuleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f IncidentBasicRuleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.IncidentBasicRuleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.IncidentBasicRuleMutation", m)
	}
	return f(ctx, mv)
}

// The K8sClusterFunc type is an adapter to allow the use of ordinary
// function as K8sCluster mutator.
type K8sClusterFunc func(context.Context, *ent.K8sClusterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sClusterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sClusterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sClusterMutation", m)
	}
	return f(ctx, mv)
}

// The K8sConnectorFunc type is an adapter to allow the use of ordinary
// function as K8sConnector mutator.
type K8sConnectorFunc func(context.Context, *ent.K8sConnectorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sConnectorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sConnectorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sConnectorMutation", m)
	}
	return f(ctx, mv)
}

// The K8sContainerFunc type is an adapter to allow the use of ordinary
// function as K8sContainer mutator.
type K8sContainerFunc func(context.Context, *ent.K8sContainerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sContainerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sContainerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sContainerMutation", m)
	}
	return f(ctx, mv)
}

// The K8sDaemonSetFunc type is an adapter to allow the use of ordinary
// function as K8sDaemonSet mutator.
type K8sDaemonSetFunc func(context.Context, *ent.K8sDaemonSetMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sDaemonSetFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sDaemonSetMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sDaemonSetMutation", m)
	}
	return f(ctx, mv)
}

// The K8sDeploymentFunc type is an adapter to allow the use of ordinary
// function as K8sDeployment mutator.
type K8sDeploymentFunc func(context.Context, *ent.K8sDeploymentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sDeploymentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sDeploymentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sDeploymentMutation", m)
	}
	return f(ctx, mv)
}

// The K8sEventFunc type is an adapter to allow the use of ordinary
// function as K8sEvent mutator.
type K8sEventFunc func(context.Context, *ent.K8sEventMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sEventFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sEventMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sEventMutation", m)
	}
	return f(ctx, mv)
}

// The K8sLabelFunc type is an adapter to allow the use of ordinary
// function as K8sLabel mutator.
type K8sLabelFunc func(context.Context, *ent.K8sLabelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sLabelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sLabelMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sLabelMutation", m)
	}
	return f(ctx, mv)
}

// The K8sMetricFunc type is an adapter to allow the use of ordinary
// function as K8sMetric mutator.
type K8sMetricFunc func(context.Context, *ent.K8sMetricMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sMetricFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sMetricMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sMetricMutation", m)
	}
	return f(ctx, mv)
}

// The K8sNamespaceFunc type is an adapter to allow the use of ordinary
// function as K8sNamespace mutator.
type K8sNamespaceFunc func(context.Context, *ent.K8sNamespaceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sNamespaceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sNamespaceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sNamespaceMutation", m)
	}
	return f(ctx, mv)
}

// The K8sNodeFunc type is an adapter to allow the use of ordinary
// function as K8sNode mutator.
type K8sNodeFunc func(context.Context, *ent.K8sNodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sNodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sNodeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sNodeMutation", m)
	}
	return f(ctx, mv)
}

// The K8sObjectFunc type is an adapter to allow the use of ordinary
// function as K8sObject mutator.
type K8sObjectFunc func(context.Context, *ent.K8sObjectMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sObjectFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sObjectMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sObjectMutation", m)
	}
	return f(ctx, mv)
}

// The K8sObjectTagFunc type is an adapter to allow the use of ordinary
// function as K8sObjectTag mutator.
type K8sObjectTagFunc func(context.Context, *ent.K8sObjectTagMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sObjectTagFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sObjectTagMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sObjectTagMutation", m)
	}
	return f(ctx, mv)
}

// The K8sPodFunc type is an adapter to allow the use of ordinary
// function as K8sPod mutator.
type K8sPodFunc func(context.Context, *ent.K8sPodMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sPodFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sPodMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sPodMutation", m)
	}
	return f(ctx, mv)
}

// The K8sReplicaSetFunc type is an adapter to allow the use of ordinary
// function as K8sReplicaSet mutator.
type K8sReplicaSetFunc func(context.Context, *ent.K8sReplicaSetMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sReplicaSetFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sReplicaSetMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sReplicaSetMutation", m)
	}
	return f(ctx, mv)
}

// The K8sStatefulSetFunc type is an adapter to allow the use of ordinary
// function as K8sStatefulSet mutator.
type K8sStatefulSetFunc func(context.Context, *ent.K8sStatefulSetMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f K8sStatefulSetFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.K8sStatefulSetMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.K8sStatefulSetMutation", m)
	}
	return f(ctx, mv)
}

// The MetricFunc type is an adapter to allow the use of ordinary
// function as Metric mutator.
type MetricFunc func(context.Context, *ent.MetricMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MetricFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MetricMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MetricMutation", m)
	}
	return f(ctx, mv)
}

// The MetricEndpointFunc type is an adapter to allow the use of ordinary
// function as MetricEndpoint mutator.
type MetricEndpointFunc func(context.Context, *ent.MetricEndpointMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MetricEndpointFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MetricEndpointMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MetricEndpointMutation", m)
	}
	return f(ctx, mv)
}

// The MetricLabelFunc type is an adapter to allow the use of ordinary
// function as MetricLabel mutator.
type MetricLabelFunc func(context.Context, *ent.MetricLabelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MetricLabelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MetricLabelMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MetricLabelMutation", m)
	}
	return f(ctx, mv)
}

// The MetricNameFunc type is an adapter to allow the use of ordinary
// function as MetricName mutator.
type MetricNameFunc func(context.Context, *ent.MetricNameMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MetricNameFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MetricNameMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MetricNameMutation", m)
	}
	return f(ctx, mv)
}

// The MetricTypeFunc type is an adapter to allow the use of ordinary
// function as MetricType mutator.
type MetricTypeFunc func(context.Context, *ent.MetricTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MetricTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MetricTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MetricTypeMutation", m)
	}
	return f(ctx, mv)
}

// The NodeFunc type is an adapter to allow the use of ordinary
// function as Node mutator.
type NodeFunc func(context.Context, *ent.NodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NodeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NodeMutation", m)
	}
	return f(ctx, mv)
}

// The ProcesFunc type is an adapter to allow the use of ordinary
// function as Proces mutator.
type ProcesFunc func(context.Context, *ent.ProcesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProcesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProcesMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProcesMutation", m)
	}
	return f(ctx, mv)
}

// The SettingFunc type is an adapter to allow the use of ordinary
// function as Setting mutator.
type SettingFunc func(context.Context, *ent.SettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SettingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SettingMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
