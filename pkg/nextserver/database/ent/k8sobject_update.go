// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sobject"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// K8sObjectUpdate is the builder for updating K8sObject entities.
type K8sObjectUpdate struct {
	config
	hooks    []Hook
	mutation *K8sObjectMutation
}

// Where appends a list predicates to the K8sObjectUpdate builder.
func (kou *K8sObjectUpdate) Where(ps ...predicate.K8sObject) *K8sObjectUpdate {
	kou.mutation.Where(ps...)
	return kou
}

// SetUpdatedAt sets the "updated_at" field.
func (kou *K8sObjectUpdate) SetUpdatedAt(t time.Time) *K8sObjectUpdate {
	kou.mutation.SetUpdatedAt(t)
	return kou
}

// SetDeletedAt sets the "deleted_at" field.
func (kou *K8sObjectUpdate) SetDeletedAt(t time.Time) *K8sObjectUpdate {
	kou.mutation.SetDeletedAt(t)
	return kou
}

// SetK8sClusterId sets the "k8sClusterId" field.
func (kou *K8sObjectUpdate) SetK8sClusterId(u uint) *K8sObjectUpdate {
	kou.mutation.ResetK8sClusterId()
	kou.mutation.SetK8sClusterId(u)
	return kou
}

// AddK8sClusterId adds u to the "k8sClusterId" field.
func (kou *K8sObjectUpdate) AddK8sClusterId(u uint) *K8sObjectUpdate {
	kou.mutation.AddK8sClusterId(u)
	return kou
}

// SetApiVersion sets the "apiVersion" field.
func (kou *K8sObjectUpdate) SetApiVersion(s string) *K8sObjectUpdate {
	kou.mutation.SetApiVersion(s)
	return kou
}

// SetKind sets the "kind" field.
func (kou *K8sObjectUpdate) SetKind(s string) *K8sObjectUpdate {
	kou.mutation.SetKind(s)
	return kou
}

// SetName sets the "name" field.
func (kou *K8sObjectUpdate) SetName(s string) *K8sObjectUpdate {
	kou.mutation.SetName(s)
	return kou
}

// SetMetadata sets the "metadata" field.
func (kou *K8sObjectUpdate) SetMetadata(s []string) *K8sObjectUpdate {
	kou.mutation.SetMetadata(s)
	return kou
}

// SetSpec sets the "spec" field.
func (kou *K8sObjectUpdate) SetSpec(s []string) *K8sObjectUpdate {
	kou.mutation.SetSpec(s)
	return kou
}

// SetStatus sets the "status" field.
func (kou *K8sObjectUpdate) SetStatus(s []string) *K8sObjectUpdate {
	kou.mutation.SetStatus(s)
	return kou
}

// Mutation returns the K8sObjectMutation object of the builder.
func (kou *K8sObjectUpdate) Mutation() *K8sObjectMutation {
	return kou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kou *K8sObjectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kou.defaults()
	if len(kou.hooks) == 0 {
		if err = kou.check(); err != nil {
			return 0, err
		}
		affected, err = kou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sObjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kou.check(); err != nil {
				return 0, err
			}
			kou.mutation = mutation
			affected, err = kou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kou.hooks) - 1; i >= 0; i-- {
			if kou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kou *K8sObjectUpdate) SaveX(ctx context.Context) int {
	affected, err := kou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kou *K8sObjectUpdate) Exec(ctx context.Context) error {
	_, err := kou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kou *K8sObjectUpdate) ExecX(ctx context.Context) {
	if err := kou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kou *K8sObjectUpdate) defaults() {
	if _, ok := kou.mutation.UpdatedAt(); !ok {
		v := k8sobject.UpdateDefaultUpdatedAt()
		kou.mutation.SetUpdatedAt(v)
	}
	if _, ok := kou.mutation.DeletedAt(); !ok {
		v := k8sobject.UpdateDefaultDeletedAt()
		kou.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kou *K8sObjectUpdate) check() error {
	if v, ok := kou.mutation.ApiVersion(); ok {
		if err := k8sobject.ApiVersionValidator(v); err != nil {
			return &ValidationError{Name: "apiVersion", err: fmt.Errorf("ent: validator failed for field \"apiVersion\": %w", err)}
		}
	}
	if v, ok := kou.mutation.Kind(); ok {
		if err := k8sobject.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf("ent: validator failed for field \"kind\": %w", err)}
		}
	}
	if v, ok := kou.mutation.Name(); ok {
		if err := k8sobject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (kou *K8sObjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sobject.Table,
			Columns: k8sobject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sobject.FieldID,
			},
		},
	}
	if ps := kou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobject.FieldUpdatedAt,
		})
	}
	if value, ok := kou.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobject.FieldDeletedAt,
		})
	}
	if value, ok := kou.mutation.K8sClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobject.FieldK8sClusterId,
		})
	}
	if value, ok := kou.mutation.AddedK8sClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobject.FieldK8sClusterId,
		})
	}
	if value, ok := kou.mutation.ApiVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sobject.FieldApiVersion,
		})
	}
	if value, ok := kou.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sobject.FieldKind,
		})
	}
	if value, ok := kou.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sobject.FieldName,
		})
	}
	if value, ok := kou.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: k8sobject.FieldMetadata,
		})
	}
	if value, ok := kou.mutation.Spec(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: k8sobject.FieldSpec,
		})
	}
	if value, ok := kou.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: k8sobject.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8sobject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// K8sObjectUpdateOne is the builder for updating a single K8sObject entity.
type K8sObjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *K8sObjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (kouo *K8sObjectUpdateOne) SetUpdatedAt(t time.Time) *K8sObjectUpdateOne {
	kouo.mutation.SetUpdatedAt(t)
	return kouo
}

// SetDeletedAt sets the "deleted_at" field.
func (kouo *K8sObjectUpdateOne) SetDeletedAt(t time.Time) *K8sObjectUpdateOne {
	kouo.mutation.SetDeletedAt(t)
	return kouo
}

// SetK8sClusterId sets the "k8sClusterId" field.
func (kouo *K8sObjectUpdateOne) SetK8sClusterId(u uint) *K8sObjectUpdateOne {
	kouo.mutation.ResetK8sClusterId()
	kouo.mutation.SetK8sClusterId(u)
	return kouo
}

// AddK8sClusterId adds u to the "k8sClusterId" field.
func (kouo *K8sObjectUpdateOne) AddK8sClusterId(u uint) *K8sObjectUpdateOne {
	kouo.mutation.AddK8sClusterId(u)
	return kouo
}

// SetApiVersion sets the "apiVersion" field.
func (kouo *K8sObjectUpdateOne) SetApiVersion(s string) *K8sObjectUpdateOne {
	kouo.mutation.SetApiVersion(s)
	return kouo
}

// SetKind sets the "kind" field.
func (kouo *K8sObjectUpdateOne) SetKind(s string) *K8sObjectUpdateOne {
	kouo.mutation.SetKind(s)
	return kouo
}

// SetName sets the "name" field.
func (kouo *K8sObjectUpdateOne) SetName(s string) *K8sObjectUpdateOne {
	kouo.mutation.SetName(s)
	return kouo
}

// SetMetadata sets the "metadata" field.
func (kouo *K8sObjectUpdateOne) SetMetadata(s []string) *K8sObjectUpdateOne {
	kouo.mutation.SetMetadata(s)
	return kouo
}

// SetSpec sets the "spec" field.
func (kouo *K8sObjectUpdateOne) SetSpec(s []string) *K8sObjectUpdateOne {
	kouo.mutation.SetSpec(s)
	return kouo
}

// SetStatus sets the "status" field.
func (kouo *K8sObjectUpdateOne) SetStatus(s []string) *K8sObjectUpdateOne {
	kouo.mutation.SetStatus(s)
	return kouo
}

// Mutation returns the K8sObjectMutation object of the builder.
func (kouo *K8sObjectUpdateOne) Mutation() *K8sObjectMutation {
	return kouo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kouo *K8sObjectUpdateOne) Select(field string, fields ...string) *K8sObjectUpdateOne {
	kouo.fields = append([]string{field}, fields...)
	return kouo
}

// Save executes the query and returns the updated K8sObject entity.
func (kouo *K8sObjectUpdateOne) Save(ctx context.Context) (*K8sObject, error) {
	var (
		err  error
		node *K8sObject
	)
	kouo.defaults()
	if len(kouo.hooks) == 0 {
		if err = kouo.check(); err != nil {
			return nil, err
		}
		node, err = kouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sObjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kouo.check(); err != nil {
				return nil, err
			}
			kouo.mutation = mutation
			node, err = kouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kouo.hooks) - 1; i >= 0; i-- {
			if kouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kouo *K8sObjectUpdateOne) SaveX(ctx context.Context) *K8sObject {
	node, err := kouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kouo *K8sObjectUpdateOne) Exec(ctx context.Context) error {
	_, err := kouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kouo *K8sObjectUpdateOne) ExecX(ctx context.Context) {
	if err := kouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kouo *K8sObjectUpdateOne) defaults() {
	if _, ok := kouo.mutation.UpdatedAt(); !ok {
		v := k8sobject.UpdateDefaultUpdatedAt()
		kouo.mutation.SetUpdatedAt(v)
	}
	if _, ok := kouo.mutation.DeletedAt(); !ok {
		v := k8sobject.UpdateDefaultDeletedAt()
		kouo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kouo *K8sObjectUpdateOne) check() error {
	if v, ok := kouo.mutation.ApiVersion(); ok {
		if err := k8sobject.ApiVersionValidator(v); err != nil {
			return &ValidationError{Name: "apiVersion", err: fmt.Errorf("ent: validator failed for field \"apiVersion\": %w", err)}
		}
	}
	if v, ok := kouo.mutation.Kind(); ok {
		if err := k8sobject.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf("ent: validator failed for field \"kind\": %w", err)}
		}
	}
	if v, ok := kouo.mutation.Name(); ok {
		if err := k8sobject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (kouo *K8sObjectUpdateOne) sqlSave(ctx context.Context) (_node *K8sObject, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sobject.Table,
			Columns: k8sobject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sobject.FieldID,
			},
		},
	}
	id, ok := kouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing K8sObject.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, k8sobject.FieldID)
		for _, f := range fields {
			if !k8sobject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != k8sobject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobject.FieldUpdatedAt,
		})
	}
	if value, ok := kouo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobject.FieldDeletedAt,
		})
	}
	if value, ok := kouo.mutation.K8sClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobject.FieldK8sClusterId,
		})
	}
	if value, ok := kouo.mutation.AddedK8sClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobject.FieldK8sClusterId,
		})
	}
	if value, ok := kouo.mutation.ApiVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sobject.FieldApiVersion,
		})
	}
	if value, ok := kouo.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sobject.FieldKind,
		})
	}
	if value, ok := kouo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sobject.FieldName,
		})
	}
	if value, ok := kouo.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: k8sobject.FieldMetadata,
		})
	}
	if value, ok := kouo.mutation.Spec(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: k8sobject.FieldSpec,
		})
	}
	if value, ok := kouo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: k8sobject.FieldStatus,
		})
	}
	_node = &K8sObject{config: kouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8sobject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
