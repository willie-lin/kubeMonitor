// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/agent"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/node"
)

// AgentCreate is the builder for creating a Agent entity.
type AgentCreate struct {
	config
	mutation *AgentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AgentCreate) SetCreatedAt(t time.Time) *AgentCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableCreatedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AgentCreate) SetUpdatedAt(t time.Time) *AgentCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableUpdatedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AgentCreate) SetDeletedAt(t time.Time) *AgentCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableDeletedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetOnline sets the "online" field.
func (ac *AgentCreate) SetOnline(b bool) *AgentCreate {
	ac.mutation.SetOnline(b)
	return ac
}

// SetVersion sets the "version" field.
func (ac *AgentCreate) SetVersion(s string) *AgentCreate {
	ac.mutation.SetVersion(s)
	return ac
}

// SetIpv4 sets the "ipv4" field.
func (ac *AgentCreate) SetIpv4(s string) *AgentCreate {
	ac.mutation.SetIpv4(s)
	return ac
}

// SetIpv6 sets the "ipv6" field.
func (ac *AgentCreate) SetIpv6(s string) *AgentCreate {
	ac.mutation.SetIpv6(s)
	return ac
}

// SetPublicIpv4 sets the "public_ipv4" field.
func (ac *AgentCreate) SetPublicIpv4(s string) *AgentCreate {
	ac.mutation.SetPublicIpv4(s)
	return ac
}

// SetPublicIpv6 sets the "public_ipv6" field.
func (ac *AgentCreate) SetPublicIpv6(s string) *AgentCreate {
	ac.mutation.SetPublicIpv6(s)
	return ac
}

// SetLastContact sets the "last_contact" field.
func (ac *AgentCreate) SetLastContact(t time.Time) *AgentCreate {
	ac.mutation.SetLastContact(t)
	return ac
}

// SetNillableLastContact sets the "last_contact" field if the given value is not nil.
func (ac *AgentCreate) SetNillableLastContact(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetLastContact(*t)
	}
	return ac
}

// SetDisabled sets the "disabled" field.
func (ac *AgentCreate) SetDisabled(b bool) *AgentCreate {
	ac.mutation.SetDisabled(b)
	return ac
}

// SetUUID sets the "uuid" field.
func (ac *AgentCreate) SetUUID(s string) *AgentCreate {
	ac.mutation.SetUUID(s)
	return ac
}

// SetMachineId sets the "machineId" field.
func (ac *AgentCreate) SetMachineId(s string) *AgentCreate {
	ac.mutation.SetMachineId(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AgentCreate) SetDescription(s string) *AgentCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetClusterId sets the "clusterId" field.
func (ac *AgentCreate) SetClusterId(u uint) *AgentCreate {
	ac.mutation.SetClusterId(u)
	return ac
}

// SetID sets the "id" field.
func (ac *AgentCreate) SetID(u uint) *AgentCreate {
	ac.mutation.SetID(u)
	return ac
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (ac *AgentCreate) AddNodeIDs(ids ...uint) *AgentCreate {
	ac.mutation.AddNodeIDs(ids...)
	return ac
}

// AddNodes adds the "nodes" edges to the Node entity.
func (ac *AgentCreate) AddNodes(n ...*Node) *AgentCreate {
	ids := make([]uint, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ac.AddNodeIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (ac *AgentCreate) Mutation() *AgentMutation {
	return ac.mutation
}

// Save creates the Agent in the database.
func (ac *AgentCreate) Save(ctx context.Context) (*Agent, error) {
	var (
		err  error
		node *Agent
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgentCreate) SaveX(ctx context.Context) *Agent {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AgentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AgentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AgentCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := agent.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := agent.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		v := agent.DefaultDeletedAt()
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.LastContact(); !ok {
		v := agent.DefaultLastContact()
		ac.mutation.SetLastContact(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AgentCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "deleted_at"`)}
	}
	if _, ok := ac.mutation.Online(); !ok {
		return &ValidationError{Name: "online", err: errors.New(`ent: missing required field "online"`)}
	}
	if _, ok := ac.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "version"`)}
	}
	if v, ok := ac.mutation.Version(); ok {
		if err := agent.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "version": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Ipv4(); !ok {
		return &ValidationError{Name: "ipv4", err: errors.New(`ent: missing required field "ipv4"`)}
	}
	if v, ok := ac.mutation.Ipv4(); ok {
		if err := agent.Ipv4Validator(v); err != nil {
			return &ValidationError{Name: "ipv4", err: fmt.Errorf(`ent: validator failed for field "ipv4": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Ipv6(); !ok {
		return &ValidationError{Name: "ipv6", err: errors.New(`ent: missing required field "ipv6"`)}
	}
	if v, ok := ac.mutation.Ipv6(); ok {
		if err := agent.Ipv6Validator(v); err != nil {
			return &ValidationError{Name: "ipv6", err: fmt.Errorf(`ent: validator failed for field "ipv6": %w`, err)}
		}
	}
	if _, ok := ac.mutation.PublicIpv4(); !ok {
		return &ValidationError{Name: "public_ipv4", err: errors.New(`ent: missing required field "public_ipv4"`)}
	}
	if v, ok := ac.mutation.PublicIpv4(); ok {
		if err := agent.PublicIpv4Validator(v); err != nil {
			return &ValidationError{Name: "public_ipv4", err: fmt.Errorf(`ent: validator failed for field "public_ipv4": %w`, err)}
		}
	}
	if _, ok := ac.mutation.PublicIpv6(); !ok {
		return &ValidationError{Name: "public_ipv6", err: errors.New(`ent: missing required field "public_ipv6"`)}
	}
	if v, ok := ac.mutation.PublicIpv6(); ok {
		if err := agent.PublicIpv6Validator(v); err != nil {
			return &ValidationError{Name: "public_ipv6", err: fmt.Errorf(`ent: validator failed for field "public_ipv6": %w`, err)}
		}
	}
	if _, ok := ac.mutation.LastContact(); !ok {
		return &ValidationError{Name: "last_contact", err: errors.New(`ent: missing required field "last_contact"`)}
	}
	if _, ok := ac.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "disabled"`)}
	}
	if _, ok := ac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "uuid"`)}
	}
	if v, ok := ac.mutation.UUID(); ok {
		if err := agent.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf(`ent: validator failed for field "uuid": %w`, err)}
		}
	}
	if _, ok := ac.mutation.MachineId(); !ok {
		return &ValidationError{Name: "machineId", err: errors.New(`ent: missing required field "machineId"`)}
	}
	if v, ok := ac.mutation.MachineId(); ok {
		if err := agent.MachineIdValidator(v); err != nil {
			return &ValidationError{Name: "machineId", err: fmt.Errorf(`ent: validator failed for field "machineId": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "description"`)}
	}
	if _, ok := ac.mutation.ClusterId(); !ok {
		return &ValidationError{Name: "clusterId", err: errors.New(`ent: missing required field "clusterId"`)}
	}
	return nil
}

func (ac *AgentCreate) sqlSave(ctx context.Context) (*Agent, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	return _node, nil
}

func (ac *AgentCreate) createSpec() (*Agent, *sqlgraph.CreateSpec) {
	var (
		_node = &Agent{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: agent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: agent.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.Online(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: agent.FieldOnline,
		})
		_node.Online = value
	}
	if value, ok := ac.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := ac.mutation.Ipv4(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldIpv4,
		})
		_node.Ipv4 = value
	}
	if value, ok := ac.mutation.Ipv6(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldIpv6,
		})
		_node.Ipv6 = value
	}
	if value, ok := ac.mutation.PublicIpv4(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldPublicIpv4,
		})
		_node.PublicIpv4 = value
	}
	if value, ok := ac.mutation.PublicIpv6(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldPublicIpv6,
		})
		_node.PublicIpv6 = value
	}
	if value, ok := ac.mutation.LastContact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldLastContact,
		})
		_node.LastContact = value
	}
	if value, ok := ac.mutation.Disabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: agent.FieldDisabled,
		})
		_node.Disabled = value
	}
	if value, ok := ac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := ac.mutation.MachineId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldMachineId,
		})
		_node.MachineId = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ac.mutation.ClusterId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: agent.FieldClusterId,
		})
		_node.ClusterId = value
	}
	if nodes := ac.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NodesTable,
			Columns: []string{agent.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AgentCreateBulk is the builder for creating many Agent entities in bulk.
type AgentCreateBulk struct {
	config
	builders []*AgentCreate
}

// Save creates the Agent entities in the database.
func (acb *AgentCreateBulk) Save(ctx context.Context) ([]*Agent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Agent, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AgentCreateBulk) SaveX(ctx context.Context) []*Agent {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AgentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AgentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
