// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8scontainer"
)

// K8sContainerCreate is the builder for creating a K8sContainer entity.
type K8sContainerCreate struct {
	config
	mutation *K8sContainerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (kcc *K8sContainerCreate) SetCreatedAt(t time.Time) *K8sContainerCreate {
	kcc.mutation.SetCreatedAt(t)
	return kcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kcc *K8sContainerCreate) SetNillableCreatedAt(t *time.Time) *K8sContainerCreate {
	if t != nil {
		kcc.SetCreatedAt(*t)
	}
	return kcc
}

// SetUpdatedAt sets the "updated_at" field.
func (kcc *K8sContainerCreate) SetUpdatedAt(t time.Time) *K8sContainerCreate {
	kcc.mutation.SetUpdatedAt(t)
	return kcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kcc *K8sContainerCreate) SetNillableUpdatedAt(t *time.Time) *K8sContainerCreate {
	if t != nil {
		kcc.SetUpdatedAt(*t)
	}
	return kcc
}

// SetDeletedAt sets the "deleted_at" field.
func (kcc *K8sContainerCreate) SetDeletedAt(t time.Time) *K8sContainerCreate {
	kcc.mutation.SetDeletedAt(t)
	return kcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kcc *K8sContainerCreate) SetNillableDeletedAt(t *time.Time) *K8sContainerCreate {
	if t != nil {
		kcc.SetDeletedAt(*t)
	}
	return kcc
}

// SetName sets the "name" field.
func (kcc *K8sContainerCreate) SetName(s string) *K8sContainerCreate {
	kcc.mutation.SetName(s)
	return kcc
}

// SetImage sets the "image" field.
func (kcc *K8sContainerCreate) SetImage(s string) *K8sContainerCreate {
	kcc.mutation.SetImage(s)
	return kcc
}

// SetContainerType sets the "containerType" field.
func (kcc *K8sContainerCreate) SetContainerType(s string) *K8sContainerCreate {
	kcc.mutation.SetContainerType(s)
	return kcc
}

// SetContainerId sets the "containerId" field.
func (kcc *K8sContainerCreate) SetContainerId(s string) *K8sContainerCreate {
	kcc.mutation.SetContainerId(s)
	return kcc
}

// SetK8sClusterId sets the "k8sClusterId" field.
func (kcc *K8sContainerCreate) SetK8sClusterId(u uint) *K8sContainerCreate {
	kcc.mutation.SetK8sClusterId(u)
	return kcc
}

// SetK8sNamespaceId sets the "k8sNamespaceId" field.
func (kcc *K8sContainerCreate) SetK8sNamespaceId(u uint) *K8sContainerCreate {
	kcc.mutation.SetK8sNamespaceId(u)
	return kcc
}

// SetK8sPodId sets the "K8sPodId" field.
func (kcc *K8sContainerCreate) SetK8sPodId(u uint) *K8sContainerCreate {
	kcc.mutation.SetK8sPodId(u)
	return kcc
}

// SetID sets the "id" field.
func (kcc *K8sContainerCreate) SetID(u uint) *K8sContainerCreate {
	kcc.mutation.SetID(u)
	return kcc
}

// Mutation returns the K8sContainerMutation object of the builder.
func (kcc *K8sContainerCreate) Mutation() *K8sContainerMutation {
	return kcc.mutation
}

// Save creates the K8sContainer in the database.
func (kcc *K8sContainerCreate) Save(ctx context.Context) (*K8sContainer, error) {
	var (
		err  error
		node *K8sContainer
	)
	kcc.defaults()
	if len(kcc.hooks) == 0 {
		if err = kcc.check(); err != nil {
			return nil, err
		}
		node, err = kcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sContainerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kcc.check(); err != nil {
				return nil, err
			}
			kcc.mutation = mutation
			if node, err = kcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(kcc.hooks) - 1; i >= 0; i-- {
			if kcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kcc *K8sContainerCreate) SaveX(ctx context.Context) *K8sContainer {
	v, err := kcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kcc *K8sContainerCreate) Exec(ctx context.Context) error {
	_, err := kcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcc *K8sContainerCreate) ExecX(ctx context.Context) {
	if err := kcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcc *K8sContainerCreate) defaults() {
	if _, ok := kcc.mutation.CreatedAt(); !ok {
		v := k8scontainer.DefaultCreatedAt()
		kcc.mutation.SetCreatedAt(v)
	}
	if _, ok := kcc.mutation.UpdatedAt(); !ok {
		v := k8scontainer.DefaultUpdatedAt()
		kcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := kcc.mutation.DeletedAt(); !ok {
		v := k8scontainer.DefaultDeletedAt()
		kcc.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcc *K8sContainerCreate) check() error {
	if _, ok := kcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := kcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := kcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "deleted_at"`)}
	}
	if _, ok := kcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := kcc.mutation.Name(); ok {
		if err := k8scontainer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := kcc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "image"`)}
	}
	if v, ok := kcc.mutation.Image(); ok {
		if err := k8scontainer.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "image": %w`, err)}
		}
	}
	if _, ok := kcc.mutation.ContainerType(); !ok {
		return &ValidationError{Name: "containerType", err: errors.New(`ent: missing required field "containerType"`)}
	}
	if v, ok := kcc.mutation.ContainerType(); ok {
		if err := k8scontainer.ContainerTypeValidator(v); err != nil {
			return &ValidationError{Name: "containerType", err: fmt.Errorf(`ent: validator failed for field "containerType": %w`, err)}
		}
	}
	if _, ok := kcc.mutation.ContainerId(); !ok {
		return &ValidationError{Name: "containerId", err: errors.New(`ent: missing required field "containerId"`)}
	}
	if v, ok := kcc.mutation.ContainerId(); ok {
		if err := k8scontainer.ContainerIdValidator(v); err != nil {
			return &ValidationError{Name: "containerId", err: fmt.Errorf(`ent: validator failed for field "containerId": %w`, err)}
		}
	}
	if _, ok := kcc.mutation.K8sClusterId(); !ok {
		return &ValidationError{Name: "k8sClusterId", err: errors.New(`ent: missing required field "k8sClusterId"`)}
	}
	if _, ok := kcc.mutation.K8sNamespaceId(); !ok {
		return &ValidationError{Name: "k8sNamespaceId", err: errors.New(`ent: missing required field "k8sNamespaceId"`)}
	}
	if _, ok := kcc.mutation.K8sPodId(); !ok {
		return &ValidationError{Name: "K8sPodId", err: errors.New(`ent: missing required field "K8sPodId"`)}
	}
	return nil
}

func (kcc *K8sContainerCreate) sqlSave(ctx context.Context) (*K8sContainer, error) {
	_node, _spec := kcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	return _node, nil
}

func (kcc *K8sContainerCreate) createSpec() (*K8sContainer, *sqlgraph.CreateSpec) {
	var (
		_node = &K8sContainer{config: kcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: k8scontainer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8scontainer.FieldID,
			},
		}
	)
	if id, ok := kcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := kcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8scontainer.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := kcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8scontainer.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := kcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8scontainer.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := kcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8scontainer.FieldName,
		})
		_node.Name = value
	}
	if value, ok := kcc.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8scontainer.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := kcc.mutation.ContainerType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8scontainer.FieldContainerType,
		})
		_node.ContainerType = value
	}
	if value, ok := kcc.mutation.ContainerId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8scontainer.FieldContainerId,
		})
		_node.ContainerId = value
	}
	if value, ok := kcc.mutation.K8sClusterId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8scontainer.FieldK8sClusterId,
		})
		_node.K8sClusterId = value
	}
	if value, ok := kcc.mutation.K8sNamespaceId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8scontainer.FieldK8sNamespaceId,
		})
		_node.K8sNamespaceId = value
	}
	if value, ok := kcc.mutation.K8sPodId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8scontainer.FieldK8sPodId,
		})
		_node.K8sPodId = value
	}
	return _node, _spec
}

// K8sContainerCreateBulk is the builder for creating many K8sContainer entities in bulk.
type K8sContainerCreateBulk struct {
	config
	builders []*K8sContainerCreate
}

// Save creates the K8sContainer entities in the database.
func (kccb *K8sContainerCreateBulk) Save(ctx context.Context) ([]*K8sContainer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kccb.builders))
	nodes := make([]*K8sContainer, len(kccb.builders))
	mutators := make([]Mutator, len(kccb.builders))
	for i := range kccb.builders {
		func(i int, root context.Context) {
			builder := kccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*K8sContainerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kccb *K8sContainerCreateBulk) SaveX(ctx context.Context) []*K8sContainer {
	v, err := kccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kccb *K8sContainerCreateBulk) Exec(ctx context.Context) error {
	_, err := kccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kccb *K8sContainerCreateBulk) ExecX(ctx context.Context) {
	if err := kccb.Exec(ctx); err != nil {
		panic(err)
	}
}
