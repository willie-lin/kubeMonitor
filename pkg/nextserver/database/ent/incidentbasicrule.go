// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/incidentbasicrule"
)

// IncidentBasicRule is the model entity for the IncidentBasicRule schema.
type IncidentBasicRule struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty"`
	// Query holds the value of the "query" field.
	Query string `json:"query,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncidentBasicRule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case incidentbasicrule.FieldID:
			values[i] = new(sql.NullInt64)
		case incidentbasicrule.FieldName, incidentbasicrule.FieldDescription, incidentbasicrule.FieldQuery:
			values[i] = new(sql.NullString)
		case incidentbasicrule.FieldCreatedAt, incidentbasicrule.FieldUpdatedAt, incidentbasicrule.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type IncidentBasicRule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncidentBasicRule fields.
func (ibr *IncidentBasicRule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incidentbasicrule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ibr.ID = uint(value.Int64)
		case incidentbasicrule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ibr.CreatedAt = value.Time
			}
		case incidentbasicrule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ibr.UpdatedAt = value.Time
			}
		case incidentbasicrule.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ibr.DeletedAt = value.Time
			}
		case incidentbasicrule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ibr.Name = value.String
			}
		case incidentbasicrule.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				ibr.Description = value.String
			}
		case incidentbasicrule.FieldQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value.Valid {
				ibr.Query = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this IncidentBasicRule.
// Note that you need to call IncidentBasicRule.Unwrap() before calling this method if this IncidentBasicRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (ibr *IncidentBasicRule) Update() *IncidentBasicRuleUpdateOne {
	return (&IncidentBasicRuleClient{config: ibr.config}).UpdateOne(ibr)
}

// Unwrap unwraps the IncidentBasicRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ibr *IncidentBasicRule) Unwrap() *IncidentBasicRule {
	tx, ok := ibr.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncidentBasicRule is not a transactional entity")
	}
	ibr.config.driver = tx.drv
	return ibr
}

// String implements the fmt.Stringer.
func (ibr *IncidentBasicRule) String() string {
	var builder strings.Builder
	builder.WriteString("IncidentBasicRule(")
	builder.WriteString(fmt.Sprintf("id=%v", ibr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ibr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ibr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(ibr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(ibr.Name)
	builder.WriteString(", Description=")
	builder.WriteString(ibr.Description)
	builder.WriteString(", query=")
	builder.WriteString(ibr.Query)
	builder.WriteByte(')')
	return builder.String()
}

// IncidentBasicRules is a parsable slice of IncidentBasicRule.
type IncidentBasicRules []*IncidentBasicRule

func (ibr IncidentBasicRules) config(cfg config) {
	for _i := range ibr {
		ibr[_i].config = cfg
	}
}
