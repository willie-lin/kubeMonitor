// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/incidentbasicrule"
)

// IncidentBasicRuleCreate is the builder for creating a IncidentBasicRule entity.
type IncidentBasicRuleCreate struct {
	config
	mutation *IncidentBasicRuleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ibrc *IncidentBasicRuleCreate) SetCreatedAt(t time.Time) *IncidentBasicRuleCreate {
	ibrc.mutation.SetCreatedAt(t)
	return ibrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ibrc *IncidentBasicRuleCreate) SetNillableCreatedAt(t *time.Time) *IncidentBasicRuleCreate {
	if t != nil {
		ibrc.SetCreatedAt(*t)
	}
	return ibrc
}

// SetUpdatedAt sets the "updated_at" field.
func (ibrc *IncidentBasicRuleCreate) SetUpdatedAt(t time.Time) *IncidentBasicRuleCreate {
	ibrc.mutation.SetUpdatedAt(t)
	return ibrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ibrc *IncidentBasicRuleCreate) SetNillableUpdatedAt(t *time.Time) *IncidentBasicRuleCreate {
	if t != nil {
		ibrc.SetUpdatedAt(*t)
	}
	return ibrc
}

// SetDeletedAt sets the "deleted_at" field.
func (ibrc *IncidentBasicRuleCreate) SetDeletedAt(t time.Time) *IncidentBasicRuleCreate {
	ibrc.mutation.SetDeletedAt(t)
	return ibrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ibrc *IncidentBasicRuleCreate) SetNillableDeletedAt(t *time.Time) *IncidentBasicRuleCreate {
	if t != nil {
		ibrc.SetDeletedAt(*t)
	}
	return ibrc
}

// SetName sets the "name" field.
func (ibrc *IncidentBasicRuleCreate) SetName(s string) *IncidentBasicRuleCreate {
	ibrc.mutation.SetName(s)
	return ibrc
}

// SetDescription sets the "Description" field.
func (ibrc *IncidentBasicRuleCreate) SetDescription(s string) *IncidentBasicRuleCreate {
	ibrc.mutation.SetDescription(s)
	return ibrc
}

// SetQuery sets the "query" field.
func (ibrc *IncidentBasicRuleCreate) SetQuery(s string) *IncidentBasicRuleCreate {
	ibrc.mutation.SetQuery(s)
	return ibrc
}

// SetID sets the "id" field.
func (ibrc *IncidentBasicRuleCreate) SetID(u uint) *IncidentBasicRuleCreate {
	ibrc.mutation.SetID(u)
	return ibrc
}

// Mutation returns the IncidentBasicRuleMutation object of the builder.
func (ibrc *IncidentBasicRuleCreate) Mutation() *IncidentBasicRuleMutation {
	return ibrc.mutation
}

// Save creates the IncidentBasicRule in the database.
func (ibrc *IncidentBasicRuleCreate) Save(ctx context.Context) (*IncidentBasicRule, error) {
	var (
		err  error
		node *IncidentBasicRule
	)
	ibrc.defaults()
	if len(ibrc.hooks) == 0 {
		if err = ibrc.check(); err != nil {
			return nil, err
		}
		node, err = ibrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IncidentBasicRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ibrc.check(); err != nil {
				return nil, err
			}
			ibrc.mutation = mutation
			if node, err = ibrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ibrc.hooks) - 1; i >= 0; i-- {
			if ibrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ibrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ibrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ibrc *IncidentBasicRuleCreate) SaveX(ctx context.Context) *IncidentBasicRule {
	v, err := ibrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ibrc *IncidentBasicRuleCreate) Exec(ctx context.Context) error {
	_, err := ibrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibrc *IncidentBasicRuleCreate) ExecX(ctx context.Context) {
	if err := ibrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ibrc *IncidentBasicRuleCreate) defaults() {
	if _, ok := ibrc.mutation.CreatedAt(); !ok {
		v := incidentbasicrule.DefaultCreatedAt()
		ibrc.mutation.SetCreatedAt(v)
	}
	if _, ok := ibrc.mutation.UpdatedAt(); !ok {
		v := incidentbasicrule.DefaultUpdatedAt()
		ibrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ibrc.mutation.DeletedAt(); !ok {
		v := incidentbasicrule.DefaultDeletedAt()
		ibrc.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibrc *IncidentBasicRuleCreate) check() error {
	if _, ok := ibrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ibrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ibrc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "deleted_at"`)}
	}
	if _, ok := ibrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := ibrc.mutation.Description(); !ok {
		return &ValidationError{Name: "Description", err: errors.New(`ent: missing required field "Description"`)}
	}
	if _, ok := ibrc.mutation.Query(); !ok {
		return &ValidationError{Name: "query", err: errors.New(`ent: missing required field "query"`)}
	}
	return nil
}

func (ibrc *IncidentBasicRuleCreate) sqlSave(ctx context.Context) (*IncidentBasicRule, error) {
	_node, _spec := ibrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ibrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	return _node, nil
}

func (ibrc *IncidentBasicRuleCreate) createSpec() (*IncidentBasicRule, *sqlgraph.CreateSpec) {
	var (
		_node = &IncidentBasicRule{config: ibrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: incidentbasicrule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: incidentbasicrule.FieldID,
			},
		}
	)
	if id, ok := ibrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ibrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: incidentbasicrule.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ibrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: incidentbasicrule.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ibrc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: incidentbasicrule.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ibrc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: incidentbasicrule.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ibrc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: incidentbasicrule.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ibrc.mutation.Query(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: incidentbasicrule.FieldQuery,
		})
		_node.Query = value
	}
	return _node, _spec
}

// IncidentBasicRuleCreateBulk is the builder for creating many IncidentBasicRule entities in bulk.
type IncidentBasicRuleCreateBulk struct {
	config
	builders []*IncidentBasicRuleCreate
}

// Save creates the IncidentBasicRule entities in the database.
func (ibrcb *IncidentBasicRuleCreateBulk) Save(ctx context.Context) ([]*IncidentBasicRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ibrcb.builders))
	nodes := make([]*IncidentBasicRule, len(ibrcb.builders))
	mutators := make([]Mutator, len(ibrcb.builders))
	for i := range ibrcb.builders {
		func(i int, root context.Context) {
			builder := ibrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentBasicRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ibrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ibrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ibrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ibrcb *IncidentBasicRuleCreateBulk) SaveX(ctx context.Context) []*IncidentBasicRule {
	v, err := ibrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ibrcb *IncidentBasicRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := ibrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibrcb *IncidentBasicRuleCreateBulk) ExecX(ctx context.Context) {
	if err := ibrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
