// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/process"
)

// ProcessCreate is the builder for creating a Process entity.
type ProcessCreate struct {
	config
	mutation *ProcessMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProcessCreate) SetCreatedAt(t time.Time) *ProcessCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableCreatedAt(t *time.Time) *ProcessCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProcessCreate) SetUpdatedAt(t time.Time) *ProcessCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableUpdatedAt(t *time.Time) *ProcessCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *ProcessCreate) SetDeletedAt(t time.Time) *ProcessCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableDeletedAt(t *time.Time) *ProcessCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProcessCreate) SetName(s string) *ProcessCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetPId sets the "pId" field.
func (pc *ProcessCreate) SetPId(i int32) *ProcessCreate {
	pc.mutation.SetPId(i)
	return pc
}

// SetCmd sets the "cmd" field.
func (pc *ProcessCreate) SetCmd(s string) *ProcessCreate {
	pc.mutation.SetCmd(s)
	return pc
}

// SetInfo sets the "info" field.
func (pc *ProcessCreate) SetInfo(s []string) *ProcessCreate {
	pc.mutation.SetInfo(s)
	return pc
}

// SetClusterId sets the "clusterId" field.
func (pc *ProcessCreate) SetClusterId(s string) *ProcessCreate {
	pc.mutation.SetClusterId(s)
	return pc
}

// SetNodeId sets the "nodeId" field.
func (pc *ProcessCreate) SetNodeId(s string) *ProcessCreate {
	pc.mutation.SetNodeId(s)
	return pc
}

// SetContainerId sets the "containerId" field.
func (pc *ProcessCreate) SetContainerId(s string) *ProcessCreate {
	pc.mutation.SetContainerId(s)
	return pc
}

// SetID sets the "id" field.
func (pc *ProcessCreate) SetID(u uint) *ProcessCreate {
	pc.mutation.SetID(u)
	return pc
}

// Mutation returns the ProcessMutation object of the builder.
func (pc *ProcessCreate) Mutation() *ProcessMutation {
	return pc.mutation
}

// Save creates the Process in the database.
func (pc *ProcessCreate) Save(ctx context.Context) (*Process, error) {
	var (
		err  error
		node *Process
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProcessCreate) SaveX(ctx context.Context) *Process {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProcessCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProcessCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProcessCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := process.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := process.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		v := process.DefaultDeletedAt()
		pc.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProcessCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "deleted_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := pc.mutation.PId(); !ok {
		return &ValidationError{Name: "pId", err: errors.New(`ent: missing required field "pId"`)}
	}
	if _, ok := pc.mutation.Cmd(); !ok {
		return &ValidationError{Name: "cmd", err: errors.New(`ent: missing required field "cmd"`)}
	}
	if _, ok := pc.mutation.Info(); !ok {
		return &ValidationError{Name: "info", err: errors.New(`ent: missing required field "info"`)}
	}
	if _, ok := pc.mutation.ClusterId(); !ok {
		return &ValidationError{Name: "clusterId", err: errors.New(`ent: missing required field "clusterId"`)}
	}
	if _, ok := pc.mutation.NodeId(); !ok {
		return &ValidationError{Name: "nodeId", err: errors.New(`ent: missing required field "nodeId"`)}
	}
	if _, ok := pc.mutation.ContainerId(); !ok {
		return &ValidationError{Name: "containerId", err: errors.New(`ent: missing required field "containerId"`)}
	}
	return nil
}

func (pc *ProcessCreate) sqlSave(ctx context.Context) (*Process, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	return _node, nil
}

func (pc *ProcessCreate) createSpec() (*Process, *sqlgraph.CreateSpec) {
	var (
		_node = &Process{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: process.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: process.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: process.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: process.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: process.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.PId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: process.FieldPId,
		})
		_node.PId = value
	}
	if value, ok := pc.mutation.Cmd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldCmd,
		})
		_node.Cmd = value
	}
	if value, ok := pc.mutation.Info(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: process.FieldInfo,
		})
		_node.Info = value
	}
	if value, ok := pc.mutation.ClusterId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldClusterId,
		})
		_node.ClusterId = value
	}
	if value, ok := pc.mutation.NodeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldNodeId,
		})
		_node.NodeId = value
	}
	if value, ok := pc.mutation.ContainerId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldContainerId,
		})
		_node.ContainerId = value
	}
	return _node, _spec
}

// ProcessCreateBulk is the builder for creating many Process entities in bulk.
type ProcessCreateBulk struct {
	config
	builders []*ProcessCreate
}

// Save creates the Process entities in the database.
func (pcb *ProcessCreateBulk) Save(ctx context.Context) ([]*Process, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Process, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProcessCreateBulk) SaveX(ctx context.Context) []*Process {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProcessCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProcessCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
