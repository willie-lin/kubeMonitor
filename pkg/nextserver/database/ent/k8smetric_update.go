// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8smetric"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// K8sMetricUpdate is the builder for updating K8sMetric entities.
type K8sMetricUpdate struct {
	config
	hooks    []Hook
	mutation *K8sMetricMutation
}

// Where appends a list predicates to the K8sMetricUpdate builder.
func (kmu *K8sMetricUpdate) Where(ps ...predicate.K8sMetric) *K8sMetricUpdate {
	kmu.mutation.Where(ps...)
	return kmu
}

// SetUpdatedAt sets the "updated_at" field.
func (kmu *K8sMetricUpdate) SetUpdatedAt(t time.Time) *K8sMetricUpdate {
	kmu.mutation.SetUpdatedAt(t)
	return kmu
}

// SetDeletedAt sets the "deleted_at" field.
func (kmu *K8sMetricUpdate) SetDeletedAt(t time.Time) *K8sMetricUpdate {
	kmu.mutation.SetDeletedAt(t)
	return kmu
}

// SetTs sets the "ts" field.
func (kmu *K8sMetricUpdate) SetTs(t time.Time) *K8sMetricUpdate {
	kmu.mutation.SetTs(t)
	return kmu
}

// SetValue sets the "value" field.
func (kmu *K8sMetricUpdate) SetValue(f float64) *K8sMetricUpdate {
	kmu.mutation.ResetValue()
	kmu.mutation.SetValue(f)
	return kmu
}

// AddValue adds f to the "value" field.
func (kmu *K8sMetricUpdate) AddValue(f float64) *K8sMetricUpdate {
	kmu.mutation.AddValue(f)
	return kmu
}

// SetEndpointId sets the "endpointId" field.
func (kmu *K8sMetricUpdate) SetEndpointId(u uint) *K8sMetricUpdate {
	kmu.mutation.ResetEndpointId()
	kmu.mutation.SetEndpointId(u)
	return kmu
}

// AddEndpointId adds u to the "endpointId" field.
func (kmu *K8sMetricUpdate) AddEndpointId(u uint) *K8sMetricUpdate {
	kmu.mutation.AddEndpointId(u)
	return kmu
}

// SetTypeId sets the "typeId" field.
func (kmu *K8sMetricUpdate) SetTypeId(u uint) *K8sMetricUpdate {
	kmu.mutation.ResetTypeId()
	kmu.mutation.SetTypeId(u)
	return kmu
}

// AddTypeId adds u to the "typeId" field.
func (kmu *K8sMetricUpdate) AddTypeId(u uint) *K8sMetricUpdate {
	kmu.mutation.AddTypeId(u)
	return kmu
}

// SetNameId sets the "nameId" field.
func (kmu *K8sMetricUpdate) SetNameId(u uint) *K8sMetricUpdate {
	kmu.mutation.ResetNameId()
	kmu.mutation.SetNameId(u)
	return kmu
}

// AddNameId adds u to the "nameId" field.
func (kmu *K8sMetricUpdate) AddNameId(u uint) *K8sMetricUpdate {
	kmu.mutation.AddNameId(u)
	return kmu
}

// SetLabelId sets the "labelId" field.
func (kmu *K8sMetricUpdate) SetLabelId(u uint) *K8sMetricUpdate {
	kmu.mutation.ResetLabelId()
	kmu.mutation.SetLabelId(u)
	return kmu
}

// AddLabelId adds u to the "labelId" field.
func (kmu *K8sMetricUpdate) AddLabelId(u uint) *K8sMetricUpdate {
	kmu.mutation.AddLabelId(u)
	return kmu
}

// SetK8sClusterId sets the "k8sClusterId" field.
func (kmu *K8sMetricUpdate) SetK8sClusterId(u uint) *K8sMetricUpdate {
	kmu.mutation.ResetK8sClusterId()
	kmu.mutation.SetK8sClusterId(u)
	return kmu
}

// AddK8sClusterId adds u to the "k8sClusterId" field.
func (kmu *K8sMetricUpdate) AddK8sClusterId(u uint) *K8sMetricUpdate {
	kmu.mutation.AddK8sClusterId(u)
	return kmu
}

// SetK8sNodeId sets the "k8sNodeId" field.
func (kmu *K8sMetricUpdate) SetK8sNodeId(u uint) *K8sMetricUpdate {
	kmu.mutation.ResetK8sNodeId()
	kmu.mutation.SetK8sNodeId(u)
	return kmu
}

// AddK8sNodeId adds u to the "k8sNodeId" field.
func (kmu *K8sMetricUpdate) AddK8sNodeId(u uint) *K8sMetricUpdate {
	kmu.mutation.AddK8sNodeId(u)
	return kmu
}

// SetK8sNamespaceId sets the "k8sNamespaceId" field.
func (kmu *K8sMetricUpdate) SetK8sNamespaceId(u uint) *K8sMetricUpdate {
	kmu.mutation.ResetK8sNamespaceId()
	kmu.mutation.SetK8sNamespaceId(u)
	return kmu
}

// AddK8sNamespaceId adds u to the "k8sNamespaceId" field.
func (kmu *K8sMetricUpdate) AddK8sNamespaceId(u uint) *K8sMetricUpdate {
	kmu.mutation.AddK8sNamespaceId(u)
	return kmu
}

// SetK8sContainerId sets the "k8sContainerId" field.
func (kmu *K8sMetricUpdate) SetK8sContainerId(u uint) *K8sMetricUpdate {
	kmu.mutation.ResetK8sContainerId()
	kmu.mutation.SetK8sContainerId(u)
	return kmu
}

// AddK8sContainerId adds u to the "k8sContainerId" field.
func (kmu *K8sMetricUpdate) AddK8sContainerId(u uint) *K8sMetricUpdate {
	kmu.mutation.AddK8sContainerId(u)
	return kmu
}

// Mutation returns the K8sMetricMutation object of the builder.
func (kmu *K8sMetricUpdate) Mutation() *K8sMetricMutation {
	return kmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kmu *K8sMetricUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kmu.defaults()
	if len(kmu.hooks) == 0 {
		affected, err = kmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sMetricMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kmu.mutation = mutation
			affected, err = kmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kmu.hooks) - 1; i >= 0; i-- {
			if kmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kmu *K8sMetricUpdate) SaveX(ctx context.Context) int {
	affected, err := kmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kmu *K8sMetricUpdate) Exec(ctx context.Context) error {
	_, err := kmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kmu *K8sMetricUpdate) ExecX(ctx context.Context) {
	if err := kmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kmu *K8sMetricUpdate) defaults() {
	if _, ok := kmu.mutation.UpdatedAt(); !ok {
		v := k8smetric.UpdateDefaultUpdatedAt()
		kmu.mutation.SetUpdatedAt(v)
	}
	if _, ok := kmu.mutation.DeletedAt(); !ok {
		v := k8smetric.UpdateDefaultDeletedAt()
		kmu.mutation.SetDeletedAt(v)
	}
}

func (kmu *K8sMetricUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8smetric.Table,
			Columns: k8smetric.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: k8smetric.FieldID,
			},
		},
	}
	if ps := kmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8smetric.FieldUpdatedAt,
		})
	}
	if value, ok := kmu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8smetric.FieldDeletedAt,
		})
	}
	if value, ok := kmu.mutation.Ts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8smetric.FieldTs,
		})
	}
	if value, ok := kmu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: k8smetric.FieldValue,
		})
	}
	if value, ok := kmu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: k8smetric.FieldValue,
		})
	}
	if value, ok := kmu.mutation.EndpointId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldEndpointId,
		})
	}
	if value, ok := kmu.mutation.AddedEndpointId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldEndpointId,
		})
	}
	if value, ok := kmu.mutation.TypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldTypeId,
		})
	}
	if value, ok := kmu.mutation.AddedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldTypeId,
		})
	}
	if value, ok := kmu.mutation.NameId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldNameId,
		})
	}
	if value, ok := kmu.mutation.AddedNameId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldNameId,
		})
	}
	if value, ok := kmu.mutation.LabelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldLabelId,
		})
	}
	if value, ok := kmu.mutation.AddedLabelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldLabelId,
		})
	}
	if value, ok := kmu.mutation.K8sClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sClusterId,
		})
	}
	if value, ok := kmu.mutation.AddedK8sClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sClusterId,
		})
	}
	if value, ok := kmu.mutation.K8sNodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sNodeId,
		})
	}
	if value, ok := kmu.mutation.AddedK8sNodeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sNodeId,
		})
	}
	if value, ok := kmu.mutation.K8sNamespaceId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sNamespaceId,
		})
	}
	if value, ok := kmu.mutation.AddedK8sNamespaceId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sNamespaceId,
		})
	}
	if value, ok := kmu.mutation.K8sContainerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sContainerId,
		})
	}
	if value, ok := kmu.mutation.AddedK8sContainerId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sContainerId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8smetric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// K8sMetricUpdateOne is the builder for updating a single K8sMetric entity.
type K8sMetricUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *K8sMetricMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (kmuo *K8sMetricUpdateOne) SetUpdatedAt(t time.Time) *K8sMetricUpdateOne {
	kmuo.mutation.SetUpdatedAt(t)
	return kmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (kmuo *K8sMetricUpdateOne) SetDeletedAt(t time.Time) *K8sMetricUpdateOne {
	kmuo.mutation.SetDeletedAt(t)
	return kmuo
}

// SetTs sets the "ts" field.
func (kmuo *K8sMetricUpdateOne) SetTs(t time.Time) *K8sMetricUpdateOne {
	kmuo.mutation.SetTs(t)
	return kmuo
}

// SetValue sets the "value" field.
func (kmuo *K8sMetricUpdateOne) SetValue(f float64) *K8sMetricUpdateOne {
	kmuo.mutation.ResetValue()
	kmuo.mutation.SetValue(f)
	return kmuo
}

// AddValue adds f to the "value" field.
func (kmuo *K8sMetricUpdateOne) AddValue(f float64) *K8sMetricUpdateOne {
	kmuo.mutation.AddValue(f)
	return kmuo
}

// SetEndpointId sets the "endpointId" field.
func (kmuo *K8sMetricUpdateOne) SetEndpointId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.ResetEndpointId()
	kmuo.mutation.SetEndpointId(u)
	return kmuo
}

// AddEndpointId adds u to the "endpointId" field.
func (kmuo *K8sMetricUpdateOne) AddEndpointId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.AddEndpointId(u)
	return kmuo
}

// SetTypeId sets the "typeId" field.
func (kmuo *K8sMetricUpdateOne) SetTypeId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.ResetTypeId()
	kmuo.mutation.SetTypeId(u)
	return kmuo
}

// AddTypeId adds u to the "typeId" field.
func (kmuo *K8sMetricUpdateOne) AddTypeId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.AddTypeId(u)
	return kmuo
}

// SetNameId sets the "nameId" field.
func (kmuo *K8sMetricUpdateOne) SetNameId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.ResetNameId()
	kmuo.mutation.SetNameId(u)
	return kmuo
}

// AddNameId adds u to the "nameId" field.
func (kmuo *K8sMetricUpdateOne) AddNameId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.AddNameId(u)
	return kmuo
}

// SetLabelId sets the "labelId" field.
func (kmuo *K8sMetricUpdateOne) SetLabelId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.ResetLabelId()
	kmuo.mutation.SetLabelId(u)
	return kmuo
}

// AddLabelId adds u to the "labelId" field.
func (kmuo *K8sMetricUpdateOne) AddLabelId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.AddLabelId(u)
	return kmuo
}

// SetK8sClusterId sets the "k8sClusterId" field.
func (kmuo *K8sMetricUpdateOne) SetK8sClusterId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.ResetK8sClusterId()
	kmuo.mutation.SetK8sClusterId(u)
	return kmuo
}

// AddK8sClusterId adds u to the "k8sClusterId" field.
func (kmuo *K8sMetricUpdateOne) AddK8sClusterId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.AddK8sClusterId(u)
	return kmuo
}

// SetK8sNodeId sets the "k8sNodeId" field.
func (kmuo *K8sMetricUpdateOne) SetK8sNodeId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.ResetK8sNodeId()
	kmuo.mutation.SetK8sNodeId(u)
	return kmuo
}

// AddK8sNodeId adds u to the "k8sNodeId" field.
func (kmuo *K8sMetricUpdateOne) AddK8sNodeId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.AddK8sNodeId(u)
	return kmuo
}

// SetK8sNamespaceId sets the "k8sNamespaceId" field.
func (kmuo *K8sMetricUpdateOne) SetK8sNamespaceId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.ResetK8sNamespaceId()
	kmuo.mutation.SetK8sNamespaceId(u)
	return kmuo
}

// AddK8sNamespaceId adds u to the "k8sNamespaceId" field.
func (kmuo *K8sMetricUpdateOne) AddK8sNamespaceId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.AddK8sNamespaceId(u)
	return kmuo
}

// SetK8sContainerId sets the "k8sContainerId" field.
func (kmuo *K8sMetricUpdateOne) SetK8sContainerId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.ResetK8sContainerId()
	kmuo.mutation.SetK8sContainerId(u)
	return kmuo
}

// AddK8sContainerId adds u to the "k8sContainerId" field.
func (kmuo *K8sMetricUpdateOne) AddK8sContainerId(u uint) *K8sMetricUpdateOne {
	kmuo.mutation.AddK8sContainerId(u)
	return kmuo
}

// Mutation returns the K8sMetricMutation object of the builder.
func (kmuo *K8sMetricUpdateOne) Mutation() *K8sMetricMutation {
	return kmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kmuo *K8sMetricUpdateOne) Select(field string, fields ...string) *K8sMetricUpdateOne {
	kmuo.fields = append([]string{field}, fields...)
	return kmuo
}

// Save executes the query and returns the updated K8sMetric entity.
func (kmuo *K8sMetricUpdateOne) Save(ctx context.Context) (*K8sMetric, error) {
	var (
		err  error
		node *K8sMetric
	)
	kmuo.defaults()
	if len(kmuo.hooks) == 0 {
		node, err = kmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sMetricMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kmuo.mutation = mutation
			node, err = kmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kmuo.hooks) - 1; i >= 0; i-- {
			if kmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kmuo *K8sMetricUpdateOne) SaveX(ctx context.Context) *K8sMetric {
	node, err := kmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kmuo *K8sMetricUpdateOne) Exec(ctx context.Context) error {
	_, err := kmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kmuo *K8sMetricUpdateOne) ExecX(ctx context.Context) {
	if err := kmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kmuo *K8sMetricUpdateOne) defaults() {
	if _, ok := kmuo.mutation.UpdatedAt(); !ok {
		v := k8smetric.UpdateDefaultUpdatedAt()
		kmuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := kmuo.mutation.DeletedAt(); !ok {
		v := k8smetric.UpdateDefaultDeletedAt()
		kmuo.mutation.SetDeletedAt(v)
	}
}

func (kmuo *K8sMetricUpdateOne) sqlSave(ctx context.Context) (_node *K8sMetric, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8smetric.Table,
			Columns: k8smetric.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: k8smetric.FieldID,
			},
		},
	}
	id, ok := kmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing K8sMetric.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, k8smetric.FieldID)
		for _, f := range fields {
			if !k8smetric.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != k8smetric.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8smetric.FieldUpdatedAt,
		})
	}
	if value, ok := kmuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8smetric.FieldDeletedAt,
		})
	}
	if value, ok := kmuo.mutation.Ts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8smetric.FieldTs,
		})
	}
	if value, ok := kmuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: k8smetric.FieldValue,
		})
	}
	if value, ok := kmuo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: k8smetric.FieldValue,
		})
	}
	if value, ok := kmuo.mutation.EndpointId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldEndpointId,
		})
	}
	if value, ok := kmuo.mutation.AddedEndpointId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldEndpointId,
		})
	}
	if value, ok := kmuo.mutation.TypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldTypeId,
		})
	}
	if value, ok := kmuo.mutation.AddedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldTypeId,
		})
	}
	if value, ok := kmuo.mutation.NameId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldNameId,
		})
	}
	if value, ok := kmuo.mutation.AddedNameId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldNameId,
		})
	}
	if value, ok := kmuo.mutation.LabelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldLabelId,
		})
	}
	if value, ok := kmuo.mutation.AddedLabelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldLabelId,
		})
	}
	if value, ok := kmuo.mutation.K8sClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sClusterId,
		})
	}
	if value, ok := kmuo.mutation.AddedK8sClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sClusterId,
		})
	}
	if value, ok := kmuo.mutation.K8sNodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sNodeId,
		})
	}
	if value, ok := kmuo.mutation.AddedK8sNodeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sNodeId,
		})
	}
	if value, ok := kmuo.mutation.K8sNamespaceId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sNamespaceId,
		})
	}
	if value, ok := kmuo.mutation.AddedK8sNamespaceId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sNamespaceId,
		})
	}
	if value, ok := kmuo.mutation.K8sContainerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sContainerId,
		})
	}
	if value, ok := kmuo.mutation.AddedK8sContainerId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8smetric.FieldK8sContainerId,
		})
	}
	_node = &K8sMetric{config: kmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8smetric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
