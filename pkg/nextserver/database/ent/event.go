// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/event"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metricendpoint"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metriclabel"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metricname"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Ts holds the value of the "ts" field.
	Ts time.Time `json:"ts,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Acked holds the value of the "acked" field.
	Acked bool `json:"acked,omitempty"`
	// AckedTs holds the value of the "ackedTs" field.
	AckedTs time.Time `json:"ackedTs,omitempty"`
	// EndpointId holds the value of the "endpointId" field.
	EndpointId uint `json:"endpointId,omitempty"`
	// TypeId holds the value of the "typeId" field.
	TypeId uint `json:"typeId,omitempty"`
	// NameId holds the value of the "nameId" field.
	NameId uint `json:"nameId,omitempty"`
	// LabelId holds the value of the "labelId" field.
	LabelId uint `json:"labelId,omitempty"`
	// ClusterId holds the value of the "clusterId" field.
	ClusterId uint `json:"clusterId,omitempty"`
	// AgentId holds the value of the "agentId" field.
	AgentId uint `json:"agentId,omitempty"`
	// NodeId holds the value of the "nodeId" field.
	NodeId uint `json:"nodeId,omitempty"`
	// ProcesId holds the value of the "procesId" field.
	ProcesId uint `json:"procesId,omitempty"`
	// ContainerId holds the value of the "containerId" field.
	ContainerId uint `json:"containerId,omitempty"`
	// PodId holds the value of the "podId" field.
	PodId uint `json:"podId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges                  EventEdges `json:"edges"`
	metric_endpoint_events *uint
	metric_label_events    *uint
	metric_name_events     *uint
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// MetricNameEvents holds the value of the MetricName_events edge.
	MetricNameEvents *MetricName `json:"MetricName_events,omitempty"`
	// MetricLabelEvents holds the value of the MetricLabel_events edge.
	MetricLabelEvents *MetricLabel `json:"MetricLabel_events,omitempty"`
	// MetricEndpointEvents holds the value of the MetricEndpoint_events edge.
	MetricEndpointEvents *MetricEndpoint `json:"MetricEndpoint_events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MetricNameEventsOrErr returns the MetricNameEvents value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) MetricNameEventsOrErr() (*MetricName, error) {
	if e.loadedTypes[0] {
		if e.MetricNameEvents == nil {
			// The edge MetricName_events was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metricname.Label}
		}
		return e.MetricNameEvents, nil
	}
	return nil, &NotLoadedError{edge: "MetricName_events"}
}

// MetricLabelEventsOrErr returns the MetricLabelEvents value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) MetricLabelEventsOrErr() (*MetricLabel, error) {
	if e.loadedTypes[1] {
		if e.MetricLabelEvents == nil {
			// The edge MetricLabel_events was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metriclabel.Label}
		}
		return e.MetricLabelEvents, nil
	}
	return nil, &NotLoadedError{edge: "MetricLabel_events"}
}

// MetricEndpointEventsOrErr returns the MetricEndpointEvents value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) MetricEndpointEventsOrErr() (*MetricEndpoint, error) {
	if e.loadedTypes[2] {
		if e.MetricEndpointEvents == nil {
			// The edge MetricEndpoint_events was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metricendpoint.Label}
		}
		return e.MetricEndpointEvents, nil
	}
	return nil, &NotLoadedError{edge: "MetricEndpoint_events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldAcked:
			values[i] = new(sql.NullBool)
		case event.FieldValue:
			values[i] = new(sql.NullFloat64)
		case event.FieldID, event.FieldEndpointId, event.FieldTypeId, event.FieldNameId, event.FieldLabelId, event.FieldClusterId, event.FieldAgentId, event.FieldNodeId, event.FieldProcesId, event.FieldContainerId, event.FieldPodId:
			values[i] = new(sql.NullInt64)
		case event.FieldCreatedAt, event.FieldUpdatedAt, event.FieldDeletedAt, event.FieldTs, event.FieldAckedTs:
			values[i] = new(sql.NullTime)
		case event.ForeignKeys[0]: // metric_endpoint_events
			values[i] = new(sql.NullInt64)
		case event.ForeignKeys[1]: // metric_label_events
			values[i] = new(sql.NullInt64)
		case event.ForeignKeys[2]: // metric_name_events
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Event", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case event.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case event.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case event.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = value.Time
			}
		case event.FieldTs:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ts", values[i])
			} else if value.Valid {
				e.Ts = value.Time
			}
		case event.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				e.Value = value.Float64
			}
		case event.FieldAcked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field acked", values[i])
			} else if value.Valid {
				e.Acked = value.Bool
			}
		case event.FieldAckedTs:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ackedTs", values[i])
			} else if value.Valid {
				e.AckedTs = value.Time
			}
		case event.FieldEndpointId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field endpointId", values[i])
			} else if value.Valid {
				e.EndpointId = uint(value.Int64)
			}
		case event.FieldTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field typeId", values[i])
			} else if value.Valid {
				e.TypeId = uint(value.Int64)
			}
		case event.FieldNameId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nameId", values[i])
			} else if value.Valid {
				e.NameId = uint(value.Int64)
			}
		case event.FieldLabelId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field labelId", values[i])
			} else if value.Valid {
				e.LabelId = uint(value.Int64)
			}
		case event.FieldClusterId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clusterId", values[i])
			} else if value.Valid {
				e.ClusterId = uint(value.Int64)
			}
		case event.FieldAgentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agentId", values[i])
			} else if value.Valid {
				e.AgentId = uint(value.Int64)
			}
		case event.FieldNodeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nodeId", values[i])
			} else if value.Valid {
				e.NodeId = uint(value.Int64)
			}
		case event.FieldProcesId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field procesId", values[i])
			} else if value.Valid {
				e.ProcesId = uint(value.Int64)
			}
		case event.FieldContainerId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field containerId", values[i])
			} else if value.Valid {
				e.ContainerId = uint(value.Int64)
			}
		case event.FieldPodId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field podId", values[i])
			} else if value.Valid {
				e.PodId = uint(value.Int64)
			}
		case event.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field metric_endpoint_events", value)
			} else if value.Valid {
				e.metric_endpoint_events = new(uint)
				*e.metric_endpoint_events = uint(value.Int64)
			}
		case event.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field metric_label_events", value)
			} else if value.Valid {
				e.metric_label_events = new(uint)
				*e.metric_label_events = uint(value.Int64)
			}
		case event.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field metric_name_events", value)
			} else if value.Valid {
				e.metric_name_events = new(uint)
				*e.metric_name_events = uint(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetricNameEvents queries the "MetricName_events" edge of the Event entity.
func (e *Event) QueryMetricNameEvents() *MetricNameQuery {
	return (&EventClient{config: e.config}).QueryMetricNameEvents(e)
}

// QueryMetricLabelEvents queries the "MetricLabel_events" edge of the Event entity.
func (e *Event) QueryMetricLabelEvents() *MetricLabelQuery {
	return (&EventClient{config: e.config}).QueryMetricLabelEvents(e)
}

// QueryMetricEndpointEvents queries the "MetricEndpoint_events" edge of the Event entity.
func (e *Event) QueryMetricEndpointEvents() *MetricEndpointQuery {
	return (&EventClient{config: e.config}).QueryMetricEndpointEvents(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(e.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ts=")
	builder.WriteString(e.Ts.Format(time.ANSIC))
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", e.Value))
	builder.WriteString(", acked=")
	builder.WriteString(fmt.Sprintf("%v", e.Acked))
	builder.WriteString(", ackedTs=")
	builder.WriteString(e.AckedTs.Format(time.ANSIC))
	builder.WriteString(", endpointId=")
	builder.WriteString(fmt.Sprintf("%v", e.EndpointId))
	builder.WriteString(", typeId=")
	builder.WriteString(fmt.Sprintf("%v", e.TypeId))
	builder.WriteString(", nameId=")
	builder.WriteString(fmt.Sprintf("%v", e.NameId))
	builder.WriteString(", labelId=")
	builder.WriteString(fmt.Sprintf("%v", e.LabelId))
	builder.WriteString(", clusterId=")
	builder.WriteString(fmt.Sprintf("%v", e.ClusterId))
	builder.WriteString(", agentId=")
	builder.WriteString(fmt.Sprintf("%v", e.AgentId))
	builder.WriteString(", nodeId=")
	builder.WriteString(fmt.Sprintf("%v", e.NodeId))
	builder.WriteString(", procesId=")
	builder.WriteString(fmt.Sprintf("%v", e.ProcesId))
	builder.WriteString(", containerId=")
	builder.WriteString(fmt.Sprintf("%v", e.ContainerId))
	builder.WriteString(", podId=")
	builder.WriteString(fmt.Sprintf("%v", e.PodId))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
