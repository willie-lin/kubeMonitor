// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/event"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metric"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metriclabel"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// MetricLabelUpdate is the builder for updating MetricLabel entities.
type MetricLabelUpdate struct {
	config
	hooks    []Hook
	mutation *MetricLabelMutation
}

// Where appends a list predicates to the MetricLabelUpdate builder.
func (mlu *MetricLabelUpdate) Where(ps ...predicate.MetricLabel) *MetricLabelUpdate {
	mlu.mutation.Where(ps...)
	return mlu
}

// SetUpdatedAt sets the "updated_at" field.
func (mlu *MetricLabelUpdate) SetUpdatedAt(t time.Time) *MetricLabelUpdate {
	mlu.mutation.SetUpdatedAt(t)
	return mlu
}

// SetDeletedAt sets the "deleted_at" field.
func (mlu *MetricLabelUpdate) SetDeletedAt(t time.Time) *MetricLabelUpdate {
	mlu.mutation.SetDeletedAt(t)
	return mlu
}

// SetLabel sets the "label" field.
func (mlu *MetricLabelUpdate) SetLabel(s string) *MetricLabelUpdate {
	mlu.mutation.SetLabel(s)
	return mlu
}

// AddMetricIDs adds the "metrics" edge to the Metric entity by IDs.
func (mlu *MetricLabelUpdate) AddMetricIDs(ids ...int) *MetricLabelUpdate {
	mlu.mutation.AddMetricIDs(ids...)
	return mlu
}

// AddMetrics adds the "metrics" edges to the Metric entity.
func (mlu *MetricLabelUpdate) AddMetrics(m ...*Metric) *MetricLabelUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mlu.AddMetricIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (mlu *MetricLabelUpdate) AddEventIDs(ids ...int) *MetricLabelUpdate {
	mlu.mutation.AddEventIDs(ids...)
	return mlu
}

// AddEvents adds the "events" edges to the Event entity.
func (mlu *MetricLabelUpdate) AddEvents(e ...*Event) *MetricLabelUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mlu.AddEventIDs(ids...)
}

// Mutation returns the MetricLabelMutation object of the builder.
func (mlu *MetricLabelUpdate) Mutation() *MetricLabelMutation {
	return mlu.mutation
}

// ClearMetrics clears all "metrics" edges to the Metric entity.
func (mlu *MetricLabelUpdate) ClearMetrics() *MetricLabelUpdate {
	mlu.mutation.ClearMetrics()
	return mlu
}

// RemoveMetricIDs removes the "metrics" edge to Metric entities by IDs.
func (mlu *MetricLabelUpdate) RemoveMetricIDs(ids ...int) *MetricLabelUpdate {
	mlu.mutation.RemoveMetricIDs(ids...)
	return mlu
}

// RemoveMetrics removes "metrics" edges to Metric entities.
func (mlu *MetricLabelUpdate) RemoveMetrics(m ...*Metric) *MetricLabelUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mlu.RemoveMetricIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (mlu *MetricLabelUpdate) ClearEvents() *MetricLabelUpdate {
	mlu.mutation.ClearEvents()
	return mlu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (mlu *MetricLabelUpdate) RemoveEventIDs(ids ...int) *MetricLabelUpdate {
	mlu.mutation.RemoveEventIDs(ids...)
	return mlu
}

// RemoveEvents removes "events" edges to Event entities.
func (mlu *MetricLabelUpdate) RemoveEvents(e ...*Event) *MetricLabelUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mlu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mlu *MetricLabelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mlu.defaults()
	if len(mlu.hooks) == 0 {
		if err = mlu.check(); err != nil {
			return 0, err
		}
		affected, err = mlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetricLabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mlu.check(); err != nil {
				return 0, err
			}
			mlu.mutation = mutation
			affected, err = mlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mlu.hooks) - 1; i >= 0; i-- {
			if mlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mlu *MetricLabelUpdate) SaveX(ctx context.Context) int {
	affected, err := mlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mlu *MetricLabelUpdate) Exec(ctx context.Context) error {
	_, err := mlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlu *MetricLabelUpdate) ExecX(ctx context.Context) {
	if err := mlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlu *MetricLabelUpdate) defaults() {
	if _, ok := mlu.mutation.UpdatedAt(); !ok {
		v := metriclabel.UpdateDefaultUpdatedAt()
		mlu.mutation.SetUpdatedAt(v)
	}
	if _, ok := mlu.mutation.DeletedAt(); !ok {
		v := metriclabel.UpdateDefaultDeletedAt()
		mlu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlu *MetricLabelUpdate) check() error {
	if v, ok := mlu.mutation.Label(); ok {
		if err := metriclabel.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf("ent: validator failed for field \"label\": %w", err)}
		}
	}
	return nil
}

func (mlu *MetricLabelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metriclabel.Table,
			Columns: metriclabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: metriclabel.FieldID,
			},
		},
	}
	if ps := mlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mlu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metriclabel.FieldUpdatedAt,
		})
	}
	if value, ok := mlu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metriclabel.FieldDeletedAt,
		})
	}
	if value, ok := mlu.mutation.Label(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metriclabel.FieldLabel,
		})
	}
	if mlu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.MetricsTable,
			Columns: []string{metriclabel.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metric.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlu.mutation.RemovedMetricsIDs(); len(nodes) > 0 && !mlu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.MetricsTable,
			Columns: []string{metriclabel.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metric.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlu.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.MetricsTable,
			Columns: []string{metriclabel.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metric.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mlu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.EventsTable,
			Columns: []string{metriclabel.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !mlu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.EventsTable,
			Columns: []string{metriclabel.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.EventsTable,
			Columns: []string{metriclabel.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metriclabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MetricLabelUpdateOne is the builder for updating a single MetricLabel entity.
type MetricLabelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetricLabelMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (mluo *MetricLabelUpdateOne) SetUpdatedAt(t time.Time) *MetricLabelUpdateOne {
	mluo.mutation.SetUpdatedAt(t)
	return mluo
}

// SetDeletedAt sets the "deleted_at" field.
func (mluo *MetricLabelUpdateOne) SetDeletedAt(t time.Time) *MetricLabelUpdateOne {
	mluo.mutation.SetDeletedAt(t)
	return mluo
}

// SetLabel sets the "label" field.
func (mluo *MetricLabelUpdateOne) SetLabel(s string) *MetricLabelUpdateOne {
	mluo.mutation.SetLabel(s)
	return mluo
}

// AddMetricIDs adds the "metrics" edge to the Metric entity by IDs.
func (mluo *MetricLabelUpdateOne) AddMetricIDs(ids ...int) *MetricLabelUpdateOne {
	mluo.mutation.AddMetricIDs(ids...)
	return mluo
}

// AddMetrics adds the "metrics" edges to the Metric entity.
func (mluo *MetricLabelUpdateOne) AddMetrics(m ...*Metric) *MetricLabelUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mluo.AddMetricIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (mluo *MetricLabelUpdateOne) AddEventIDs(ids ...int) *MetricLabelUpdateOne {
	mluo.mutation.AddEventIDs(ids...)
	return mluo
}

// AddEvents adds the "events" edges to the Event entity.
func (mluo *MetricLabelUpdateOne) AddEvents(e ...*Event) *MetricLabelUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mluo.AddEventIDs(ids...)
}

// Mutation returns the MetricLabelMutation object of the builder.
func (mluo *MetricLabelUpdateOne) Mutation() *MetricLabelMutation {
	return mluo.mutation
}

// ClearMetrics clears all "metrics" edges to the Metric entity.
func (mluo *MetricLabelUpdateOne) ClearMetrics() *MetricLabelUpdateOne {
	mluo.mutation.ClearMetrics()
	return mluo
}

// RemoveMetricIDs removes the "metrics" edge to Metric entities by IDs.
func (mluo *MetricLabelUpdateOne) RemoveMetricIDs(ids ...int) *MetricLabelUpdateOne {
	mluo.mutation.RemoveMetricIDs(ids...)
	return mluo
}

// RemoveMetrics removes "metrics" edges to Metric entities.
func (mluo *MetricLabelUpdateOne) RemoveMetrics(m ...*Metric) *MetricLabelUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mluo.RemoveMetricIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (mluo *MetricLabelUpdateOne) ClearEvents() *MetricLabelUpdateOne {
	mluo.mutation.ClearEvents()
	return mluo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (mluo *MetricLabelUpdateOne) RemoveEventIDs(ids ...int) *MetricLabelUpdateOne {
	mluo.mutation.RemoveEventIDs(ids...)
	return mluo
}

// RemoveEvents removes "events" edges to Event entities.
func (mluo *MetricLabelUpdateOne) RemoveEvents(e ...*Event) *MetricLabelUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mluo.RemoveEventIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mluo *MetricLabelUpdateOne) Select(field string, fields ...string) *MetricLabelUpdateOne {
	mluo.fields = append([]string{field}, fields...)
	return mluo
}

// Save executes the query and returns the updated MetricLabel entity.
func (mluo *MetricLabelUpdateOne) Save(ctx context.Context) (*MetricLabel, error) {
	var (
		err  error
		node *MetricLabel
	)
	mluo.defaults()
	if len(mluo.hooks) == 0 {
		if err = mluo.check(); err != nil {
			return nil, err
		}
		node, err = mluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetricLabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mluo.check(); err != nil {
				return nil, err
			}
			mluo.mutation = mutation
			node, err = mluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mluo.hooks) - 1; i >= 0; i-- {
			if mluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mluo *MetricLabelUpdateOne) SaveX(ctx context.Context) *MetricLabel {
	node, err := mluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mluo *MetricLabelUpdateOne) Exec(ctx context.Context) error {
	_, err := mluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mluo *MetricLabelUpdateOne) ExecX(ctx context.Context) {
	if err := mluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mluo *MetricLabelUpdateOne) defaults() {
	if _, ok := mluo.mutation.UpdatedAt(); !ok {
		v := metriclabel.UpdateDefaultUpdatedAt()
		mluo.mutation.SetUpdatedAt(v)
	}
	if _, ok := mluo.mutation.DeletedAt(); !ok {
		v := metriclabel.UpdateDefaultDeletedAt()
		mluo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mluo *MetricLabelUpdateOne) check() error {
	if v, ok := mluo.mutation.Label(); ok {
		if err := metriclabel.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf("ent: validator failed for field \"label\": %w", err)}
		}
	}
	return nil
}

func (mluo *MetricLabelUpdateOne) sqlSave(ctx context.Context) (_node *MetricLabel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metriclabel.Table,
			Columns: metriclabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: metriclabel.FieldID,
			},
		},
	}
	id, ok := mluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MetricLabel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metriclabel.FieldID)
		for _, f := range fields {
			if !metriclabel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metriclabel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metriclabel.FieldUpdatedAt,
		})
	}
	if value, ok := mluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metriclabel.FieldDeletedAt,
		})
	}
	if value, ok := mluo.mutation.Label(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metriclabel.FieldLabel,
		})
	}
	if mluo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.MetricsTable,
			Columns: []string{metriclabel.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metric.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mluo.mutation.RemovedMetricsIDs(); len(nodes) > 0 && !mluo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.MetricsTable,
			Columns: []string{metriclabel.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metric.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mluo.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.MetricsTable,
			Columns: []string{metriclabel.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metric.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mluo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.EventsTable,
			Columns: []string{metriclabel.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mluo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !mluo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.EventsTable,
			Columns: []string{metriclabel.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mluo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metriclabel.EventsTable,
			Columns: []string{metriclabel.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MetricLabel{config: mluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metriclabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
