// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sconnector"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// K8sConnectorUpdate is the builder for updating K8sConnector entities.
type K8sConnectorUpdate struct {
	config
	hooks    []Hook
	mutation *K8sConnectorMutation
}

// Where appends a list predicates to the K8sConnectorUpdate builder.
func (kcu *K8sConnectorUpdate) Where(ps ...predicate.K8sConnector) *K8sConnectorUpdate {
	kcu.mutation.Where(ps...)
	return kcu
}

// SetUpdatedAt sets the "updated_at" field.
func (kcu *K8sConnectorUpdate) SetUpdatedAt(t time.Time) *K8sConnectorUpdate {
	kcu.mutation.SetUpdatedAt(t)
	return kcu
}

// SetDeletedAt sets the "deleted_at" field.
func (kcu *K8sConnectorUpdate) SetDeletedAt(t time.Time) *K8sConnectorUpdate {
	kcu.mutation.SetDeletedAt(t)
	return kcu
}

// SetName sets the "name" field.
func (kcu *K8sConnectorUpdate) SetName(s string) *K8sConnectorUpdate {
	kcu.mutation.SetName(s)
	return kcu
}

// SetStatus sets the "status" field.
func (kcu *K8sConnectorUpdate) SetStatus(s string) *K8sConnectorUpdate {
	kcu.mutation.SetStatus(s)
	return kcu
}

// SetMethod sets the "method" field.
func (kcu *K8sConnectorUpdate) SetMethod(s string) *K8sConnectorUpdate {
	kcu.mutation.SetMethod(s)
	return kcu
}

// SetInCluster sets the "inCluster" field.
func (kcu *K8sConnectorUpdate) SetInCluster(b bool) *K8sConnectorUpdate {
	kcu.mutation.SetInCluster(b)
	return kcu
}

// SetBearerToken sets the "bearerToken" field.
func (kcu *K8sConnectorUpdate) SetBearerToken(s string) *K8sConnectorUpdate {
	kcu.mutation.SetBearerToken(s)
	return kcu
}

// SetKubeConfig sets the "kubeConfig" field.
func (kcu *K8sConnectorUpdate) SetKubeConfig(s string) *K8sConnectorUpdate {
	kcu.mutation.SetKubeConfig(s)
	return kcu
}

// Mutation returns the K8sConnectorMutation object of the builder.
func (kcu *K8sConnectorUpdate) Mutation() *K8sConnectorMutation {
	return kcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kcu *K8sConnectorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kcu.defaults()
	if len(kcu.hooks) == 0 {
		if err = kcu.check(); err != nil {
			return 0, err
		}
		affected, err = kcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sConnectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kcu.check(); err != nil {
				return 0, err
			}
			kcu.mutation = mutation
			affected, err = kcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kcu.hooks) - 1; i >= 0; i-- {
			if kcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcu *K8sConnectorUpdate) SaveX(ctx context.Context) int {
	affected, err := kcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kcu *K8sConnectorUpdate) Exec(ctx context.Context) error {
	_, err := kcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcu *K8sConnectorUpdate) ExecX(ctx context.Context) {
	if err := kcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcu *K8sConnectorUpdate) defaults() {
	if _, ok := kcu.mutation.UpdatedAt(); !ok {
		v := k8sconnector.UpdateDefaultUpdatedAt()
		kcu.mutation.SetUpdatedAt(v)
	}
	if _, ok := kcu.mutation.DeletedAt(); !ok {
		v := k8sconnector.UpdateDefaultDeletedAt()
		kcu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcu *K8sConnectorUpdate) check() error {
	if v, ok := kcu.mutation.Name(); ok {
		if err := k8sconnector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := kcu.mutation.Status(); ok {
		if err := k8sconnector.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := kcu.mutation.Method(); ok {
		if err := k8sconnector.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf("ent: validator failed for field \"method\": %w", err)}
		}
	}
	return nil
}

func (kcu *K8sConnectorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sconnector.Table,
			Columns: k8sconnector.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sconnector.FieldID,
			},
		},
	}
	if ps := kcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sconnector.FieldUpdatedAt,
		})
	}
	if value, ok := kcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sconnector.FieldDeletedAt,
		})
	}
	if value, ok := kcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldName,
		})
	}
	if value, ok := kcu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldStatus,
		})
	}
	if value, ok := kcu.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldMethod,
		})
	}
	if value, ok := kcu.mutation.InCluster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: k8sconnector.FieldInCluster,
		})
	}
	if value, ok := kcu.mutation.BearerToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldBearerToken,
		})
	}
	if value, ok := kcu.mutation.KubeConfig(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldKubeConfig,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8sconnector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// K8sConnectorUpdateOne is the builder for updating a single K8sConnector entity.
type K8sConnectorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *K8sConnectorMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (kcuo *K8sConnectorUpdateOne) SetUpdatedAt(t time.Time) *K8sConnectorUpdateOne {
	kcuo.mutation.SetUpdatedAt(t)
	return kcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (kcuo *K8sConnectorUpdateOne) SetDeletedAt(t time.Time) *K8sConnectorUpdateOne {
	kcuo.mutation.SetDeletedAt(t)
	return kcuo
}

// SetName sets the "name" field.
func (kcuo *K8sConnectorUpdateOne) SetName(s string) *K8sConnectorUpdateOne {
	kcuo.mutation.SetName(s)
	return kcuo
}

// SetStatus sets the "status" field.
func (kcuo *K8sConnectorUpdateOne) SetStatus(s string) *K8sConnectorUpdateOne {
	kcuo.mutation.SetStatus(s)
	return kcuo
}

// SetMethod sets the "method" field.
func (kcuo *K8sConnectorUpdateOne) SetMethod(s string) *K8sConnectorUpdateOne {
	kcuo.mutation.SetMethod(s)
	return kcuo
}

// SetInCluster sets the "inCluster" field.
func (kcuo *K8sConnectorUpdateOne) SetInCluster(b bool) *K8sConnectorUpdateOne {
	kcuo.mutation.SetInCluster(b)
	return kcuo
}

// SetBearerToken sets the "bearerToken" field.
func (kcuo *K8sConnectorUpdateOne) SetBearerToken(s string) *K8sConnectorUpdateOne {
	kcuo.mutation.SetBearerToken(s)
	return kcuo
}

// SetKubeConfig sets the "kubeConfig" field.
func (kcuo *K8sConnectorUpdateOne) SetKubeConfig(s string) *K8sConnectorUpdateOne {
	kcuo.mutation.SetKubeConfig(s)
	return kcuo
}

// Mutation returns the K8sConnectorMutation object of the builder.
func (kcuo *K8sConnectorUpdateOne) Mutation() *K8sConnectorMutation {
	return kcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kcuo *K8sConnectorUpdateOne) Select(field string, fields ...string) *K8sConnectorUpdateOne {
	kcuo.fields = append([]string{field}, fields...)
	return kcuo
}

// Save executes the query and returns the updated K8sConnector entity.
func (kcuo *K8sConnectorUpdateOne) Save(ctx context.Context) (*K8sConnector, error) {
	var (
		err  error
		node *K8sConnector
	)
	kcuo.defaults()
	if len(kcuo.hooks) == 0 {
		if err = kcuo.check(); err != nil {
			return nil, err
		}
		node, err = kcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sConnectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kcuo.check(); err != nil {
				return nil, err
			}
			kcuo.mutation = mutation
			node, err = kcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcuo.hooks) - 1; i >= 0; i-- {
			if kcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcuo *K8sConnectorUpdateOne) SaveX(ctx context.Context) *K8sConnector {
	node, err := kcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kcuo *K8sConnectorUpdateOne) Exec(ctx context.Context) error {
	_, err := kcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcuo *K8sConnectorUpdateOne) ExecX(ctx context.Context) {
	if err := kcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcuo *K8sConnectorUpdateOne) defaults() {
	if _, ok := kcuo.mutation.UpdatedAt(); !ok {
		v := k8sconnector.UpdateDefaultUpdatedAt()
		kcuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := kcuo.mutation.DeletedAt(); !ok {
		v := k8sconnector.UpdateDefaultDeletedAt()
		kcuo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcuo *K8sConnectorUpdateOne) check() error {
	if v, ok := kcuo.mutation.Name(); ok {
		if err := k8sconnector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := kcuo.mutation.Status(); ok {
		if err := k8sconnector.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := kcuo.mutation.Method(); ok {
		if err := k8sconnector.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf("ent: validator failed for field \"method\": %w", err)}
		}
	}
	return nil
}

func (kcuo *K8sConnectorUpdateOne) sqlSave(ctx context.Context) (_node *K8sConnector, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sconnector.Table,
			Columns: k8sconnector.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sconnector.FieldID,
			},
		},
	}
	id, ok := kcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing K8sConnector.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, k8sconnector.FieldID)
		for _, f := range fields {
			if !k8sconnector.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != k8sconnector.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sconnector.FieldUpdatedAt,
		})
	}
	if value, ok := kcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sconnector.FieldDeletedAt,
		})
	}
	if value, ok := kcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldName,
		})
	}
	if value, ok := kcuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldStatus,
		})
	}
	if value, ok := kcuo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldMethod,
		})
	}
	if value, ok := kcuo.mutation.InCluster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: k8sconnector.FieldInCluster,
		})
	}
	if value, ok := kcuo.mutation.BearerToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldBearerToken,
		})
	}
	if value, ok := kcuo.mutation.KubeConfig(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sconnector.FieldKubeConfig,
		})
	}
	_node = &K8sConnector{config: kcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8sconnector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
