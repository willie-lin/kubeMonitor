// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sreplicaset"
)

// K8sReplicaSet is the model entity for the K8sReplicaSet schema.
type K8sReplicaSet struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// K8sClusterId holds the value of the "k8sClusterId" field.
	K8sClusterId uint `json:"k8sClusterId,omitempty"`
	// K8sNamespaceId holds the value of the "k8sNamespaceId" field.
	K8sNamespaceId uint `json:"k8sNamespaceId,omitempty"`
	// K8sDeploymentId holds the value of the "k8sDeploymentId" field.
	K8sDeploymentId uint `json:"k8sDeploymentId,omitempty"`
	// K8sObjectId holds the value of the "k8sObjectId" field.
	K8sObjectId uint `json:"k8sObjectId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*K8sReplicaSet) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case k8sreplicaset.FieldID, k8sreplicaset.FieldK8sClusterId, k8sreplicaset.FieldK8sNamespaceId, k8sreplicaset.FieldK8sDeploymentId, k8sreplicaset.FieldK8sObjectId:
			values[i] = new(sql.NullInt64)
		case k8sreplicaset.FieldName:
			values[i] = new(sql.NullString)
		case k8sreplicaset.FieldCreatedAt, k8sreplicaset.FieldUpdatedAt, k8sreplicaset.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type K8sReplicaSet", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the K8sReplicaSet fields.
func (krs *K8sReplicaSet) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case k8sreplicaset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			krs.ID = uint(value.Int64)
		case k8sreplicaset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				krs.CreatedAt = value.Time
			}
		case k8sreplicaset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				krs.UpdatedAt = value.Time
			}
		case k8sreplicaset.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				krs.DeletedAt = value.Time
			}
		case k8sreplicaset.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				krs.Name = value.String
			}
		case k8sreplicaset.FieldK8sClusterId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field k8sClusterId", values[i])
			} else if value.Valid {
				krs.K8sClusterId = uint(value.Int64)
			}
		case k8sreplicaset.FieldK8sNamespaceId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field k8sNamespaceId", values[i])
			} else if value.Valid {
				krs.K8sNamespaceId = uint(value.Int64)
			}
		case k8sreplicaset.FieldK8sDeploymentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field k8sDeploymentId", values[i])
			} else if value.Valid {
				krs.K8sDeploymentId = uint(value.Int64)
			}
		case k8sreplicaset.FieldK8sObjectId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field k8sObjectId", values[i])
			} else if value.Valid {
				krs.K8sObjectId = uint(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this K8sReplicaSet.
// Note that you need to call K8sReplicaSet.Unwrap() before calling this method if this K8sReplicaSet
// was returned from a transaction, and the transaction was committed or rolled back.
func (krs *K8sReplicaSet) Update() *K8sReplicaSetUpdateOne {
	return (&K8sReplicaSetClient{config: krs.config}).UpdateOne(krs)
}

// Unwrap unwraps the K8sReplicaSet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (krs *K8sReplicaSet) Unwrap() *K8sReplicaSet {
	tx, ok := krs.config.driver.(*txDriver)
	if !ok {
		panic("ent: K8sReplicaSet is not a transactional entity")
	}
	krs.config.driver = tx.drv
	return krs
}

// String implements the fmt.Stringer.
func (krs *K8sReplicaSet) String() string {
	var builder strings.Builder
	builder.WriteString("K8sReplicaSet(")
	builder.WriteString(fmt.Sprintf("id=%v", krs.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(krs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(krs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(krs.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(krs.Name)
	builder.WriteString(", k8sClusterId=")
	builder.WriteString(fmt.Sprintf("%v", krs.K8sClusterId))
	builder.WriteString(", k8sNamespaceId=")
	builder.WriteString(fmt.Sprintf("%v", krs.K8sNamespaceId))
	builder.WriteString(", k8sDeploymentId=")
	builder.WriteString(fmt.Sprintf("%v", krs.K8sDeploymentId))
	builder.WriteString(", k8sObjectId=")
	builder.WriteString(fmt.Sprintf("%v", krs.K8sObjectId))
	builder.WriteByte(')')
	return builder.String()
}

// K8sReplicaSets is a parsable slice of K8sReplicaSet.
type K8sReplicaSets []*K8sReplicaSet

func (krs K8sReplicaSets) config(cfg config) {
	for _i := range krs {
		krs[_i].config = cfg
	}
}
