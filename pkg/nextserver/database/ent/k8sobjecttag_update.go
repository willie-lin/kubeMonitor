// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sobjecttag"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// K8sObjectTagUpdate is the builder for updating K8sObjectTag entities.
type K8sObjectTagUpdate struct {
	config
	hooks    []Hook
	mutation *K8sObjectTagMutation
}

// Where appends a list predicates to the K8sObjectTagUpdate builder.
func (kotu *K8sObjectTagUpdate) Where(ps ...predicate.K8sObjectTag) *K8sObjectTagUpdate {
	kotu.mutation.Where(ps...)
	return kotu
}

// SetUpdatedAt sets the "updated_at" field.
func (kotu *K8sObjectTagUpdate) SetUpdatedAt(t time.Time) *K8sObjectTagUpdate {
	kotu.mutation.SetUpdatedAt(t)
	return kotu
}

// SetDeletedAt sets the "deleted_at" field.
func (kotu *K8sObjectTagUpdate) SetDeletedAt(t time.Time) *K8sObjectTagUpdate {
	kotu.mutation.SetDeletedAt(t)
	return kotu
}

// SetK8sObjectId sets the "k8sObjectId" field.
func (kotu *K8sObjectTagUpdate) SetK8sObjectId(u uint) *K8sObjectTagUpdate {
	kotu.mutation.ResetK8sObjectId()
	kotu.mutation.SetK8sObjectId(u)
	return kotu
}

// AddK8sObjectId adds u to the "k8sObjectId" field.
func (kotu *K8sObjectTagUpdate) AddK8sObjectId(u uint) *K8sObjectTagUpdate {
	kotu.mutation.AddK8sObjectId(u)
	return kotu
}

// SetK8sLabelId sets the "k8sLabelId" field.
func (kotu *K8sObjectTagUpdate) SetK8sLabelId(u uint) *K8sObjectTagUpdate {
	kotu.mutation.ResetK8sLabelId()
	kotu.mutation.SetK8sLabelId(u)
	return kotu
}

// AddK8sLabelId adds u to the "k8sLabelId" field.
func (kotu *K8sObjectTagUpdate) AddK8sLabelId(u uint) *K8sObjectTagUpdate {
	kotu.mutation.AddK8sLabelId(u)
	return kotu
}

// Mutation returns the K8sObjectTagMutation object of the builder.
func (kotu *K8sObjectTagUpdate) Mutation() *K8sObjectTagMutation {
	return kotu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kotu *K8sObjectTagUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kotu.defaults()
	if len(kotu.hooks) == 0 {
		affected, err = kotu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sObjectTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kotu.mutation = mutation
			affected, err = kotu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kotu.hooks) - 1; i >= 0; i-- {
			if kotu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kotu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kotu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kotu *K8sObjectTagUpdate) SaveX(ctx context.Context) int {
	affected, err := kotu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kotu *K8sObjectTagUpdate) Exec(ctx context.Context) error {
	_, err := kotu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kotu *K8sObjectTagUpdate) ExecX(ctx context.Context) {
	if err := kotu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kotu *K8sObjectTagUpdate) defaults() {
	if _, ok := kotu.mutation.UpdatedAt(); !ok {
		v := k8sobjecttag.UpdateDefaultUpdatedAt()
		kotu.mutation.SetUpdatedAt(v)
	}
	if _, ok := kotu.mutation.DeletedAt(); !ok {
		v := k8sobjecttag.UpdateDefaultDeletedAt()
		kotu.mutation.SetDeletedAt(v)
	}
}

func (kotu *K8sObjectTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sobjecttag.Table,
			Columns: k8sobjecttag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sobjecttag.FieldID,
			},
		},
	}
	if ps := kotu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kotu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobjecttag.FieldUpdatedAt,
		})
	}
	if value, ok := kotu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobjecttag.FieldDeletedAt,
		})
	}
	if value, ok := kotu.mutation.K8sObjectId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobjecttag.FieldK8sObjectId,
		})
	}
	if value, ok := kotu.mutation.AddedK8sObjectId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobjecttag.FieldK8sObjectId,
		})
	}
	if value, ok := kotu.mutation.K8sLabelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobjecttag.FieldK8sLabelId,
		})
	}
	if value, ok := kotu.mutation.AddedK8sLabelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobjecttag.FieldK8sLabelId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kotu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8sobjecttag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// K8sObjectTagUpdateOne is the builder for updating a single K8sObjectTag entity.
type K8sObjectTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *K8sObjectTagMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (kotuo *K8sObjectTagUpdateOne) SetUpdatedAt(t time.Time) *K8sObjectTagUpdateOne {
	kotuo.mutation.SetUpdatedAt(t)
	return kotuo
}

// SetDeletedAt sets the "deleted_at" field.
func (kotuo *K8sObjectTagUpdateOne) SetDeletedAt(t time.Time) *K8sObjectTagUpdateOne {
	kotuo.mutation.SetDeletedAt(t)
	return kotuo
}

// SetK8sObjectId sets the "k8sObjectId" field.
func (kotuo *K8sObjectTagUpdateOne) SetK8sObjectId(u uint) *K8sObjectTagUpdateOne {
	kotuo.mutation.ResetK8sObjectId()
	kotuo.mutation.SetK8sObjectId(u)
	return kotuo
}

// AddK8sObjectId adds u to the "k8sObjectId" field.
func (kotuo *K8sObjectTagUpdateOne) AddK8sObjectId(u uint) *K8sObjectTagUpdateOne {
	kotuo.mutation.AddK8sObjectId(u)
	return kotuo
}

// SetK8sLabelId sets the "k8sLabelId" field.
func (kotuo *K8sObjectTagUpdateOne) SetK8sLabelId(u uint) *K8sObjectTagUpdateOne {
	kotuo.mutation.ResetK8sLabelId()
	kotuo.mutation.SetK8sLabelId(u)
	return kotuo
}

// AddK8sLabelId adds u to the "k8sLabelId" field.
func (kotuo *K8sObjectTagUpdateOne) AddK8sLabelId(u uint) *K8sObjectTagUpdateOne {
	kotuo.mutation.AddK8sLabelId(u)
	return kotuo
}

// Mutation returns the K8sObjectTagMutation object of the builder.
func (kotuo *K8sObjectTagUpdateOne) Mutation() *K8sObjectTagMutation {
	return kotuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kotuo *K8sObjectTagUpdateOne) Select(field string, fields ...string) *K8sObjectTagUpdateOne {
	kotuo.fields = append([]string{field}, fields...)
	return kotuo
}

// Save executes the query and returns the updated K8sObjectTag entity.
func (kotuo *K8sObjectTagUpdateOne) Save(ctx context.Context) (*K8sObjectTag, error) {
	var (
		err  error
		node *K8sObjectTag
	)
	kotuo.defaults()
	if len(kotuo.hooks) == 0 {
		node, err = kotuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sObjectTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kotuo.mutation = mutation
			node, err = kotuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kotuo.hooks) - 1; i >= 0; i-- {
			if kotuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kotuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kotuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kotuo *K8sObjectTagUpdateOne) SaveX(ctx context.Context) *K8sObjectTag {
	node, err := kotuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kotuo *K8sObjectTagUpdateOne) Exec(ctx context.Context) error {
	_, err := kotuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kotuo *K8sObjectTagUpdateOne) ExecX(ctx context.Context) {
	if err := kotuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kotuo *K8sObjectTagUpdateOne) defaults() {
	if _, ok := kotuo.mutation.UpdatedAt(); !ok {
		v := k8sobjecttag.UpdateDefaultUpdatedAt()
		kotuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := kotuo.mutation.DeletedAt(); !ok {
		v := k8sobjecttag.UpdateDefaultDeletedAt()
		kotuo.mutation.SetDeletedAt(v)
	}
}

func (kotuo *K8sObjectTagUpdateOne) sqlSave(ctx context.Context) (_node *K8sObjectTag, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sobjecttag.Table,
			Columns: k8sobjecttag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sobjecttag.FieldID,
			},
		},
	}
	id, ok := kotuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing K8sObjectTag.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kotuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, k8sobjecttag.FieldID)
		for _, f := range fields {
			if !k8sobjecttag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != k8sobjecttag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kotuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kotuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobjecttag.FieldUpdatedAt,
		})
	}
	if value, ok := kotuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobjecttag.FieldDeletedAt,
		})
	}
	if value, ok := kotuo.mutation.K8sObjectId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobjecttag.FieldK8sObjectId,
		})
	}
	if value, ok := kotuo.mutation.AddedK8sObjectId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobjecttag.FieldK8sObjectId,
		})
	}
	if value, ok := kotuo.mutation.K8sLabelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobjecttag.FieldK8sLabelId,
		})
	}
	if value, ok := kotuo.mutation.AddedK8sLabelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobjecttag.FieldK8sLabelId,
		})
	}
	_node = &K8sObjectTag{config: kotuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kotuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8sobjecttag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
