// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metricname"
)

// MetricName is the model entity for the MetricName schema.
type MetricName struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Help holds the value of the "help" field.
	Help string `json:"help,omitempty"`
	// TypeId holds the value of the "typeId" field.
	TypeId uint `json:"typeId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetricNameQuery when eager-loading is set.
	Edges                    MetricNameEdges `json:"edges"`
	metric_type_metric_names *uint
}

// MetricNameEdges holds the relations/edges for other nodes in the graph.
type MetricNameEdges struct {
	// Metrics holds the value of the metrics edge.
	Metrics []*Metric `json:"metrics,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MetricsOrErr returns the Metrics value or an error if the edge
// was not loaded in eager-loading.
func (e MetricNameEdges) MetricsOrErr() ([]*Metric, error) {
	if e.loadedTypes[0] {
		return e.Metrics, nil
	}
	return nil, &NotLoadedError{edge: "metrics"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e MetricNameEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MetricName) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case metricname.FieldID, metricname.FieldTypeId:
			values[i] = new(sql.NullInt64)
		case metricname.FieldName, metricname.FieldHelp:
			values[i] = new(sql.NullString)
		case metricname.FieldCreatedAt, metricname.FieldUpdatedAt, metricname.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case metricname.ForeignKeys[0]: // metric_type_metric_names
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MetricName", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MetricName fields.
func (mn *MetricName) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metricname.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mn.ID = uint(value.Int64)
		case metricname.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mn.CreatedAt = value.Time
			}
		case metricname.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mn.UpdatedAt = value.Time
			}
		case metricname.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mn.DeletedAt = value.Time
			}
		case metricname.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mn.Name = value.String
			}
		case metricname.FieldHelp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field help", values[i])
			} else if value.Valid {
				mn.Help = value.String
			}
		case metricname.FieldTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field typeId", values[i])
			} else if value.Valid {
				mn.TypeId = uint(value.Int64)
			}
		case metricname.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field metric_type_metric_names", value)
			} else if value.Valid {
				mn.metric_type_metric_names = new(uint)
				*mn.metric_type_metric_names = uint(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetrics queries the "metrics" edge of the MetricName entity.
func (mn *MetricName) QueryMetrics() *MetricQuery {
	return (&MetricNameClient{config: mn.config}).QueryMetrics(mn)
}

// QueryEvents queries the "events" edge of the MetricName entity.
func (mn *MetricName) QueryEvents() *EventQuery {
	return (&MetricNameClient{config: mn.config}).QueryEvents(mn)
}

// Update returns a builder for updating this MetricName.
// Note that you need to call MetricName.Unwrap() before calling this method if this MetricName
// was returned from a transaction, and the transaction was committed or rolled back.
func (mn *MetricName) Update() *MetricNameUpdateOne {
	return (&MetricNameClient{config: mn.config}).UpdateOne(mn)
}

// Unwrap unwraps the MetricName entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mn *MetricName) Unwrap() *MetricName {
	tx, ok := mn.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetricName is not a transactional entity")
	}
	mn.config.driver = tx.drv
	return mn
}

// String implements the fmt.Stringer.
func (mn *MetricName) String() string {
	var builder strings.Builder
	builder.WriteString("MetricName(")
	builder.WriteString(fmt.Sprintf("id=%v", mn.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(mn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mn.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(mn.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(mn.Name)
	builder.WriteString(", help=")
	builder.WriteString(mn.Help)
	builder.WriteString(", typeId=")
	builder.WriteString(fmt.Sprintf("%v", mn.TypeId))
	builder.WriteByte(')')
	return builder.String()
}

// MetricNames is a parsable slice of MetricName.
type MetricNames []*MetricName

func (mn MetricNames) config(cfg config) {
	for _i := range mn {
		mn[_i].config = cfg
	}
}
