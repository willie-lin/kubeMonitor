// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8snamespace"
)

// K8sNamespaceCreate is the builder for creating a K8sNamespace entity.
type K8sNamespaceCreate struct {
	config
	mutation *K8sNamespaceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (knc *K8sNamespaceCreate) SetCreatedAt(t time.Time) *K8sNamespaceCreate {
	knc.mutation.SetCreatedAt(t)
	return knc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (knc *K8sNamespaceCreate) SetNillableCreatedAt(t *time.Time) *K8sNamespaceCreate {
	if t != nil {
		knc.SetCreatedAt(*t)
	}
	return knc
}

// SetUpdatedAt sets the "updated_at" field.
func (knc *K8sNamespaceCreate) SetUpdatedAt(t time.Time) *K8sNamespaceCreate {
	knc.mutation.SetUpdatedAt(t)
	return knc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (knc *K8sNamespaceCreate) SetNillableUpdatedAt(t *time.Time) *K8sNamespaceCreate {
	if t != nil {
		knc.SetUpdatedAt(*t)
	}
	return knc
}

// SetDeletedAt sets the "deleted_at" field.
func (knc *K8sNamespaceCreate) SetDeletedAt(t time.Time) *K8sNamespaceCreate {
	knc.mutation.SetDeletedAt(t)
	return knc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (knc *K8sNamespaceCreate) SetNillableDeletedAt(t *time.Time) *K8sNamespaceCreate {
	if t != nil {
		knc.SetDeletedAt(*t)
	}
	return knc
}

// SetName sets the "name" field.
func (knc *K8sNamespaceCreate) SetName(s string) *K8sNamespaceCreate {
	knc.mutation.SetName(s)
	return knc
}

// SetK8sClusterId sets the "k8sClusterId" field.
func (knc *K8sNamespaceCreate) SetK8sClusterId(u uint) *K8sNamespaceCreate {
	knc.mutation.SetK8sClusterId(u)
	return knc
}

// SetK8sObjectId sets the "k8sObjectId" field.
func (knc *K8sNamespaceCreate) SetK8sObjectId(u uint) *K8sNamespaceCreate {
	knc.mutation.SetK8sObjectId(u)
	return knc
}

// SetID sets the "id" field.
func (knc *K8sNamespaceCreate) SetID(u uint) *K8sNamespaceCreate {
	knc.mutation.SetID(u)
	return knc
}

// Mutation returns the K8sNamespaceMutation object of the builder.
func (knc *K8sNamespaceCreate) Mutation() *K8sNamespaceMutation {
	return knc.mutation
}

// Save creates the K8sNamespace in the database.
func (knc *K8sNamespaceCreate) Save(ctx context.Context) (*K8sNamespace, error) {
	var (
		err  error
		node *K8sNamespace
	)
	knc.defaults()
	if len(knc.hooks) == 0 {
		if err = knc.check(); err != nil {
			return nil, err
		}
		node, err = knc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sNamespaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = knc.check(); err != nil {
				return nil, err
			}
			knc.mutation = mutation
			if node, err = knc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(knc.hooks) - 1; i >= 0; i-- {
			if knc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = knc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, knc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (knc *K8sNamespaceCreate) SaveX(ctx context.Context) *K8sNamespace {
	v, err := knc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (knc *K8sNamespaceCreate) Exec(ctx context.Context) error {
	_, err := knc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (knc *K8sNamespaceCreate) ExecX(ctx context.Context) {
	if err := knc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (knc *K8sNamespaceCreate) defaults() {
	if _, ok := knc.mutation.CreatedAt(); !ok {
		v := k8snamespace.DefaultCreatedAt()
		knc.mutation.SetCreatedAt(v)
	}
	if _, ok := knc.mutation.UpdatedAt(); !ok {
		v := k8snamespace.DefaultUpdatedAt()
		knc.mutation.SetUpdatedAt(v)
	}
	if _, ok := knc.mutation.DeletedAt(); !ok {
		v := k8snamespace.DefaultDeletedAt()
		knc.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (knc *K8sNamespaceCreate) check() error {
	if _, ok := knc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := knc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := knc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "deleted_at"`)}
	}
	if _, ok := knc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := knc.mutation.Name(); ok {
		if err := k8snamespace.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := knc.mutation.K8sClusterId(); !ok {
		return &ValidationError{Name: "k8sClusterId", err: errors.New(`ent: missing required field "k8sClusterId"`)}
	}
	if _, ok := knc.mutation.K8sObjectId(); !ok {
		return &ValidationError{Name: "k8sObjectId", err: errors.New(`ent: missing required field "k8sObjectId"`)}
	}
	return nil
}

func (knc *K8sNamespaceCreate) sqlSave(ctx context.Context) (*K8sNamespace, error) {
	_node, _spec := knc.createSpec()
	if err := sqlgraph.CreateNode(ctx, knc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	return _node, nil
}

func (knc *K8sNamespaceCreate) createSpec() (*K8sNamespace, *sqlgraph.CreateSpec) {
	var (
		_node = &K8sNamespace{config: knc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: k8snamespace.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8snamespace.FieldID,
			},
		}
	)
	if id, ok := knc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := knc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8snamespace.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := knc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8snamespace.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := knc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8snamespace.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := knc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8snamespace.FieldName,
		})
		_node.Name = value
	}
	if value, ok := knc.mutation.K8sClusterId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8snamespace.FieldK8sClusterId,
		})
		_node.K8sClusterId = value
	}
	if value, ok := knc.mutation.K8sObjectId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8snamespace.FieldK8sObjectId,
		})
		_node.K8sObjectId = value
	}
	return _node, _spec
}

// K8sNamespaceCreateBulk is the builder for creating many K8sNamespace entities in bulk.
type K8sNamespaceCreateBulk struct {
	config
	builders []*K8sNamespaceCreate
}

// Save creates the K8sNamespace entities in the database.
func (kncb *K8sNamespaceCreateBulk) Save(ctx context.Context) ([]*K8sNamespace, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kncb.builders))
	nodes := make([]*K8sNamespace, len(kncb.builders))
	mutators := make([]Mutator, len(kncb.builders))
	for i := range kncb.builders {
		func(i int, root context.Context) {
			builder := kncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*K8sNamespaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kncb *K8sNamespaceCreateBulk) SaveX(ctx context.Context) []*K8sNamespace {
	v, err := kncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kncb *K8sNamespaceCreateBulk) Exec(ctx context.Context) error {
	_, err := kncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kncb *K8sNamespaceCreateBulk) ExecX(ctx context.Context) {
	if err := kncb.Exec(ctx); err != nil {
		panic(err)
	}
}
