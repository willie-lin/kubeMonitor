// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sconnector"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// K8sConnectorDelete is the builder for deleting a K8sConnector entity.
type K8sConnectorDelete struct {
	config
	hooks    []Hook
	mutation *K8sConnectorMutation
}

// Where appends a list predicates to the K8sConnectorDelete builder.
func (kcd *K8sConnectorDelete) Where(ps ...predicate.K8sConnector) *K8sConnectorDelete {
	kcd.mutation.Where(ps...)
	return kcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (kcd *K8sConnectorDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(kcd.hooks) == 0 {
		affected, err = kcd.sqlExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sConnectorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcd.mutation = mutation
			affected, err = kcd.sqlExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kcd.hooks) - 1; i >= 0; i-- {
			if kcd.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kcd.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcd.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcd *K8sConnectorDelete) ExecX(ctx context.Context) int {
	n, err := kcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (kcd *K8sConnectorDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: k8sconnector.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sconnector.FieldID,
			},
		},
	}
	if ps := kcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, kcd.driver, _spec)
}

// K8sConnectorDeleteOne is the builder for deleting a single K8sConnector entity.
type K8sConnectorDeleteOne struct {
	kcd *K8sConnectorDelete
}

// Exec executes the deletion query.
func (kcdo *K8sConnectorDeleteOne) Exec(ctx context.Context) error {
	n, err := kcdo.kcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{k8sconnector.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (kcdo *K8sConnectorDeleteOne) ExecX(ctx context.Context) {
	kcdo.kcd.ExecX(ctx)
}
