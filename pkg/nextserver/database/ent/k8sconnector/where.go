// Code generated by entc, DO NOT EDIT.

package k8sconnector

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// InCluster applies equality check predicate on the "inCluster" field. It's identical to InClusterEQ.
func InCluster(v bool) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInCluster), v))
	})
}

// BearerToken applies equality check predicate on the "bearerToken" field. It's identical to BearerTokenEQ.
func BearerToken(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBearerToken), v))
	})
}

// KubeConfig applies equality check predicate on the "kubeConfig" field. It's identical to KubeConfigEQ.
func KubeConfig(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKubeConfig), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethod), v))
	})
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMethod), v...))
	})
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMethod), v...))
	})
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethod), v))
	})
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethod), v))
	})
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethod), v))
	})
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethod), v))
	})
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMethod), v))
	})
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMethod), v))
	})
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMethod), v))
	})
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMethod), v))
	})
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMethod), v))
	})
}

// InClusterEQ applies the EQ predicate on the "inCluster" field.
func InClusterEQ(v bool) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInCluster), v))
	})
}

// InClusterNEQ applies the NEQ predicate on the "inCluster" field.
func InClusterNEQ(v bool) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInCluster), v))
	})
}

// BearerTokenEQ applies the EQ predicate on the "bearerToken" field.
func BearerTokenEQ(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBearerToken), v))
	})
}

// BearerTokenNEQ applies the NEQ predicate on the "bearerToken" field.
func BearerTokenNEQ(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBearerToken), v))
	})
}

// BearerTokenIn applies the In predicate on the "bearerToken" field.
func BearerTokenIn(vs ...string) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBearerToken), v...))
	})
}

// BearerTokenNotIn applies the NotIn predicate on the "bearerToken" field.
func BearerTokenNotIn(vs ...string) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBearerToken), v...))
	})
}

// BearerTokenGT applies the GT predicate on the "bearerToken" field.
func BearerTokenGT(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBearerToken), v))
	})
}

// BearerTokenGTE applies the GTE predicate on the "bearerToken" field.
func BearerTokenGTE(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBearerToken), v))
	})
}

// BearerTokenLT applies the LT predicate on the "bearerToken" field.
func BearerTokenLT(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBearerToken), v))
	})
}

// BearerTokenLTE applies the LTE predicate on the "bearerToken" field.
func BearerTokenLTE(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBearerToken), v))
	})
}

// BearerTokenContains applies the Contains predicate on the "bearerToken" field.
func BearerTokenContains(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBearerToken), v))
	})
}

// BearerTokenHasPrefix applies the HasPrefix predicate on the "bearerToken" field.
func BearerTokenHasPrefix(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBearerToken), v))
	})
}

// BearerTokenHasSuffix applies the HasSuffix predicate on the "bearerToken" field.
func BearerTokenHasSuffix(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBearerToken), v))
	})
}

// BearerTokenEqualFold applies the EqualFold predicate on the "bearerToken" field.
func BearerTokenEqualFold(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBearerToken), v))
	})
}

// BearerTokenContainsFold applies the ContainsFold predicate on the "bearerToken" field.
func BearerTokenContainsFold(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBearerToken), v))
	})
}

// KubeConfigEQ applies the EQ predicate on the "kubeConfig" field.
func KubeConfigEQ(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKubeConfig), v))
	})
}

// KubeConfigNEQ applies the NEQ predicate on the "kubeConfig" field.
func KubeConfigNEQ(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKubeConfig), v))
	})
}

// KubeConfigIn applies the In predicate on the "kubeConfig" field.
func KubeConfigIn(vs ...string) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKubeConfig), v...))
	})
}

// KubeConfigNotIn applies the NotIn predicate on the "kubeConfig" field.
func KubeConfigNotIn(vs ...string) predicate.K8sConnector {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sConnector(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKubeConfig), v...))
	})
}

// KubeConfigGT applies the GT predicate on the "kubeConfig" field.
func KubeConfigGT(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKubeConfig), v))
	})
}

// KubeConfigGTE applies the GTE predicate on the "kubeConfig" field.
func KubeConfigGTE(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKubeConfig), v))
	})
}

// KubeConfigLT applies the LT predicate on the "kubeConfig" field.
func KubeConfigLT(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKubeConfig), v))
	})
}

// KubeConfigLTE applies the LTE predicate on the "kubeConfig" field.
func KubeConfigLTE(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKubeConfig), v))
	})
}

// KubeConfigContains applies the Contains predicate on the "kubeConfig" field.
func KubeConfigContains(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKubeConfig), v))
	})
}

// KubeConfigHasPrefix applies the HasPrefix predicate on the "kubeConfig" field.
func KubeConfigHasPrefix(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKubeConfig), v))
	})
}

// KubeConfigHasSuffix applies the HasSuffix predicate on the "kubeConfig" field.
func KubeConfigHasSuffix(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKubeConfig), v))
	})
}

// KubeConfigEqualFold applies the EqualFold predicate on the "kubeConfig" field.
func KubeConfigEqualFold(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKubeConfig), v))
	})
}

// KubeConfigContainsFold applies the ContainsFold predicate on the "kubeConfig" field.
func KubeConfigContainsFold(v string) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKubeConfig), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.K8sConnector) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.K8sConnector) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.K8sConnector) predicate.K8sConnector {
	return predicate.K8sConnector(func(s *sql.Selector) {
		p(s.Not())
	})
}
