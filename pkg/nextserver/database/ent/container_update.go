// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/container"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/proces"
)

// ContainerUpdate is the builder for updating Container entities.
type ContainerUpdate struct {
	config
	hooks    []Hook
	mutation *ContainerMutation
}

// Where appends a list predicates to the ContainerUpdate builder.
func (cu *ContainerUpdate) Where(ps ...predicate.Container) *ContainerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContainerUpdate) SetUpdatedAt(t time.Time) *ContainerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ContainerUpdate) SetDeletedAt(t time.Time) *ContainerUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetType sets the "type" field.
func (cu *ContainerUpdate) SetType(s string) *ContainerUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetContainerId sets the "containerId" field.
func (cu *ContainerUpdate) SetContainerId(s string) *ContainerUpdate {
	cu.mutation.SetContainerId(s)
	return cu
}

// SetName sets the "name" field.
func (cu *ContainerUpdate) SetName(s string) *ContainerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetImage sets the "image" field.
func (cu *ContainerUpdate) SetImage(s string) *ContainerUpdate {
	cu.mutation.SetImage(s)
	return cu
}

// SetInfo sets the "info" field.
func (cu *ContainerUpdate) SetInfo(s []string) *ContainerUpdate {
	cu.mutation.SetInfo(s)
	return cu
}

// SetClusterId sets the "clusterId" field.
func (cu *ContainerUpdate) SetClusterId(u uint) *ContainerUpdate {
	cu.mutation.ResetClusterId()
	cu.mutation.SetClusterId(u)
	return cu
}

// AddClusterId adds u to the "clusterId" field.
func (cu *ContainerUpdate) AddClusterId(u uint) *ContainerUpdate {
	cu.mutation.AddClusterId(u)
	return cu
}

// SetNodeId sets the "nodeId" field.
func (cu *ContainerUpdate) SetNodeId(u uint) *ContainerUpdate {
	cu.mutation.ResetNodeId()
	cu.mutation.SetNodeId(u)
	return cu
}

// AddNodeId adds u to the "nodeId" field.
func (cu *ContainerUpdate) AddNodeId(u uint) *ContainerUpdate {
	cu.mutation.AddNodeId(u)
	return cu
}

// AddProcesIDs adds the "process" edge to the Proces entity by IDs.
func (cu *ContainerUpdate) AddProcesIDs(ids ...uint) *ContainerUpdate {
	cu.mutation.AddProcesIDs(ids...)
	return cu
}

// AddProcess adds the "process" edges to the Proces entity.
func (cu *ContainerUpdate) AddProcess(p ...*Proces) *ContainerUpdate {
	ids := make([]uint, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProcesIDs(ids...)
}

// Mutation returns the ContainerMutation object of the builder.
func (cu *ContainerUpdate) Mutation() *ContainerMutation {
	return cu.mutation
}

// ClearProcess clears all "process" edges to the Proces entity.
func (cu *ContainerUpdate) ClearProcess() *ContainerUpdate {
	cu.mutation.ClearProcess()
	return cu
}

// RemoveProcesIDs removes the "process" edge to Proces entities by IDs.
func (cu *ContainerUpdate) RemoveProcesIDs(ids ...uint) *ContainerUpdate {
	cu.mutation.RemoveProcesIDs(ids...)
	return cu
}

// RemoveProcess removes "process" edges to Proces entities.
func (cu *ContainerUpdate) RemoveProcess(p ...*Proces) *ContainerUpdate {
	ids := make([]uint, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProcesIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContainerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContainerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContainerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContainerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContainerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContainerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := container.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	if _, ok := cu.mutation.DeletedAt(); !ok {
		v := container.UpdateDefaultDeletedAt()
		cu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContainerUpdate) check() error {
	if v, ok := cu.mutation.ContainerId(); ok {
		if err := container.ContainerIdValidator(v); err != nil {
			return &ValidationError{Name: "containerId", err: fmt.Errorf("ent: validator failed for field \"containerId\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Name(); ok {
		if err := container.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Image(); ok {
		if err := container.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf("ent: validator failed for field \"image\": %w", err)}
		}
	}
	return nil
}

func (cu *ContainerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   container.Table,
			Columns: container.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: container.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: container.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: container.FieldDeletedAt,
		})
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: container.FieldType,
		})
	}
	if value, ok := cu.mutation.ContainerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: container.FieldContainerId,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: container.FieldName,
		})
	}
	if value, ok := cu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: container.FieldImage,
		})
	}
	if value, ok := cu.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: container.FieldInfo,
		})
	}
	if value, ok := cu.mutation.ClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: container.FieldClusterId,
		})
	}
	if value, ok := cu.mutation.AddedClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: container.FieldClusterId,
		})
	}
	if value, ok := cu.mutation.NodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: container.FieldNodeId,
		})
	}
	if value, ok := cu.mutation.AddedNodeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: container.FieldNodeId,
		})
	}
	if cu.mutation.ProcessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   container.ProcessTable,
			Columns: []string{container.ProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: proces.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProcessIDs(); len(nodes) > 0 && !cu.mutation.ProcessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   container.ProcessTable,
			Columns: []string{container.ProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: proces.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProcessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   container.ProcessTable,
			Columns: []string{container.ProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: proces.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{container.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ContainerUpdateOne is the builder for updating a single Container entity.
type ContainerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContainerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContainerUpdateOne) SetUpdatedAt(t time.Time) *ContainerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ContainerUpdateOne) SetDeletedAt(t time.Time) *ContainerUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetType sets the "type" field.
func (cuo *ContainerUpdateOne) SetType(s string) *ContainerUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetContainerId sets the "containerId" field.
func (cuo *ContainerUpdateOne) SetContainerId(s string) *ContainerUpdateOne {
	cuo.mutation.SetContainerId(s)
	return cuo
}

// SetName sets the "name" field.
func (cuo *ContainerUpdateOne) SetName(s string) *ContainerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetImage sets the "image" field.
func (cuo *ContainerUpdateOne) SetImage(s string) *ContainerUpdateOne {
	cuo.mutation.SetImage(s)
	return cuo
}

// SetInfo sets the "info" field.
func (cuo *ContainerUpdateOne) SetInfo(s []string) *ContainerUpdateOne {
	cuo.mutation.SetInfo(s)
	return cuo
}

// SetClusterId sets the "clusterId" field.
func (cuo *ContainerUpdateOne) SetClusterId(u uint) *ContainerUpdateOne {
	cuo.mutation.ResetClusterId()
	cuo.mutation.SetClusterId(u)
	return cuo
}

// AddClusterId adds u to the "clusterId" field.
func (cuo *ContainerUpdateOne) AddClusterId(u uint) *ContainerUpdateOne {
	cuo.mutation.AddClusterId(u)
	return cuo
}

// SetNodeId sets the "nodeId" field.
func (cuo *ContainerUpdateOne) SetNodeId(u uint) *ContainerUpdateOne {
	cuo.mutation.ResetNodeId()
	cuo.mutation.SetNodeId(u)
	return cuo
}

// AddNodeId adds u to the "nodeId" field.
func (cuo *ContainerUpdateOne) AddNodeId(u uint) *ContainerUpdateOne {
	cuo.mutation.AddNodeId(u)
	return cuo
}

// AddProcesIDs adds the "process" edge to the Proces entity by IDs.
func (cuo *ContainerUpdateOne) AddProcesIDs(ids ...uint) *ContainerUpdateOne {
	cuo.mutation.AddProcesIDs(ids...)
	return cuo
}

// AddProcess adds the "process" edges to the Proces entity.
func (cuo *ContainerUpdateOne) AddProcess(p ...*Proces) *ContainerUpdateOne {
	ids := make([]uint, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProcesIDs(ids...)
}

// Mutation returns the ContainerMutation object of the builder.
func (cuo *ContainerUpdateOne) Mutation() *ContainerMutation {
	return cuo.mutation
}

// ClearProcess clears all "process" edges to the Proces entity.
func (cuo *ContainerUpdateOne) ClearProcess() *ContainerUpdateOne {
	cuo.mutation.ClearProcess()
	return cuo
}

// RemoveProcesIDs removes the "process" edge to Proces entities by IDs.
func (cuo *ContainerUpdateOne) RemoveProcesIDs(ids ...uint) *ContainerUpdateOne {
	cuo.mutation.RemoveProcesIDs(ids...)
	return cuo
}

// RemoveProcess removes "process" edges to Proces entities.
func (cuo *ContainerUpdateOne) RemoveProcess(p ...*Proces) *ContainerUpdateOne {
	ids := make([]uint, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProcesIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContainerUpdateOne) Select(field string, fields ...string) *ContainerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Container entity.
func (cuo *ContainerUpdateOne) Save(ctx context.Context) (*Container, error) {
	var (
		err  error
		node *Container
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContainerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContainerUpdateOne) SaveX(ctx context.Context) *Container {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContainerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContainerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContainerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := container.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := cuo.mutation.DeletedAt(); !ok {
		v := container.UpdateDefaultDeletedAt()
		cuo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContainerUpdateOne) check() error {
	if v, ok := cuo.mutation.ContainerId(); ok {
		if err := container.ContainerIdValidator(v); err != nil {
			return &ValidationError{Name: "containerId", err: fmt.Errorf("ent: validator failed for field \"containerId\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Name(); ok {
		if err := container.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Image(); ok {
		if err := container.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf("ent: validator failed for field \"image\": %w", err)}
		}
	}
	return nil
}

func (cuo *ContainerUpdateOne) sqlSave(ctx context.Context) (_node *Container, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   container.Table,
			Columns: container.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: container.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Container.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, container.FieldID)
		for _, f := range fields {
			if !container.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != container.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: container.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: container.FieldDeletedAt,
		})
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: container.FieldType,
		})
	}
	if value, ok := cuo.mutation.ContainerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: container.FieldContainerId,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: container.FieldName,
		})
	}
	if value, ok := cuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: container.FieldImage,
		})
	}
	if value, ok := cuo.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: container.FieldInfo,
		})
	}
	if value, ok := cuo.mutation.ClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: container.FieldClusterId,
		})
	}
	if value, ok := cuo.mutation.AddedClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: container.FieldClusterId,
		})
	}
	if value, ok := cuo.mutation.NodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: container.FieldNodeId,
		})
	}
	if value, ok := cuo.mutation.AddedNodeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: container.FieldNodeId,
		})
	}
	if cuo.mutation.ProcessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   container.ProcessTable,
			Columns: []string{container.ProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: proces.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProcessIDs(); len(nodes) > 0 && !cuo.mutation.ProcessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   container.ProcessTable,
			Columns: []string{container.ProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: proces.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProcessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   container.ProcessTable,
			Columns: []string{container.ProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: proces.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Container{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{container.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
