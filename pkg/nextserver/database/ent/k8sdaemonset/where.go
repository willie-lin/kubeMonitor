// Code generated by entc, DO NOT EDIT.

package k8sdaemonset

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// K8sClusterId applies equality check predicate on the "k8sClusterId" field. It's identical to K8sClusterIdEQ.
func K8sClusterId(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldK8sClusterId), v))
	})
}

// K8sNamespaceId applies equality check predicate on the "k8sNamespaceId" field. It's identical to K8sNamespaceIdEQ.
func K8sNamespaceId(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldK8sNamespaceId), v))
	})
}

// K8sObjectId applies equality check predicate on the "k8sObjectId" field. It's identical to K8sObjectIdEQ.
func K8sObjectId(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldK8sObjectId), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// K8sClusterIdEQ applies the EQ predicate on the "k8sClusterId" field.
func K8sClusterIdEQ(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldK8sClusterId), v))
	})
}

// K8sClusterIdNEQ applies the NEQ predicate on the "k8sClusterId" field.
func K8sClusterIdNEQ(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldK8sClusterId), v))
	})
}

// K8sClusterIdIn applies the In predicate on the "k8sClusterId" field.
func K8sClusterIdIn(vs ...uint) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldK8sClusterId), v...))
	})
}

// K8sClusterIdNotIn applies the NotIn predicate on the "k8sClusterId" field.
func K8sClusterIdNotIn(vs ...uint) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldK8sClusterId), v...))
	})
}

// K8sClusterIdGT applies the GT predicate on the "k8sClusterId" field.
func K8sClusterIdGT(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldK8sClusterId), v))
	})
}

// K8sClusterIdGTE applies the GTE predicate on the "k8sClusterId" field.
func K8sClusterIdGTE(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldK8sClusterId), v))
	})
}

// K8sClusterIdLT applies the LT predicate on the "k8sClusterId" field.
func K8sClusterIdLT(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldK8sClusterId), v))
	})
}

// K8sClusterIdLTE applies the LTE predicate on the "k8sClusterId" field.
func K8sClusterIdLTE(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldK8sClusterId), v))
	})
}

// K8sNamespaceIdEQ applies the EQ predicate on the "k8sNamespaceId" field.
func K8sNamespaceIdEQ(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldK8sNamespaceId), v))
	})
}

// K8sNamespaceIdNEQ applies the NEQ predicate on the "k8sNamespaceId" field.
func K8sNamespaceIdNEQ(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldK8sNamespaceId), v))
	})
}

// K8sNamespaceIdIn applies the In predicate on the "k8sNamespaceId" field.
func K8sNamespaceIdIn(vs ...uint) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldK8sNamespaceId), v...))
	})
}

// K8sNamespaceIdNotIn applies the NotIn predicate on the "k8sNamespaceId" field.
func K8sNamespaceIdNotIn(vs ...uint) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldK8sNamespaceId), v...))
	})
}

// K8sNamespaceIdGT applies the GT predicate on the "k8sNamespaceId" field.
func K8sNamespaceIdGT(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldK8sNamespaceId), v))
	})
}

// K8sNamespaceIdGTE applies the GTE predicate on the "k8sNamespaceId" field.
func K8sNamespaceIdGTE(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldK8sNamespaceId), v))
	})
}

// K8sNamespaceIdLT applies the LT predicate on the "k8sNamespaceId" field.
func K8sNamespaceIdLT(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldK8sNamespaceId), v))
	})
}

// K8sNamespaceIdLTE applies the LTE predicate on the "k8sNamespaceId" field.
func K8sNamespaceIdLTE(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldK8sNamespaceId), v))
	})
}

// K8sObjectIdEQ applies the EQ predicate on the "k8sObjectId" field.
func K8sObjectIdEQ(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldK8sObjectId), v))
	})
}

// K8sObjectIdNEQ applies the NEQ predicate on the "k8sObjectId" field.
func K8sObjectIdNEQ(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldK8sObjectId), v))
	})
}

// K8sObjectIdIn applies the In predicate on the "k8sObjectId" field.
func K8sObjectIdIn(vs ...uint) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldK8sObjectId), v...))
	})
}

// K8sObjectIdNotIn applies the NotIn predicate on the "k8sObjectId" field.
func K8sObjectIdNotIn(vs ...uint) predicate.K8sDaemonSet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldK8sObjectId), v...))
	})
}

// K8sObjectIdGT applies the GT predicate on the "k8sObjectId" field.
func K8sObjectIdGT(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldK8sObjectId), v))
	})
}

// K8sObjectIdGTE applies the GTE predicate on the "k8sObjectId" field.
func K8sObjectIdGTE(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldK8sObjectId), v))
	})
}

// K8sObjectIdLT applies the LT predicate on the "k8sObjectId" field.
func K8sObjectIdLT(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldK8sObjectId), v))
	})
}

// K8sObjectIdLTE applies the LTE predicate on the "k8sObjectId" field.
func K8sObjectIdLTE(v uint) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldK8sObjectId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.K8sDaemonSet) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.K8sDaemonSet) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.K8sDaemonSet) predicate.K8sDaemonSet {
	return predicate.K8sDaemonSet(func(s *sql.Selector) {
		p(s.Not())
	})
}
