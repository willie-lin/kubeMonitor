// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sdaemonset"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// K8sDaemonSetUpdate is the builder for updating K8sDaemonSet entities.
type K8sDaemonSetUpdate struct {
	config
	hooks    []Hook
	mutation *K8sDaemonSetMutation
}

// Where appends a list predicates to the K8sDaemonSetUpdate builder.
func (kdsu *K8sDaemonSetUpdate) Where(ps ...predicate.K8sDaemonSet) *K8sDaemonSetUpdate {
	kdsu.mutation.Where(ps...)
	return kdsu
}

// SetUpdatedAt sets the "updated_at" field.
func (kdsu *K8sDaemonSetUpdate) SetUpdatedAt(t time.Time) *K8sDaemonSetUpdate {
	kdsu.mutation.SetUpdatedAt(t)
	return kdsu
}

// SetDeletedAt sets the "deleted_at" field.
func (kdsu *K8sDaemonSetUpdate) SetDeletedAt(t time.Time) *K8sDaemonSetUpdate {
	kdsu.mutation.SetDeletedAt(t)
	return kdsu
}

// SetName sets the "name" field.
func (kdsu *K8sDaemonSetUpdate) SetName(s string) *K8sDaemonSetUpdate {
	kdsu.mutation.SetName(s)
	return kdsu
}

// SetK8sClusterId sets the "k8sClusterId" field.
func (kdsu *K8sDaemonSetUpdate) SetK8sClusterId(u uint) *K8sDaemonSetUpdate {
	kdsu.mutation.ResetK8sClusterId()
	kdsu.mutation.SetK8sClusterId(u)
	return kdsu
}

// AddK8sClusterId adds u to the "k8sClusterId" field.
func (kdsu *K8sDaemonSetUpdate) AddK8sClusterId(u uint) *K8sDaemonSetUpdate {
	kdsu.mutation.AddK8sClusterId(u)
	return kdsu
}

// SetK8sNamespaceId sets the "k8sNamespaceId" field.
func (kdsu *K8sDaemonSetUpdate) SetK8sNamespaceId(u uint) *K8sDaemonSetUpdate {
	kdsu.mutation.ResetK8sNamespaceId()
	kdsu.mutation.SetK8sNamespaceId(u)
	return kdsu
}

// AddK8sNamespaceId adds u to the "k8sNamespaceId" field.
func (kdsu *K8sDaemonSetUpdate) AddK8sNamespaceId(u uint) *K8sDaemonSetUpdate {
	kdsu.mutation.AddK8sNamespaceId(u)
	return kdsu
}

// SetK8sObjectId sets the "k8sObjectId" field.
func (kdsu *K8sDaemonSetUpdate) SetK8sObjectId(u uint) *K8sDaemonSetUpdate {
	kdsu.mutation.ResetK8sObjectId()
	kdsu.mutation.SetK8sObjectId(u)
	return kdsu
}

// AddK8sObjectId adds u to the "k8sObjectId" field.
func (kdsu *K8sDaemonSetUpdate) AddK8sObjectId(u uint) *K8sDaemonSetUpdate {
	kdsu.mutation.AddK8sObjectId(u)
	return kdsu
}

// Mutation returns the K8sDaemonSetMutation object of the builder.
func (kdsu *K8sDaemonSetUpdate) Mutation() *K8sDaemonSetMutation {
	return kdsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kdsu *K8sDaemonSetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kdsu.defaults()
	if len(kdsu.hooks) == 0 {
		if err = kdsu.check(); err != nil {
			return 0, err
		}
		affected, err = kdsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sDaemonSetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kdsu.check(); err != nil {
				return 0, err
			}
			kdsu.mutation = mutation
			affected, err = kdsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kdsu.hooks) - 1; i >= 0; i-- {
			if kdsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kdsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kdsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kdsu *K8sDaemonSetUpdate) SaveX(ctx context.Context) int {
	affected, err := kdsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kdsu *K8sDaemonSetUpdate) Exec(ctx context.Context) error {
	_, err := kdsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kdsu *K8sDaemonSetUpdate) ExecX(ctx context.Context) {
	if err := kdsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kdsu *K8sDaemonSetUpdate) defaults() {
	if _, ok := kdsu.mutation.UpdatedAt(); !ok {
		v := k8sdaemonset.UpdateDefaultUpdatedAt()
		kdsu.mutation.SetUpdatedAt(v)
	}
	if _, ok := kdsu.mutation.DeletedAt(); !ok {
		v := k8sdaemonset.UpdateDefaultDeletedAt()
		kdsu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kdsu *K8sDaemonSetUpdate) check() error {
	if v, ok := kdsu.mutation.Name(); ok {
		if err := k8sdaemonset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (kdsu *K8sDaemonSetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sdaemonset.Table,
			Columns: k8sdaemonset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sdaemonset.FieldID,
			},
		},
	}
	if ps := kdsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kdsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sdaemonset.FieldUpdatedAt,
		})
	}
	if value, ok := kdsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sdaemonset.FieldDeletedAt,
		})
	}
	if value, ok := kdsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sdaemonset.FieldName,
		})
	}
	if value, ok := kdsu.mutation.K8sClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sClusterId,
		})
	}
	if value, ok := kdsu.mutation.AddedK8sClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sClusterId,
		})
	}
	if value, ok := kdsu.mutation.K8sNamespaceId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sNamespaceId,
		})
	}
	if value, ok := kdsu.mutation.AddedK8sNamespaceId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sNamespaceId,
		})
	}
	if value, ok := kdsu.mutation.K8sObjectId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sObjectId,
		})
	}
	if value, ok := kdsu.mutation.AddedK8sObjectId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sObjectId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kdsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8sdaemonset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// K8sDaemonSetUpdateOne is the builder for updating a single K8sDaemonSet entity.
type K8sDaemonSetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *K8sDaemonSetMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (kdsuo *K8sDaemonSetUpdateOne) SetUpdatedAt(t time.Time) *K8sDaemonSetUpdateOne {
	kdsuo.mutation.SetUpdatedAt(t)
	return kdsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (kdsuo *K8sDaemonSetUpdateOne) SetDeletedAt(t time.Time) *K8sDaemonSetUpdateOne {
	kdsuo.mutation.SetDeletedAt(t)
	return kdsuo
}

// SetName sets the "name" field.
func (kdsuo *K8sDaemonSetUpdateOne) SetName(s string) *K8sDaemonSetUpdateOne {
	kdsuo.mutation.SetName(s)
	return kdsuo
}

// SetK8sClusterId sets the "k8sClusterId" field.
func (kdsuo *K8sDaemonSetUpdateOne) SetK8sClusterId(u uint) *K8sDaemonSetUpdateOne {
	kdsuo.mutation.ResetK8sClusterId()
	kdsuo.mutation.SetK8sClusterId(u)
	return kdsuo
}

// AddK8sClusterId adds u to the "k8sClusterId" field.
func (kdsuo *K8sDaemonSetUpdateOne) AddK8sClusterId(u uint) *K8sDaemonSetUpdateOne {
	kdsuo.mutation.AddK8sClusterId(u)
	return kdsuo
}

// SetK8sNamespaceId sets the "k8sNamespaceId" field.
func (kdsuo *K8sDaemonSetUpdateOne) SetK8sNamespaceId(u uint) *K8sDaemonSetUpdateOne {
	kdsuo.mutation.ResetK8sNamespaceId()
	kdsuo.mutation.SetK8sNamespaceId(u)
	return kdsuo
}

// AddK8sNamespaceId adds u to the "k8sNamespaceId" field.
func (kdsuo *K8sDaemonSetUpdateOne) AddK8sNamespaceId(u uint) *K8sDaemonSetUpdateOne {
	kdsuo.mutation.AddK8sNamespaceId(u)
	return kdsuo
}

// SetK8sObjectId sets the "k8sObjectId" field.
func (kdsuo *K8sDaemonSetUpdateOne) SetK8sObjectId(u uint) *K8sDaemonSetUpdateOne {
	kdsuo.mutation.ResetK8sObjectId()
	kdsuo.mutation.SetK8sObjectId(u)
	return kdsuo
}

// AddK8sObjectId adds u to the "k8sObjectId" field.
func (kdsuo *K8sDaemonSetUpdateOne) AddK8sObjectId(u uint) *K8sDaemonSetUpdateOne {
	kdsuo.mutation.AddK8sObjectId(u)
	return kdsuo
}

// Mutation returns the K8sDaemonSetMutation object of the builder.
func (kdsuo *K8sDaemonSetUpdateOne) Mutation() *K8sDaemonSetMutation {
	return kdsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kdsuo *K8sDaemonSetUpdateOne) Select(field string, fields ...string) *K8sDaemonSetUpdateOne {
	kdsuo.fields = append([]string{field}, fields...)
	return kdsuo
}

// Save executes the query and returns the updated K8sDaemonSet entity.
func (kdsuo *K8sDaemonSetUpdateOne) Save(ctx context.Context) (*K8sDaemonSet, error) {
	var (
		err  error
		node *K8sDaemonSet
	)
	kdsuo.defaults()
	if len(kdsuo.hooks) == 0 {
		if err = kdsuo.check(); err != nil {
			return nil, err
		}
		node, err = kdsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sDaemonSetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kdsuo.check(); err != nil {
				return nil, err
			}
			kdsuo.mutation = mutation
			node, err = kdsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kdsuo.hooks) - 1; i >= 0; i-- {
			if kdsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kdsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kdsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kdsuo *K8sDaemonSetUpdateOne) SaveX(ctx context.Context) *K8sDaemonSet {
	node, err := kdsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kdsuo *K8sDaemonSetUpdateOne) Exec(ctx context.Context) error {
	_, err := kdsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kdsuo *K8sDaemonSetUpdateOne) ExecX(ctx context.Context) {
	if err := kdsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kdsuo *K8sDaemonSetUpdateOne) defaults() {
	if _, ok := kdsuo.mutation.UpdatedAt(); !ok {
		v := k8sdaemonset.UpdateDefaultUpdatedAt()
		kdsuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := kdsuo.mutation.DeletedAt(); !ok {
		v := k8sdaemonset.UpdateDefaultDeletedAt()
		kdsuo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kdsuo *K8sDaemonSetUpdateOne) check() error {
	if v, ok := kdsuo.mutation.Name(); ok {
		if err := k8sdaemonset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (kdsuo *K8sDaemonSetUpdateOne) sqlSave(ctx context.Context) (_node *K8sDaemonSet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8sdaemonset.Table,
			Columns: k8sdaemonset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sdaemonset.FieldID,
			},
		},
	}
	id, ok := kdsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing K8sDaemonSet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := kdsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, k8sdaemonset.FieldID)
		for _, f := range fields {
			if !k8sdaemonset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != k8sdaemonset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kdsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kdsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sdaemonset.FieldUpdatedAt,
		})
	}
	if value, ok := kdsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sdaemonset.FieldDeletedAt,
		})
	}
	if value, ok := kdsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sdaemonset.FieldName,
		})
	}
	if value, ok := kdsuo.mutation.K8sClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sClusterId,
		})
	}
	if value, ok := kdsuo.mutation.AddedK8sClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sClusterId,
		})
	}
	if value, ok := kdsuo.mutation.K8sNamespaceId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sNamespaceId,
		})
	}
	if value, ok := kdsuo.mutation.AddedK8sNamespaceId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sNamespaceId,
		})
	}
	if value, ok := kdsuo.mutation.K8sObjectId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sObjectId,
		})
	}
	if value, ok := kdsuo.mutation.AddedK8sObjectId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sdaemonset.FieldK8sObjectId,
		})
	}
	_node = &K8sDaemonSet{config: kdsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kdsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8sdaemonset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
