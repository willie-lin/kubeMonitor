// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/cluster"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/node"
)

// Node is the model entity for the Node schema.
type Node struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// Ipv4 holds the value of the "ipv4" field.
	Ipv4 string `json:"ipv4,omitempty"`
	// Ipv6 holds the value of the "ipv6" field.
	Ipv6 string `json:"ipv6,omitempty"`
	// PublicIpv4 holds the value of the "public_ipv4" field.
	PublicIpv4 string `json:"public_ipv4,omitempty"`
	// PublicIpv6 holds the value of the "public_ipv6" field.
	PublicIpv6 string `json:"public_ipv6,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// PlatformFamily holds the value of the "platformFamily" field.
	PlatformFamily string `json:"platformFamily,omitempty"`
	// Info holds the value of the "info" field.
	Info []string `json:"info,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty"`
	// AgentId holds the value of the "agentId" field.
	AgentId uint `json:"agentId,omitempty"`
	// ClusterId holds the value of the "clusterId" field.
	ClusterId uint `json:"clusterId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NodeQuery when eager-loading is set.
	Edges         NodeEdges `json:"edges"`
	agent_node    *uint
	cluster_nodes *uint
}

// NodeEdges holds the relations/edges for other nodes in the graph.
type NodeEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Cluster `json:"owner,omitempty"`
	// Containers holds the value of the containers edge.
	Containers []*Container `json:"containers,omitempty"`
	// Process holds the value of the process edge.
	Process []*Proces `json:"process,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeEdges) OwnerOrErr() (*Cluster, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cluster.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ContainersOrErr returns the Containers value or an error if the edge
// was not loaded in eager-loading.
func (e NodeEdges) ContainersOrErr() ([]*Container, error) {
	if e.loadedTypes[1] {
		return e.Containers, nil
	}
	return nil, &NotLoadedError{edge: "containers"}
}

// ProcessOrErr returns the Process value or an error if the edge
// was not loaded in eager-loading.
func (e NodeEdges) ProcessOrErr() ([]*Proces, error) {
	if e.loadedTypes[2] {
		return e.Process, nil
	}
	return nil, &NotLoadedError{edge: "process"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Node) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case node.FieldInfo:
			values[i] = new([]byte)
		case node.FieldDisabled:
			values[i] = new(sql.NullBool)
		case node.FieldID, node.FieldAgentId, node.FieldClusterId:
			values[i] = new(sql.NullInt64)
		case node.FieldHost, node.FieldIpv4, node.FieldIpv6, node.FieldPublicIpv4, node.FieldPublicIpv6, node.FieldOs, node.FieldPlatform, node.FieldPlatformFamily, node.FieldUUID, node.FieldDescription:
			values[i] = new(sql.NullString)
		case node.FieldCreatedAt, node.FieldUpdatedAt, node.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case node.ForeignKeys[0]: // agent_node
			values[i] = new(sql.NullInt64)
		case node.ForeignKeys[1]: // cluster_nodes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Node", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Node fields.
func (n *Node) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case node.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = uint(value.Int64)
		case node.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case node.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case node.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				n.DeletedAt = value.Time
			}
		case node.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				n.Host = value.String
			}
		case node.FieldIpv4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ipv4", values[i])
			} else if value.Valid {
				n.Ipv4 = value.String
			}
		case node.FieldIpv6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ipv6", values[i])
			} else if value.Valid {
				n.Ipv6 = value.String
			}
		case node.FieldPublicIpv4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_ipv4", values[i])
			} else if value.Valid {
				n.PublicIpv4 = value.String
			}
		case node.FieldPublicIpv6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_ipv6", values[i])
			} else if value.Valid {
				n.PublicIpv6 = value.String
			}
		case node.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				n.Os = value.String
			}
		case node.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				n.Platform = value.String
			}
		case node.FieldPlatformFamily:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platformFamily", values[i])
			} else if value.Valid {
				n.PlatformFamily = value.String
			}
		case node.FieldInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Info); err != nil {
					return fmt.Errorf("unmarshal field info: %w", err)
				}
			}
		case node.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				n.UUID = value.String
			}
		case node.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				n.Description = value.String
			}
		case node.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				n.Disabled = value.Bool
			}
		case node.FieldAgentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agentId", values[i])
			} else if value.Valid {
				n.AgentId = uint(value.Int64)
			}
		case node.FieldClusterId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clusterId", values[i])
			} else if value.Valid {
				n.ClusterId = uint(value.Int64)
			}
		case node.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field agent_node", value)
			} else if value.Valid {
				n.agent_node = new(uint)
				*n.agent_node = uint(value.Int64)
			}
		case node.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cluster_nodes", value)
			} else if value.Valid {
				n.cluster_nodes = new(uint)
				*n.cluster_nodes = uint(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Node entity.
func (n *Node) QueryOwner() *ClusterQuery {
	return (&NodeClient{config: n.config}).QueryOwner(n)
}

// QueryContainers queries the "containers" edge of the Node entity.
func (n *Node) QueryContainers() *ContainerQuery {
	return (&NodeClient{config: n.config}).QueryContainers(n)
}

// QueryProcess queries the "process" edge of the Node entity.
func (n *Node) QueryProcess() *ProcesQuery {
	return (&NodeClient{config: n.config}).QueryProcess(n)
}

// Update returns a builder for updating this Node.
// Note that you need to call Node.Unwrap() before calling this method if this Node
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Node) Update() *NodeUpdateOne {
	return (&NodeClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Node entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Node) Unwrap() *Node {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Node is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Node) String() string {
	var builder strings.Builder
	builder.WriteString("Node(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(n.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", host=")
	builder.WriteString(n.Host)
	builder.WriteString(", ipv4=")
	builder.WriteString(n.Ipv4)
	builder.WriteString(", ipv6=")
	builder.WriteString(n.Ipv6)
	builder.WriteString(", public_ipv4=")
	builder.WriteString(n.PublicIpv4)
	builder.WriteString(", public_ipv6=")
	builder.WriteString(n.PublicIpv6)
	builder.WriteString(", os=")
	builder.WriteString(n.Os)
	builder.WriteString(", platform=")
	builder.WriteString(n.Platform)
	builder.WriteString(", platformFamily=")
	builder.WriteString(n.PlatformFamily)
	builder.WriteString(", info=")
	builder.WriteString(fmt.Sprintf("%v", n.Info))
	builder.WriteString(", uuid=")
	builder.WriteString(n.UUID)
	builder.WriteString(", description=")
	builder.WriteString(n.Description)
	builder.WriteString(", disabled=")
	builder.WriteString(fmt.Sprintf("%v", n.Disabled))
	builder.WriteString(", agentId=")
	builder.WriteString(fmt.Sprintf("%v", n.AgentId))
	builder.WriteString(", clusterId=")
	builder.WriteString(fmt.Sprintf("%v", n.ClusterId))
	builder.WriteByte(')')
	return builder.String()
}

// Nodes is a parsable slice of Node.
type Nodes []*Node

func (n Nodes) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
