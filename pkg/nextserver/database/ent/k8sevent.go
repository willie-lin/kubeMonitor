// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sevent"
)

// K8sEvent is the model entity for the K8sEvent schema.
type K8sEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Ts holds the value of the "ts" field.
	Ts time.Time `json:"ts,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// EndpointId holds the value of the "endpointId" field.
	EndpointId uint `json:"endpointId,omitempty"`
	// TypeId holds the value of the "typeId" field.
	TypeId uint `json:"typeId,omitempty"`
	// NameId holds the value of the "nameId" field.
	NameId uint `json:"nameId,omitempty"`
	// LabelId holds the value of the "labelId" field.
	LabelId uint `json:"labelId,omitempty"`
	// ClusterId holds the value of the "clusterId" field.
	ClusterId uint `json:"clusterId,omitempty"`
	// NamespaceId holds the value of the "namespaceId" field.
	NamespaceId uint `json:"namespaceId,omitempty"`
	// NodeId holds the value of the "nodeId" field.
	NodeId uint `json:"nodeId,omitempty"`
	// ContainerId holds the value of the "containerId" field.
	ContainerId uint `json:"containerId,omitempty"`
	// PodId holds the value of the "podId" field.
	PodId uint `json:"podId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*K8sEvent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case k8sevent.FieldValue:
			values[i] = new(sql.NullFloat64)
		case k8sevent.FieldID, k8sevent.FieldEndpointId, k8sevent.FieldTypeId, k8sevent.FieldNameId, k8sevent.FieldLabelId, k8sevent.FieldClusterId, k8sevent.FieldNamespaceId, k8sevent.FieldNodeId, k8sevent.FieldContainerId, k8sevent.FieldPodId:
			values[i] = new(sql.NullInt64)
		case k8sevent.FieldCreatedAt, k8sevent.FieldUpdatedAt, k8sevent.FieldDeletedAt, k8sevent.FieldTs:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type K8sEvent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the K8sEvent fields.
func (ke *K8sEvent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case k8sevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ke.ID = int(value.Int64)
		case k8sevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ke.CreatedAt = value.Time
			}
		case k8sevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ke.UpdatedAt = value.Time
			}
		case k8sevent.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ke.DeletedAt = value.Time
			}
		case k8sevent.FieldTs:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ts", values[i])
			} else if value.Valid {
				ke.Ts = value.Time
			}
		case k8sevent.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ke.Value = value.Float64
			}
		case k8sevent.FieldEndpointId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field endpointId", values[i])
			} else if value.Valid {
				ke.EndpointId = uint(value.Int64)
			}
		case k8sevent.FieldTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field typeId", values[i])
			} else if value.Valid {
				ke.TypeId = uint(value.Int64)
			}
		case k8sevent.FieldNameId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nameId", values[i])
			} else if value.Valid {
				ke.NameId = uint(value.Int64)
			}
		case k8sevent.FieldLabelId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field labelId", values[i])
			} else if value.Valid {
				ke.LabelId = uint(value.Int64)
			}
		case k8sevent.FieldClusterId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clusterId", values[i])
			} else if value.Valid {
				ke.ClusterId = uint(value.Int64)
			}
		case k8sevent.FieldNamespaceId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field namespaceId", values[i])
			} else if value.Valid {
				ke.NamespaceId = uint(value.Int64)
			}
		case k8sevent.FieldNodeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nodeId", values[i])
			} else if value.Valid {
				ke.NodeId = uint(value.Int64)
			}
		case k8sevent.FieldContainerId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field containerId", values[i])
			} else if value.Valid {
				ke.ContainerId = uint(value.Int64)
			}
		case k8sevent.FieldPodId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field podId", values[i])
			} else if value.Valid {
				ke.PodId = uint(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this K8sEvent.
// Note that you need to call K8sEvent.Unwrap() before calling this method if this K8sEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ke *K8sEvent) Update() *K8sEventUpdateOne {
	return (&K8sEventClient{config: ke.config}).UpdateOne(ke)
}

// Unwrap unwraps the K8sEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ke *K8sEvent) Unwrap() *K8sEvent {
	tx, ok := ke.config.driver.(*txDriver)
	if !ok {
		panic("ent: K8sEvent is not a transactional entity")
	}
	ke.config.driver = tx.drv
	return ke
}

// String implements the fmt.Stringer.
func (ke *K8sEvent) String() string {
	var builder strings.Builder
	builder.WriteString("K8sEvent(")
	builder.WriteString(fmt.Sprintf("id=%v", ke.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ke.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ke.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(ke.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ts=")
	builder.WriteString(ke.Ts.Format(time.ANSIC))
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", ke.Value))
	builder.WriteString(", endpointId=")
	builder.WriteString(fmt.Sprintf("%v", ke.EndpointId))
	builder.WriteString(", typeId=")
	builder.WriteString(fmt.Sprintf("%v", ke.TypeId))
	builder.WriteString(", nameId=")
	builder.WriteString(fmt.Sprintf("%v", ke.NameId))
	builder.WriteString(", labelId=")
	builder.WriteString(fmt.Sprintf("%v", ke.LabelId))
	builder.WriteString(", clusterId=")
	builder.WriteString(fmt.Sprintf("%v", ke.ClusterId))
	builder.WriteString(", namespaceId=")
	builder.WriteString(fmt.Sprintf("%v", ke.NamespaceId))
	builder.WriteString(", nodeId=")
	builder.WriteString(fmt.Sprintf("%v", ke.NodeId))
	builder.WriteString(", containerId=")
	builder.WriteString(fmt.Sprintf("%v", ke.ContainerId))
	builder.WriteString(", podId=")
	builder.WriteString(fmt.Sprintf("%v", ke.PodId))
	builder.WriteByte(')')
	return builder.String()
}

// K8sEvents is a parsable slice of K8sEvent.
type K8sEvents []*K8sEvent

func (ke K8sEvents) config(cfg config) {
	for _i := range ke {
		ke[_i].config = cfg
	}
}
