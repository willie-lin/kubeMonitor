// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AgentsColumns holds the columns for the "agents" table.
	AgentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "online", Type: field.TypeBool},
		{Name: "version", Type: field.TypeString, Size: 32},
		{Name: "ipv4", Type: field.TypeString, Size: 16},
		{Name: "ipv6", Type: field.TypeString, Size: 40},
		{Name: "public_ipv4", Type: field.TypeString, Size: 16},
		{Name: "public_ipv6", Type: field.TypeString, Size: 40},
		{Name: "last_contact", Type: field.TypeTime},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "uuid", Type: field.TypeString, Unique: true, Size: 128},
		{Name: "machine_id", Type: field.TypeString, Unique: true, Size: 128},
		{Name: "description", Type: field.TypeString},
		{Name: "cluster_id", Type: field.TypeUint},
		{Name: "cluster_agents", Type: field.TypeUint, Nullable: true},
	}
	// AgentsTable holds the schema information for the "agents" table.
	AgentsTable = &schema.Table{
		Name:       "agents",
		Columns:    AgentsColumns,
		PrimaryKey: []*schema.Column{AgentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "agents_clusters_agents",
				Columns:    []*schema.Column{AgentsColumns[16]},
				RefColumns: []*schema.Column{ClustersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "agent_uuid_machine_id_cluster_id",
				Unique:  false,
				Columns: []*schema.Column{AgentsColumns[12], AgentsColumns[13], AgentsColumns[15]},
			},
		},
	}
	// ClustersColumns holds the columns for the "clusters" table.
	ClustersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 128},
		{Name: "description", Type: field.TypeString},
		{Name: "disabled", Type: field.TypeBool},
	}
	// ClustersTable holds the schema information for the "clusters" table.
	ClustersTable = &schema.Table{
		Name:       "clusters",
		Columns:    ClustersColumns,
		PrimaryKey: []*schema.Column{ClustersColumns[0]},
	}
	// ContainersColumns holds the columns for the "containers" table.
	ContainersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeString},
		{Name: "container_id", Type: field.TypeString, Size: 128},
		{Name: "name", Type: field.TypeString, Size: 256},
		{Name: "image", Type: field.TypeString, Size: 128},
		{Name: "info", Type: field.TypeJSON},
		{Name: "cluster_id", Type: field.TypeUint},
		{Name: "node_id", Type: field.TypeUint},
		{Name: "node_containers", Type: field.TypeUint, Nullable: true},
	}
	// ContainersTable holds the schema information for the "containers" table.
	ContainersTable = &schema.Table{
		Name:       "containers",
		Columns:    ContainersColumns,
		PrimaryKey: []*schema.Column{ContainersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "containers_nodes_containers",
				Columns:    []*schema.Column{ContainersColumns[11]},
				RefColumns: []*schema.Column{NodesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "container_container_id_cluster_id_node_id",
				Unique:  false,
				Columns: []*schema.Column{ContainersColumns[5], ContainersColumns[9], ContainersColumns[10]},
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "ts", Type: field.TypeTime},
		{Name: "value", Type: field.TypeFloat64},
		{Name: "acked", Type: field.TypeBool},
		{Name: "acked_ts", Type: field.TypeTime},
		{Name: "endpoint_id", Type: field.TypeUint},
		{Name: "type_id", Type: field.TypeUint},
		{Name: "name_id", Type: field.TypeUint},
		{Name: "label_id", Type: field.TypeUint},
		{Name: "cluster_id", Type: field.TypeUint},
		{Name: "agent_id", Type: field.TypeUint},
		{Name: "node_id", Type: field.TypeUint},
		{Name: "proces_id", Type: field.TypeUint},
		{Name: "container_id", Type: field.TypeUint},
		{Name: "pod_id", Type: field.TypeUint},
		{Name: "metric_endpoint_events", Type: field.TypeUint, Nullable: true},
		{Name: "metric_label_events", Type: field.TypeUint, Nullable: true},
		{Name: "metric_name_events", Type: field.TypeUint, Nullable: true},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_metricEndpoints_events",
				Columns:    []*schema.Column{EventsColumns[18]},
				RefColumns: []*schema.Column{MetricEndpointsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "events_metricLabels_events",
				Columns:    []*schema.Column{EventsColumns[19]},
				RefColumns: []*schema.Column{MetricLabelsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "events_metricNames_events",
				Columns:    []*schema.Column{EventsColumns[20]},
				RefColumns: []*schema.Column{MetricNamesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IncidentBasicRulesColumns holds the columns for the "incidentBasicRules" table.
	IncidentBasicRulesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "query", Type: field.TypeString},
	}
	// IncidentBasicRulesTable holds the schema information for the "incidentBasicRules" table.
	IncidentBasicRulesTable = &schema.Table{
		Name:       "incidentBasicRules",
		Columns:    IncidentBasicRulesColumns,
		PrimaryKey: []*schema.Column{IncidentBasicRulesColumns[0]},
	}
	// K8sClustersColumns holds the columns for the "k8sClusters" table.
	K8sClustersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 128},
		{Name: "agent_cluster_id", Type: field.TypeUint},
	}
	// K8sClustersTable holds the schema information for the "k8sClusters" table.
	K8sClustersTable = &schema.Table{
		Name:       "k8sClusters",
		Columns:    K8sClustersColumns,
		PrimaryKey: []*schema.Column{K8sClustersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "k8scluster_name",
				Unique:  false,
				Columns: []*schema.Column{K8sClustersColumns[4]},
			},
		},
	}
	// K8sConnectorsColumns holds the columns for the "k8sConnectors" table.
	K8sConnectorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 128},
		{Name: "status", Type: field.TypeString, Size: 32},
		{Name: "method", Type: field.TypeString, Size: 32},
		{Name: "in_cluster", Type: field.TypeBool},
		{Name: "bearer_token", Type: field.TypeString},
		{Name: "kube_config", Type: field.TypeString},
	}
	// K8sConnectorsTable holds the schema information for the "k8sConnectors" table.
	K8sConnectorsTable = &schema.Table{
		Name:       "k8sConnectors",
		Columns:    K8sConnectorsColumns,
		PrimaryKey: []*schema.Column{K8sConnectorsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "k8sconnector_name",
				Unique:  false,
				Columns: []*schema.Column{K8sConnectorsColumns[4]},
			},
		},
	}
	// K8sContainersColumns holds the columns for the "k8sContainers" table.
	K8sContainersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 256},
		{Name: "image", Type: field.TypeString, Size: 256},
		{Name: "container_type", Type: field.TypeString, Size: 64},
		{Name: "container_id", Type: field.TypeString, Size: 256},
		{Name: "k8s_cluster_id", Type: field.TypeUint},
		{Name: "k8s_namespace_id", Type: field.TypeUint},
		{Name: "k8s_pod_id", Type: field.TypeUint},
	}
	// K8sContainersTable holds the schema information for the "k8sContainers" table.
	K8sContainersTable = &schema.Table{
		Name:       "k8sContainers",
		Columns:    K8sContainersColumns,
		PrimaryKey: []*schema.Column{K8sContainersColumns[0]},
	}
	// K8sDaemonSetsColumns holds the columns for the "k8sDaemonSets" table.
	K8sDaemonSetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 256},
		{Name: "k8s_cluster_id", Type: field.TypeUint},
		{Name: "k8s_namespace_id", Type: field.TypeUint},
		{Name: "k8s_object_id", Type: field.TypeUint},
	}
	// K8sDaemonSetsTable holds the schema information for the "k8sDaemonSets" table.
	K8sDaemonSetsTable = &schema.Table{
		Name:       "k8sDaemonSets",
		Columns:    K8sDaemonSetsColumns,
		PrimaryKey: []*schema.Column{K8sDaemonSetsColumns[0]},
	}
	// K8sDeploymentsColumns holds the columns for the "k8sDeployments" table.
	K8sDeploymentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 256},
		{Name: "k8s_cluster_id", Type: field.TypeUint},
		{Name: "k8s_namespace_id", Type: field.TypeUint},
		{Name: "k8s_object_id", Type: field.TypeUint},
	}
	// K8sDeploymentsTable holds the schema information for the "k8sDeployments" table.
	K8sDeploymentsTable = &schema.Table{
		Name:       "k8sDeployments",
		Columns:    K8sDeploymentsColumns,
		PrimaryKey: []*schema.Column{K8sDeploymentsColumns[0]},
	}
	// K8sEventsColumns holds the columns for the "k8sEvents" table.
	K8sEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "ts", Type: field.TypeTime},
		{Name: "value", Type: field.TypeFloat64},
		{Name: "endpoint_id", Type: field.TypeUint},
		{Name: "type_id", Type: field.TypeUint},
		{Name: "name_id", Type: field.TypeUint},
		{Name: "label_id", Type: field.TypeUint},
		{Name: "cluster_id", Type: field.TypeUint},
		{Name: "namespace_id", Type: field.TypeUint},
		{Name: "node_id", Type: field.TypeUint},
		{Name: "container_id", Type: field.TypeUint},
		{Name: "pod_id", Type: field.TypeUint},
	}
	// K8sEventsTable holds the schema information for the "k8sEvents" table.
	K8sEventsTable = &schema.Table{
		Name:       "k8sEvents",
		Columns:    K8sEventsColumns,
		PrimaryKey: []*schema.Column{K8sEventsColumns[0]},
	}
	// K8sLabelsColumns holds the columns for the "k8sLabels" table.
	K8sLabelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "label", Type: field.TypeString, Size: 256},
		{Name: "k8s_object_id", Type: field.TypeUint},
	}
	// K8sLabelsTable holds the schema information for the "k8sLabels" table.
	K8sLabelsTable = &schema.Table{
		Name:       "k8sLabels",
		Columns:    K8sLabelsColumns,
		PrimaryKey: []*schema.Column{K8sLabelsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "k8slabel_label",
				Unique:  false,
				Columns: []*schema.Column{K8sLabelsColumns[4]},
			},
		},
	}
	// K8sMetricsColumns holds the columns for the "k8sMetrics" table.
	K8sMetricsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "ts", Type: field.TypeTime},
		{Name: "value", Type: field.TypeFloat64},
		{Name: "endpoint_id", Type: field.TypeUint},
		{Name: "type_id", Type: field.TypeUint},
		{Name: "name_id", Type: field.TypeUint},
		{Name: "label_id", Type: field.TypeUint},
		{Name: "k8s_cluster_id", Type: field.TypeUint},
		{Name: "k8s_node_id", Type: field.TypeUint},
		{Name: "k8s_namespace_id", Type: field.TypeUint},
		{Name: "k8s_container_id", Type: field.TypeUint},
	}
	// K8sMetricsTable holds the schema information for the "k8sMetrics" table.
	K8sMetricsTable = &schema.Table{
		Name:       "k8sMetrics",
		Columns:    K8sMetricsColumns,
		PrimaryKey: []*schema.Column{K8sMetricsColumns[0]},
	}
	// K8sNamespacesColumns holds the columns for the "k8sNamespaces" table.
	K8sNamespacesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 128},
		{Name: "k8s_cluster_id", Type: field.TypeUint},
		{Name: "k8s_object_id", Type: field.TypeUint},
	}
	// K8sNamespacesTable holds the schema information for the "k8sNamespaces" table.
	K8sNamespacesTable = &schema.Table{
		Name:       "k8sNamespaces",
		Columns:    K8sNamespacesColumns,
		PrimaryKey: []*schema.Column{K8sNamespacesColumns[0]},
	}
	// K8sNodesColumns holds the columns for the "k8sNodes" table.
	K8sNodesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 128},
		{Name: "k8s_cluster_id", Type: field.TypeUint},
		{Name: "k8s_object_id", Type: field.TypeUint},
	}
	// K8sNodesTable holds the schema information for the "k8sNodes" table.
	K8sNodesTable = &schema.Table{
		Name:       "k8sNodes",
		Columns:    K8sNodesColumns,
		PrimaryKey: []*schema.Column{K8sNodesColumns[0]},
	}
	// K8sObjectsColumns holds the columns for the "k8sObjects" table.
	K8sObjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "k8s_cluster_id", Type: field.TypeUint},
		{Name: "api_version", Type: field.TypeString, Size: 128},
		{Name: "kind", Type: field.TypeString, Size: 128},
		{Name: "name", Type: field.TypeString, Size: 256},
		{Name: "metadata", Type: field.TypeJSON},
		{Name: "spec", Type: field.TypeJSON},
		{Name: "status", Type: field.TypeJSON},
	}
	// K8sObjectsTable holds the schema information for the "k8sObjects" table.
	K8sObjectsTable = &schema.Table{
		Name:       "k8sObjects",
		Columns:    K8sObjectsColumns,
		PrimaryKey: []*schema.Column{K8sObjectsColumns[0]},
	}
	// K8sObjectTagsColumns holds the columns for the "k8sObjectTags" table.
	K8sObjectTagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "k8s_object_id", Type: field.TypeUint},
		{Name: "k8s_label_id", Type: field.TypeUint},
	}
	// K8sObjectTagsTable holds the schema information for the "k8sObjectTags" table.
	K8sObjectTagsTable = &schema.Table{
		Name:       "k8sObjectTags",
		Columns:    K8sObjectTagsColumns,
		PrimaryKey: []*schema.Column{K8sObjectTagsColumns[0]},
	}
	// K8sPodsColumns holds the columns for the "k8sPods" table.
	K8sPodsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 256},
		{Name: "qos", Type: field.TypeString, Size: 32},
		{Name: "k8s_cluster_id", Type: field.TypeUint},
		{Name: "k8s_namespace_id", Type: field.TypeUint},
		{Name: "k8s_object_id", Type: field.TypeUint},
	}
	// K8sPodsTable holds the schema information for the "k8sPods" table.
	K8sPodsTable = &schema.Table{
		Name:       "k8sPods",
		Columns:    K8sPodsColumns,
		PrimaryKey: []*schema.Column{K8sPodsColumns[0]},
	}
	// K8sReplicaSetsColumns holds the columns for the "k8sReplicaSets" table.
	K8sReplicaSetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 256},
		{Name: "k8s_cluster_id", Type: field.TypeUint},
		{Name: "k8s_namespace_id", Type: field.TypeUint},
		{Name: "k8s_deployment_id", Type: field.TypeUint},
		{Name: "k8s_object_id", Type: field.TypeUint},
	}
	// K8sReplicaSetsTable holds the schema information for the "k8sReplicaSets" table.
	K8sReplicaSetsTable = &schema.Table{
		Name:       "k8sReplicaSets",
		Columns:    K8sReplicaSetsColumns,
		PrimaryKey: []*schema.Column{K8sReplicaSetsColumns[0]},
	}
	// K8sStatefulSetsColumns holds the columns for the "k8sStatefulSets" table.
	K8sStatefulSetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 256},
		{Name: "k8s_cluster_id", Type: field.TypeUint},
		{Name: "k8s_namespace_id", Type: field.TypeUint},
		{Name: "k8s_object_id", Type: field.TypeUint},
	}
	// K8sStatefulSetsTable holds the schema information for the "k8sStatefulSets" table.
	K8sStatefulSetsTable = &schema.Table{
		Name:       "k8sStatefulSets",
		Columns:    K8sStatefulSetsColumns,
		PrimaryKey: []*schema.Column{K8sStatefulSetsColumns[0]},
	}
	// MetricsColumns holds the columns for the "metrics" table.
	MetricsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "ts", Type: field.TypeTime},
		{Name: "value", Type: field.TypeFloat64},
		{Name: "endpoint_id", Type: field.TypeUint},
		{Name: "type_id", Type: field.TypeUint},
		{Name: "name_id", Type: field.TypeUint},
		{Name: "label_id", Type: field.TypeUint},
		{Name: "cluster_id", Type: field.TypeUint},
		{Name: "node_id", Type: field.TypeUint},
		{Name: "proces_id", Type: field.TypeUint},
		{Name: "container_id", Type: field.TypeUint},
		{Name: "metric_endpoint_metrics", Type: field.TypeUint, Nullable: true},
		{Name: "metric_label_metrics", Type: field.TypeUint, Nullable: true},
		{Name: "metric_name_metrics", Type: field.TypeUint, Nullable: true},
	}
	// MetricsTable holds the schema information for the "metrics" table.
	MetricsTable = &schema.Table{
		Name:       "metrics",
		Columns:    MetricsColumns,
		PrimaryKey: []*schema.Column{MetricsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "metrics_metricEndpoints_metrics",
				Columns:    []*schema.Column{MetricsColumns[14]},
				RefColumns: []*schema.Column{MetricEndpointsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "metrics_metricLabels_metrics",
				Columns:    []*schema.Column{MetricsColumns[15]},
				RefColumns: []*schema.Column{MetricLabelsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "metrics_metricNames_metrics",
				Columns:    []*schema.Column{MetricsColumns[16]},
				RefColumns: []*schema.Column{MetricNamesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "metric_ts_value_endpoint_id_type_id_name_id_label_id_cluster_id_node_id_proces_id_container_id",
				Unique:  false,
				Columns: []*schema.Column{MetricsColumns[4], MetricsColumns[5], MetricsColumns[6], MetricsColumns[7], MetricsColumns[8], MetricsColumns[9], MetricsColumns[10], MetricsColumns[11], MetricsColumns[12], MetricsColumns[13]},
			},
		},
	}
	// MetricEndpointsColumns holds the columns for the "metricEndpoints" table.
	MetricEndpointsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "path", Type: field.TypeString, Unique: true, Size: 256},
	}
	// MetricEndpointsTable holds the schema information for the "metricEndpoints" table.
	MetricEndpointsTable = &schema.Table{
		Name:       "metricEndpoints",
		Columns:    MetricEndpointsColumns,
		PrimaryKey: []*schema.Column{MetricEndpointsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "metricendpoint_path",
				Unique:  false,
				Columns: []*schema.Column{MetricEndpointsColumns[4]},
			},
		},
	}
	// MetricLabelsColumns holds the columns for the "metricLabels" table.
	MetricLabelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "label", Type: field.TypeString, Unique: true, Size: 256},
	}
	// MetricLabelsTable holds the schema information for the "metricLabels" table.
	MetricLabelsTable = &schema.Table{
		Name:       "metricLabels",
		Columns:    MetricLabelsColumns,
		PrimaryKey: []*schema.Column{MetricLabelsColumns[0]},
	}
	// MetricNamesColumns holds the columns for the "metricNames" table.
	MetricNamesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 256},
		{Name: "help", Type: field.TypeString},
		{Name: "type_id", Type: field.TypeUint},
		{Name: "metric_type_metric_names", Type: field.TypeUint, Nullable: true},
	}
	// MetricNamesTable holds the schema information for the "metricNames" table.
	MetricNamesTable = &schema.Table{
		Name:       "metricNames",
		Columns:    MetricNamesColumns,
		PrimaryKey: []*schema.Column{MetricNamesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "metricNames_metricTypes_metricNames",
				Columns:    []*schema.Column{MetricNamesColumns[7]},
				RefColumns: []*schema.Column{MetricTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MetricTypesColumns holds the columns for the "metricTypes" table.
	MetricTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// MetricTypesTable holds the schema information for the "metricTypes" table.
	MetricTypesTable = &schema.Table{
		Name:       "metricTypes",
		Columns:    MetricTypesColumns,
		PrimaryKey: []*schema.Column{MetricTypesColumns[0]},
	}
	// NodesColumns holds the columns for the "nodes" table.
	NodesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "host", Type: field.TypeString, Size: 128},
		{Name: "ipv4", Type: field.TypeString, Size: 16},
		{Name: "ipv6", Type: field.TypeString, Size: 40},
		{Name: "public_ipv4", Type: field.TypeString, Size: 16},
		{Name: "public_ipv6", Type: field.TypeString, Size: 40},
		{Name: "os", Type: field.TypeString, Size: 64},
		{Name: "platform", Type: field.TypeString, Size: 64},
		{Name: "platform_family", Type: field.TypeString, Size: 64},
		{Name: "info", Type: field.TypeJSON},
		{Name: "uuid", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "agent_id", Type: field.TypeUint},
		{Name: "cluster_id", Type: field.TypeUint},
		{Name: "agent_nodes", Type: field.TypeUint, Nullable: true},
		{Name: "cluster_nodes", Type: field.TypeUint, Nullable: true},
	}
	// NodesTable holds the schema information for the "nodes" table.
	NodesTable = &schema.Table{
		Name:       "nodes",
		Columns:    NodesColumns,
		PrimaryKey: []*schema.Column{NodesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "nodes_agents_nodes",
				Columns:    []*schema.Column{NodesColumns[18]},
				RefColumns: []*schema.Column{AgentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "nodes_clusters_nodes",
				Columns:    []*schema.Column{NodesColumns[19]},
				RefColumns: []*schema.Column{ClustersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "node_agent_id_cluster_id",
				Unique:  false,
				Columns: []*schema.Column{NodesColumns[16], NodesColumns[17]},
			},
		},
	}
	// ProcessColumns holds the columns for the "process" table.
	ProcessColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "p_id", Type: field.TypeInt32},
		{Name: "cmd", Type: field.TypeString},
		{Name: "info", Type: field.TypeJSON},
		{Name: "cluster_id", Type: field.TypeString},
		{Name: "node_id", Type: field.TypeString},
		{Name: "container_id", Type: field.TypeString},
		{Name: "container_process", Type: field.TypeUint, Nullable: true},
		{Name: "node_process", Type: field.TypeUint, Nullable: true},
	}
	// ProcessTable holds the schema information for the "process" table.
	ProcessTable = &schema.Table{
		Name:       "process",
		Columns:    ProcessColumns,
		PrimaryKey: []*schema.Column{ProcessColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "process_containers_process",
				Columns:    []*schema.Column{ProcessColumns[11]},
				RefColumns: []*schema.Column{ContainersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "process_nodes_process",
				Columns:    []*schema.Column{ProcessColumns[12]},
				RefColumns: []*schema.Column{NodesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "proces_cluster_id_node_id_container_id",
				Unique:  false,
				Columns: []*schema.Column{ProcessColumns[8], ProcessColumns[9], ProcessColumns[10]},
			},
		},
	}
	// SettingsColumns holds the columns for the "settings" table.
	SettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 128},
		{Name: "value", Type: field.TypeString},
	}
	// SettingsTable holds the schema information for the "settings" table.
	SettingsTable = &schema.Table{
		Name:       "settings",
		Columns:    SettingsColumns,
		PrimaryKey: []*schema.Column{SettingsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "setting_name",
				Unique:  false,
				Columns: []*schema.Column{SettingsColumns[4]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AgentsTable,
		ClustersTable,
		ContainersTable,
		EventsTable,
		IncidentBasicRulesTable,
		K8sClustersTable,
		K8sConnectorsTable,
		K8sContainersTable,
		K8sDaemonSetsTable,
		K8sDeploymentsTable,
		K8sEventsTable,
		K8sLabelsTable,
		K8sMetricsTable,
		K8sNamespacesTable,
		K8sNodesTable,
		K8sObjectsTable,
		K8sObjectTagsTable,
		K8sPodsTable,
		K8sReplicaSetsTable,
		K8sStatefulSetsTable,
		MetricsTable,
		MetricEndpointsTable,
		MetricLabelsTable,
		MetricNamesTable,
		MetricTypesTable,
		NodesTable,
		ProcessTable,
		SettingsTable,
	}
)

func init() {
	AgentsTable.ForeignKeys[0].RefTable = ClustersTable
	AgentsTable.Annotation = &entsql.Annotation{
		Table: "agents",
	}
	ClustersTable.Annotation = &entsql.Annotation{
		Table: "clusters",
	}
	ContainersTable.ForeignKeys[0].RefTable = NodesTable
	ContainersTable.Annotation = &entsql.Annotation{
		Table: "containers",
	}
	EventsTable.ForeignKeys[0].RefTable = MetricEndpointsTable
	EventsTable.ForeignKeys[1].RefTable = MetricLabelsTable
	EventsTable.ForeignKeys[2].RefTable = MetricNamesTable
	EventsTable.Annotation = &entsql.Annotation{
		Table: "events",
	}
	IncidentBasicRulesTable.Annotation = &entsql.Annotation{
		Table: "incidentBasicRules",
	}
	K8sClustersTable.Annotation = &entsql.Annotation{
		Table: "k8sClusters",
	}
	K8sConnectorsTable.Annotation = &entsql.Annotation{
		Table: "k8sConnectors",
	}
	K8sContainersTable.Annotation = &entsql.Annotation{
		Table: "k8sContainers",
	}
	K8sDaemonSetsTable.Annotation = &entsql.Annotation{
		Table: "k8sDaemonSets",
	}
	K8sDeploymentsTable.Annotation = &entsql.Annotation{
		Table: "k8sDeployments",
	}
	K8sEventsTable.Annotation = &entsql.Annotation{
		Table: "k8sEvents",
	}
	K8sLabelsTable.Annotation = &entsql.Annotation{
		Table: "k8sLabels",
	}
	K8sMetricsTable.Annotation = &entsql.Annotation{
		Table: "k8sMetrics",
	}
	K8sNamespacesTable.Annotation = &entsql.Annotation{
		Table: "k8sNamespaces",
	}
	K8sNodesTable.Annotation = &entsql.Annotation{
		Table: "k8sNodes",
	}
	K8sObjectsTable.Annotation = &entsql.Annotation{
		Table: "k8sObjects",
	}
	K8sObjectTagsTable.Annotation = &entsql.Annotation{
		Table: "k8sObjectTags",
	}
	K8sPodsTable.Annotation = &entsql.Annotation{
		Table: "k8sPods",
	}
	K8sReplicaSetsTable.Annotation = &entsql.Annotation{
		Table: "k8sReplicaSets",
	}
	K8sStatefulSetsTable.Annotation = &entsql.Annotation{
		Table: "k8sStatefulSets",
	}
	MetricsTable.ForeignKeys[0].RefTable = MetricEndpointsTable
	MetricsTable.ForeignKeys[1].RefTable = MetricLabelsTable
	MetricsTable.ForeignKeys[2].RefTable = MetricNamesTable
	MetricsTable.Annotation = &entsql.Annotation{
		Table: "metrics",
	}
	MetricEndpointsTable.Annotation = &entsql.Annotation{
		Table: "metricEndpoints",
	}
	MetricLabelsTable.Annotation = &entsql.Annotation{
		Table: "metricLabels",
	}
	MetricNamesTable.ForeignKeys[0].RefTable = MetricTypesTable
	MetricNamesTable.Annotation = &entsql.Annotation{
		Table: "metricNames",
	}
	MetricTypesTable.Annotation = &entsql.Annotation{
		Table: "metricTypes",
	}
	NodesTable.ForeignKeys[0].RefTable = AgentsTable
	NodesTable.ForeignKeys[1].RefTable = ClustersTable
	NodesTable.Annotation = &entsql.Annotation{
		Table: "nodes",
	}
	ProcessTable.ForeignKeys[0].RefTable = ContainersTable
	ProcessTable.ForeignKeys[1].RefTable = NodesTable
	ProcessTable.Annotation = &entsql.Annotation{
		Table: "process",
	}
	SettingsTable.Annotation = &entsql.Annotation{
		Table: "settings",
	}
}
