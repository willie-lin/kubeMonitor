// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metricendpoint"
)

// MetricEndpoint is the model entity for the MetricEndpoint schema.
type MetricEndpoint struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetricEndpointQuery when eager-loading is set.
	Edges MetricEndpointEdges `json:"edges"`
}

// MetricEndpointEdges holds the relations/edges for other nodes in the graph.
type MetricEndpointEdges struct {
	// Metrics holds the value of the metrics edge.
	Metrics []*Metric `json:"metrics,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MetricsOrErr returns the Metrics value or an error if the edge
// was not loaded in eager-loading.
func (e MetricEndpointEdges) MetricsOrErr() ([]*Metric, error) {
	if e.loadedTypes[0] {
		return e.Metrics, nil
	}
	return nil, &NotLoadedError{edge: "metrics"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e MetricEndpointEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MetricEndpoint) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case metricendpoint.FieldID:
			values[i] = new(sql.NullInt64)
		case metricendpoint.FieldPath:
			values[i] = new(sql.NullString)
		case metricendpoint.FieldCreatedAt, metricendpoint.FieldUpdatedAt, metricendpoint.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MetricEndpoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MetricEndpoint fields.
func (me *MetricEndpoint) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metricendpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			me.ID = uint(value.Int64)
		case metricendpoint.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				me.CreatedAt = value.Time
			}
		case metricendpoint.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				me.UpdatedAt = value.Time
			}
		case metricendpoint.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				me.DeletedAt = value.Time
			}
		case metricendpoint.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				me.Path = value.String
			}
		}
	}
	return nil
}

// QueryMetrics queries the "metrics" edge of the MetricEndpoint entity.
func (me *MetricEndpoint) QueryMetrics() *MetricQuery {
	return (&MetricEndpointClient{config: me.config}).QueryMetrics(me)
}

// QueryEvents queries the "events" edge of the MetricEndpoint entity.
func (me *MetricEndpoint) QueryEvents() *EventQuery {
	return (&MetricEndpointClient{config: me.config}).QueryEvents(me)
}

// Update returns a builder for updating this MetricEndpoint.
// Note that you need to call MetricEndpoint.Unwrap() before calling this method if this MetricEndpoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (me *MetricEndpoint) Update() *MetricEndpointUpdateOne {
	return (&MetricEndpointClient{config: me.config}).UpdateOne(me)
}

// Unwrap unwraps the MetricEndpoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (me *MetricEndpoint) Unwrap() *MetricEndpoint {
	tx, ok := me.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetricEndpoint is not a transactional entity")
	}
	me.config.driver = tx.drv
	return me
}

// String implements the fmt.Stringer.
func (me *MetricEndpoint) String() string {
	var builder strings.Builder
	builder.WriteString("MetricEndpoint(")
	builder.WriteString(fmt.Sprintf("id=%v", me.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(me.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(me.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(me.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", path=")
	builder.WriteString(me.Path)
	builder.WriteByte(')')
	return builder.String()
}

// MetricEndpoints is a parsable slice of MetricEndpoint.
type MetricEndpoints []*MetricEndpoint

func (me MetricEndpoints) config(cfg config) {
	for _i := range me {
		me[_i].config = cfg
	}
}
