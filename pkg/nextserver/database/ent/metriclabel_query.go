// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/event"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metric"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metriclabel"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// MetricLabelQuery is the builder for querying MetricLabel entities.
type MetricLabelQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.MetricLabel
	// eager-loading edges.
	withMetrics *MetricQuery
	withEvents  *EventQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MetricLabelQuery builder.
func (mlq *MetricLabelQuery) Where(ps ...predicate.MetricLabel) *MetricLabelQuery {
	mlq.predicates = append(mlq.predicates, ps...)
	return mlq
}

// Limit adds a limit step to the query.
func (mlq *MetricLabelQuery) Limit(limit int) *MetricLabelQuery {
	mlq.limit = &limit
	return mlq
}

// Offset adds an offset step to the query.
func (mlq *MetricLabelQuery) Offset(offset int) *MetricLabelQuery {
	mlq.offset = &offset
	return mlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mlq *MetricLabelQuery) Unique(unique bool) *MetricLabelQuery {
	mlq.unique = &unique
	return mlq
}

// Order adds an order step to the query.
func (mlq *MetricLabelQuery) Order(o ...OrderFunc) *MetricLabelQuery {
	mlq.order = append(mlq.order, o...)
	return mlq
}

// QueryMetrics chains the current query on the "metrics" edge.
func (mlq *MetricLabelQuery) QueryMetrics() *MetricQuery {
	query := &MetricQuery{config: mlq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(metriclabel.Table, metriclabel.FieldID, selector),
			sqlgraph.To(metric.Table, metric.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, metriclabel.MetricsTable, metriclabel.MetricsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (mlq *MetricLabelQuery) QueryEvents() *EventQuery {
	query := &EventQuery{config: mlq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(metriclabel.Table, metriclabel.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, metriclabel.EventsTable, metriclabel.EventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MetricLabel entity from the query.
// Returns a *NotFoundError when no MetricLabel was found.
func (mlq *MetricLabelQuery) First(ctx context.Context) (*MetricLabel, error) {
	nodes, err := mlq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{metriclabel.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mlq *MetricLabelQuery) FirstX(ctx context.Context) *MetricLabel {
	node, err := mlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MetricLabel ID from the query.
// Returns a *NotFoundError when no MetricLabel ID was found.
func (mlq *MetricLabelQuery) FirstID(ctx context.Context) (id uint, err error) {
	var ids []uint
	if ids, err = mlq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{metriclabel.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mlq *MetricLabelQuery) FirstIDX(ctx context.Context) uint {
	id, err := mlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MetricLabel entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one MetricLabel entity is not found.
// Returns a *NotFoundError when no MetricLabel entities are found.
func (mlq *MetricLabelQuery) Only(ctx context.Context) (*MetricLabel, error) {
	nodes, err := mlq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{metriclabel.Label}
	default:
		return nil, &NotSingularError{metriclabel.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mlq *MetricLabelQuery) OnlyX(ctx context.Context) *MetricLabel {
	node, err := mlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MetricLabel ID in the query.
// Returns a *NotSingularError when exactly one MetricLabel ID is not found.
// Returns a *NotFoundError when no entities are found.
func (mlq *MetricLabelQuery) OnlyID(ctx context.Context) (id uint, err error) {
	var ids []uint
	if ids, err = mlq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{metriclabel.Label}
	default:
		err = &NotSingularError{metriclabel.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mlq *MetricLabelQuery) OnlyIDX(ctx context.Context) uint {
	id, err := mlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MetricLabels.
func (mlq *MetricLabelQuery) All(ctx context.Context) ([]*MetricLabel, error) {
	if err := mlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mlq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mlq *MetricLabelQuery) AllX(ctx context.Context) []*MetricLabel {
	nodes, err := mlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MetricLabel IDs.
func (mlq *MetricLabelQuery) IDs(ctx context.Context) ([]uint, error) {
	var ids []uint
	if err := mlq.Select(metriclabel.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mlq *MetricLabelQuery) IDsX(ctx context.Context) []uint {
	ids, err := mlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mlq *MetricLabelQuery) Count(ctx context.Context) (int, error) {
	if err := mlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mlq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mlq *MetricLabelQuery) CountX(ctx context.Context) int {
	count, err := mlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mlq *MetricLabelQuery) Exist(ctx context.Context) (bool, error) {
	if err := mlq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mlq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mlq *MetricLabelQuery) ExistX(ctx context.Context) bool {
	exist, err := mlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MetricLabelQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mlq *MetricLabelQuery) Clone() *MetricLabelQuery {
	if mlq == nil {
		return nil
	}
	return &MetricLabelQuery{
		config:      mlq.config,
		limit:       mlq.limit,
		offset:      mlq.offset,
		order:       append([]OrderFunc{}, mlq.order...),
		predicates:  append([]predicate.MetricLabel{}, mlq.predicates...),
		withMetrics: mlq.withMetrics.Clone(),
		withEvents:  mlq.withEvents.Clone(),
		// clone intermediate query.
		sql:  mlq.sql.Clone(),
		path: mlq.path,
	}
}

// WithMetrics tells the query-builder to eager-load the nodes that are connected to
// the "metrics" edge. The optional arguments are used to configure the query builder of the edge.
func (mlq *MetricLabelQuery) WithMetrics(opts ...func(*MetricQuery)) *MetricLabelQuery {
	query := &MetricQuery{config: mlq.config}
	for _, opt := range opts {
		opt(query)
	}
	mlq.withMetrics = query
	return mlq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (mlq *MetricLabelQuery) WithEvents(opts ...func(*EventQuery)) *MetricLabelQuery {
	query := &EventQuery{config: mlq.config}
	for _, opt := range opts {
		opt(query)
	}
	mlq.withEvents = query
	return mlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MetricLabel.Query().
//		GroupBy(metriclabel.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mlq *MetricLabelQuery) GroupBy(field string, fields ...string) *MetricLabelGroupBy {
	group := &MetricLabelGroupBy{config: mlq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mlq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.MetricLabel.Query().
//		Select(metriclabel.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (mlq *MetricLabelQuery) Select(fields ...string) *MetricLabelSelect {
	mlq.fields = append(mlq.fields, fields...)
	return &MetricLabelSelect{MetricLabelQuery: mlq}
}

func (mlq *MetricLabelQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mlq.fields {
		if !metriclabel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mlq.path != nil {
		prev, err := mlq.path(ctx)
		if err != nil {
			return err
		}
		mlq.sql = prev
	}
	return nil
}

func (mlq *MetricLabelQuery) sqlAll(ctx context.Context) ([]*MetricLabel, error) {
	var (
		nodes       = []*MetricLabel{}
		_spec       = mlq.querySpec()
		loadedTypes = [2]bool{
			mlq.withMetrics != nil,
			mlq.withEvents != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &MetricLabel{config: mlq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, mlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := mlq.withMetrics; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint]*MetricLabel)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Metrics = []*Metric{}
		}
		query.withFKs = true
		query.Where(predicate.Metric(func(s *sql.Selector) {
			s.Where(sql.InValues(metriclabel.MetricsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.metric_label_metrics
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "metric_label_metrics" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "metric_label_metrics" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Metrics = append(node.Edges.Metrics, n)
		}
	}

	if query := mlq.withEvents; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint]*MetricLabel)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Events = []*Event{}
		}
		query.withFKs = true
		query.Where(predicate.Event(func(s *sql.Selector) {
			s.Where(sql.InValues(metriclabel.EventsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.metric_label_events
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "metric_label_events" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "metric_label_events" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Events = append(node.Edges.Events, n)
		}
	}

	return nodes, nil
}

func (mlq *MetricLabelQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mlq.querySpec()
	return sqlgraph.CountNodes(ctx, mlq.driver, _spec)
}

func (mlq *MetricLabelQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mlq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (mlq *MetricLabelQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metriclabel.Table,
			Columns: metriclabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: metriclabel.FieldID,
			},
		},
		From:   mlq.sql,
		Unique: true,
	}
	if unique := mlq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mlq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metriclabel.FieldID)
		for i := range fields {
			if fields[i] != metriclabel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mlq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mlq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mlq *MetricLabelQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mlq.driver.Dialect())
	t1 := builder.Table(metriclabel.Table)
	columns := mlq.fields
	if len(columns) == 0 {
		columns = metriclabel.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mlq.sql != nil {
		selector = mlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range mlq.predicates {
		p(selector)
	}
	for _, p := range mlq.order {
		p(selector)
	}
	if offset := mlq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mlq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MetricLabelGroupBy is the group-by builder for MetricLabel entities.
type MetricLabelGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mlgb *MetricLabelGroupBy) Aggregate(fns ...AggregateFunc) *MetricLabelGroupBy {
	mlgb.fns = append(mlgb.fns, fns...)
	return mlgb
}

// Scan applies the group-by query and scans the result into the given value.
func (mlgb *MetricLabelGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := mlgb.path(ctx)
	if err != nil {
		return err
	}
	mlgb.sql = query
	return mlgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mlgb *MetricLabelGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mlgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (mlgb *MetricLabelGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mlgb.fields) > 1 {
		return nil, errors.New("ent: MetricLabelGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mlgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mlgb *MetricLabelGroupBy) StringsX(ctx context.Context) []string {
	v, err := mlgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mlgb *MetricLabelGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mlgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{metriclabel.Label}
	default:
		err = fmt.Errorf("ent: MetricLabelGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mlgb *MetricLabelGroupBy) StringX(ctx context.Context) string {
	v, err := mlgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (mlgb *MetricLabelGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mlgb.fields) > 1 {
		return nil, errors.New("ent: MetricLabelGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mlgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mlgb *MetricLabelGroupBy) IntsX(ctx context.Context) []int {
	v, err := mlgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mlgb *MetricLabelGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mlgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{metriclabel.Label}
	default:
		err = fmt.Errorf("ent: MetricLabelGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mlgb *MetricLabelGroupBy) IntX(ctx context.Context) int {
	v, err := mlgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (mlgb *MetricLabelGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mlgb.fields) > 1 {
		return nil, errors.New("ent: MetricLabelGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mlgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mlgb *MetricLabelGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mlgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mlgb *MetricLabelGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mlgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{metriclabel.Label}
	default:
		err = fmt.Errorf("ent: MetricLabelGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mlgb *MetricLabelGroupBy) Float64X(ctx context.Context) float64 {
	v, err := mlgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (mlgb *MetricLabelGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mlgb.fields) > 1 {
		return nil, errors.New("ent: MetricLabelGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mlgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mlgb *MetricLabelGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mlgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mlgb *MetricLabelGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mlgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{metriclabel.Label}
	default:
		err = fmt.Errorf("ent: MetricLabelGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mlgb *MetricLabelGroupBy) BoolX(ctx context.Context) bool {
	v, err := mlgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mlgb *MetricLabelGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range mlgb.fields {
		if !metriclabel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mlgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mlgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mlgb *MetricLabelGroupBy) sqlQuery() *sql.Selector {
	selector := mlgb.sql.Select()
	aggregation := make([]string, 0, len(mlgb.fns))
	for _, fn := range mlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(mlgb.fields)+len(mlgb.fns))
		for _, f := range mlgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(mlgb.fields...)...)
}

// MetricLabelSelect is the builder for selecting fields of MetricLabel entities.
type MetricLabelSelect struct {
	*MetricLabelQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (mls *MetricLabelSelect) Scan(ctx context.Context, v interface{}) error {
	if err := mls.prepareQuery(ctx); err != nil {
		return err
	}
	mls.sql = mls.MetricLabelQuery.sqlQuery(ctx)
	return mls.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mls *MetricLabelSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mls.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (mls *MetricLabelSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mls.fields) > 1 {
		return nil, errors.New("ent: MetricLabelSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mls *MetricLabelSelect) StringsX(ctx context.Context) []string {
	v, err := mls.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (mls *MetricLabelSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mls.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{metriclabel.Label}
	default:
		err = fmt.Errorf("ent: MetricLabelSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mls *MetricLabelSelect) StringX(ctx context.Context) string {
	v, err := mls.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (mls *MetricLabelSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mls.fields) > 1 {
		return nil, errors.New("ent: MetricLabelSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mls *MetricLabelSelect) IntsX(ctx context.Context) []int {
	v, err := mls.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (mls *MetricLabelSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mls.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{metriclabel.Label}
	default:
		err = fmt.Errorf("ent: MetricLabelSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mls *MetricLabelSelect) IntX(ctx context.Context) int {
	v, err := mls.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (mls *MetricLabelSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mls.fields) > 1 {
		return nil, errors.New("ent: MetricLabelSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mls *MetricLabelSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mls.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (mls *MetricLabelSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mls.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{metriclabel.Label}
	default:
		err = fmt.Errorf("ent: MetricLabelSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mls *MetricLabelSelect) Float64X(ctx context.Context) float64 {
	v, err := mls.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (mls *MetricLabelSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mls.fields) > 1 {
		return nil, errors.New("ent: MetricLabelSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mls *MetricLabelSelect) BoolsX(ctx context.Context) []bool {
	v, err := mls.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (mls *MetricLabelSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mls.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{metriclabel.Label}
	default:
		err = fmt.Errorf("ent: MetricLabelSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mls *MetricLabelSelect) BoolX(ctx context.Context) bool {
	v, err := mls.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mls *MetricLabelSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mls.sql.Query()
	if err := mls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
