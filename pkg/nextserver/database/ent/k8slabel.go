// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8slabel"
)

// K8sLabel is the model entity for the K8sLabel schema.
type K8sLabel struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// K8sObjectId holds the value of the "k8sObjectId" field.
	K8sObjectId uint `json:"k8sObjectId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*K8sLabel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case k8slabel.FieldID, k8slabel.FieldK8sObjectId:
			values[i] = new(sql.NullInt64)
		case k8slabel.FieldLabel:
			values[i] = new(sql.NullString)
		case k8slabel.FieldCreatedAt, k8slabel.FieldUpdatedAt, k8slabel.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type K8sLabel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the K8sLabel fields.
func (kl *K8sLabel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case k8slabel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kl.ID = uint(value.Int64)
		case k8slabel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				kl.CreatedAt = value.Time
			}
		case k8slabel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				kl.UpdatedAt = value.Time
			}
		case k8slabel.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				kl.DeletedAt = value.Time
			}
		case k8slabel.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				kl.Label = value.String
			}
		case k8slabel.FieldK8sObjectId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field k8sObjectId", values[i])
			} else if value.Valid {
				kl.K8sObjectId = uint(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this K8sLabel.
// Note that you need to call K8sLabel.Unwrap() before calling this method if this K8sLabel
// was returned from a transaction, and the transaction was committed or rolled back.
func (kl *K8sLabel) Update() *K8sLabelUpdateOne {
	return (&K8sLabelClient{config: kl.config}).UpdateOne(kl)
}

// Unwrap unwraps the K8sLabel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kl *K8sLabel) Unwrap() *K8sLabel {
	tx, ok := kl.config.driver.(*txDriver)
	if !ok {
		panic("ent: K8sLabel is not a transactional entity")
	}
	kl.config.driver = tx.drv
	return kl
}

// String implements the fmt.Stringer.
func (kl *K8sLabel) String() string {
	var builder strings.Builder
	builder.WriteString("K8sLabel(")
	builder.WriteString(fmt.Sprintf("id=%v", kl.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(kl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(kl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(kl.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", label=")
	builder.WriteString(kl.Label)
	builder.WriteString(", k8sObjectId=")
	builder.WriteString(fmt.Sprintf("%v", kl.K8sObjectId))
	builder.WriteByte(')')
	return builder.String()
}

// K8sLabels is a parsable slice of K8sLabel.
type K8sLabels []*K8sLabel

func (kl K8sLabels) config(cfg config) {
	for _i := range kl {
		kl[_i].config = cfg
	}
}
