// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/agent"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/node"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// AgentUpdate is the builder for updating Agent entities.
type AgentUpdate struct {
	config
	hooks    []Hook
	mutation *AgentMutation
}

// Where appends a list predicates to the AgentUpdate builder.
func (au *AgentUpdate) Where(ps ...predicate.Agent) *AgentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AgentUpdate) SetUpdatedAt(t time.Time) *AgentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AgentUpdate) SetDeletedAt(t time.Time) *AgentUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetOnline sets the "online" field.
func (au *AgentUpdate) SetOnline(b bool) *AgentUpdate {
	au.mutation.SetOnline(b)
	return au
}

// SetVersion sets the "version" field.
func (au *AgentUpdate) SetVersion(s string) *AgentUpdate {
	au.mutation.SetVersion(s)
	return au
}

// SetIpv4 sets the "ipv4" field.
func (au *AgentUpdate) SetIpv4(s string) *AgentUpdate {
	au.mutation.SetIpv4(s)
	return au
}

// SetIpv6 sets the "ipv6" field.
func (au *AgentUpdate) SetIpv6(s string) *AgentUpdate {
	au.mutation.SetIpv6(s)
	return au
}

// SetPublicIpv4 sets the "public_ipv4" field.
func (au *AgentUpdate) SetPublicIpv4(s string) *AgentUpdate {
	au.mutation.SetPublicIpv4(s)
	return au
}

// SetPublicIpv6 sets the "public_ipv6" field.
func (au *AgentUpdate) SetPublicIpv6(s string) *AgentUpdate {
	au.mutation.SetPublicIpv6(s)
	return au
}

// SetLastContact sets the "last_contact" field.
func (au *AgentUpdate) SetLastContact(t time.Time) *AgentUpdate {
	au.mutation.SetLastContact(t)
	return au
}

// SetNillableLastContact sets the "last_contact" field if the given value is not nil.
func (au *AgentUpdate) SetNillableLastContact(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetLastContact(*t)
	}
	return au
}

// SetDisabled sets the "disabled" field.
func (au *AgentUpdate) SetDisabled(b bool) *AgentUpdate {
	au.mutation.SetDisabled(b)
	return au
}

// SetUUID sets the "uuid" field.
func (au *AgentUpdate) SetUUID(s string) *AgentUpdate {
	au.mutation.SetUUID(s)
	return au
}

// SetMachineId sets the "machineId" field.
func (au *AgentUpdate) SetMachineId(s string) *AgentUpdate {
	au.mutation.SetMachineId(s)
	return au
}

// SetDescription sets the "description" field.
func (au *AgentUpdate) SetDescription(s string) *AgentUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetClusterId sets the "clusterId" field.
func (au *AgentUpdate) SetClusterId(u uint) *AgentUpdate {
	au.mutation.ResetClusterId()
	au.mutation.SetClusterId(u)
	return au
}

// AddClusterId adds u to the "clusterId" field.
func (au *AgentUpdate) AddClusterId(u uint) *AgentUpdate {
	au.mutation.AddClusterId(u)
	return au
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (au *AgentUpdate) AddNodeIDs(ids ...uint) *AgentUpdate {
	au.mutation.AddNodeIDs(ids...)
	return au
}

// AddNodes adds the "nodes" edges to the Node entity.
func (au *AgentUpdate) AddNodes(n ...*Node) *AgentUpdate {
	ids := make([]uint, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.AddNodeIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (au *AgentUpdate) Mutation() *AgentMutation {
	return au.mutation
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (au *AgentUpdate) ClearNodes() *AgentUpdate {
	au.mutation.ClearNodes()
	return au
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (au *AgentUpdate) RemoveNodeIDs(ids ...uint) *AgentUpdate {
	au.mutation.RemoveNodeIDs(ids...)
	return au
}

// RemoveNodes removes "nodes" edges to Node entities.
func (au *AgentUpdate) RemoveNodes(n ...*Node) *AgentUpdate {
	ids := make([]uint, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.RemoveNodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AgentUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := agent.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	if _, ok := au.mutation.DeletedAt(); !ok {
		v := agent.UpdateDefaultDeletedAt()
		au.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AgentUpdate) check() error {
	if v, ok := au.mutation.Version(); ok {
		if err := agent.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf("ent: validator failed for field \"version\": %w", err)}
		}
	}
	if v, ok := au.mutation.Ipv4(); ok {
		if err := agent.Ipv4Validator(v); err != nil {
			return &ValidationError{Name: "ipv4", err: fmt.Errorf("ent: validator failed for field \"ipv4\": %w", err)}
		}
	}
	if v, ok := au.mutation.Ipv6(); ok {
		if err := agent.Ipv6Validator(v); err != nil {
			return &ValidationError{Name: "ipv6", err: fmt.Errorf("ent: validator failed for field \"ipv6\": %w", err)}
		}
	}
	if v, ok := au.mutation.PublicIpv4(); ok {
		if err := agent.PublicIpv4Validator(v); err != nil {
			return &ValidationError{Name: "public_ipv4", err: fmt.Errorf("ent: validator failed for field \"public_ipv4\": %w", err)}
		}
	}
	if v, ok := au.mutation.PublicIpv6(); ok {
		if err := agent.PublicIpv6Validator(v); err != nil {
			return &ValidationError{Name: "public_ipv6", err: fmt.Errorf("ent: validator failed for field \"public_ipv6\": %w", err)}
		}
	}
	if v, ok := au.mutation.UUID(); ok {
		if err := agent.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf("ent: validator failed for field \"uuid\": %w", err)}
		}
	}
	if v, ok := au.mutation.MachineId(); ok {
		if err := agent.MachineIdValidator(v); err != nil {
			return &ValidationError{Name: "machineId", err: fmt.Errorf("ent: validator failed for field \"machineId\": %w", err)}
		}
	}
	return nil
}

func (au *AgentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agent.Table,
			Columns: agent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: agent.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.Online(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: agent.FieldOnline,
		})
	}
	if value, ok := au.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldVersion,
		})
	}
	if value, ok := au.mutation.Ipv4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldIpv4,
		})
	}
	if value, ok := au.mutation.Ipv6(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldIpv6,
		})
	}
	if value, ok := au.mutation.PublicIpv4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldPublicIpv4,
		})
	}
	if value, ok := au.mutation.PublicIpv6(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldPublicIpv6,
		})
	}
	if value, ok := au.mutation.LastContact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldLastContact,
		})
	}
	if value, ok := au.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: agent.FieldDisabled,
		})
	}
	if value, ok := au.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldUUID,
		})
	}
	if value, ok := au.mutation.MachineId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldMachineId,
		})
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldDescription,
		})
	}
	if value, ok := au.mutation.ClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: agent.FieldClusterId,
		})
	}
	if value, ok := au.mutation.AddedClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: agent.FieldClusterId,
		})
	}
	if au.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NodesTable,
			Columns: []string{agent.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedNodesIDs(); len(nodes) > 0 && !au.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NodesTable,
			Columns: []string{agent.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NodesTable,
			Columns: []string{agent.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AgentUpdateOne is the builder for updating a single Agent entity.
type AgentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AgentUpdateOne) SetUpdatedAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AgentUpdateOne) SetDeletedAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetOnline sets the "online" field.
func (auo *AgentUpdateOne) SetOnline(b bool) *AgentUpdateOne {
	auo.mutation.SetOnline(b)
	return auo
}

// SetVersion sets the "version" field.
func (auo *AgentUpdateOne) SetVersion(s string) *AgentUpdateOne {
	auo.mutation.SetVersion(s)
	return auo
}

// SetIpv4 sets the "ipv4" field.
func (auo *AgentUpdateOne) SetIpv4(s string) *AgentUpdateOne {
	auo.mutation.SetIpv4(s)
	return auo
}

// SetIpv6 sets the "ipv6" field.
func (auo *AgentUpdateOne) SetIpv6(s string) *AgentUpdateOne {
	auo.mutation.SetIpv6(s)
	return auo
}

// SetPublicIpv4 sets the "public_ipv4" field.
func (auo *AgentUpdateOne) SetPublicIpv4(s string) *AgentUpdateOne {
	auo.mutation.SetPublicIpv4(s)
	return auo
}

// SetPublicIpv6 sets the "public_ipv6" field.
func (auo *AgentUpdateOne) SetPublicIpv6(s string) *AgentUpdateOne {
	auo.mutation.SetPublicIpv6(s)
	return auo
}

// SetLastContact sets the "last_contact" field.
func (auo *AgentUpdateOne) SetLastContact(t time.Time) *AgentUpdateOne {
	auo.mutation.SetLastContact(t)
	return auo
}

// SetNillableLastContact sets the "last_contact" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableLastContact(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetLastContact(*t)
	}
	return auo
}

// SetDisabled sets the "disabled" field.
func (auo *AgentUpdateOne) SetDisabled(b bool) *AgentUpdateOne {
	auo.mutation.SetDisabled(b)
	return auo
}

// SetUUID sets the "uuid" field.
func (auo *AgentUpdateOne) SetUUID(s string) *AgentUpdateOne {
	auo.mutation.SetUUID(s)
	return auo
}

// SetMachineId sets the "machineId" field.
func (auo *AgentUpdateOne) SetMachineId(s string) *AgentUpdateOne {
	auo.mutation.SetMachineId(s)
	return auo
}

// SetDescription sets the "description" field.
func (auo *AgentUpdateOne) SetDescription(s string) *AgentUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetClusterId sets the "clusterId" field.
func (auo *AgentUpdateOne) SetClusterId(u uint) *AgentUpdateOne {
	auo.mutation.ResetClusterId()
	auo.mutation.SetClusterId(u)
	return auo
}

// AddClusterId adds u to the "clusterId" field.
func (auo *AgentUpdateOne) AddClusterId(u uint) *AgentUpdateOne {
	auo.mutation.AddClusterId(u)
	return auo
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (auo *AgentUpdateOne) AddNodeIDs(ids ...uint) *AgentUpdateOne {
	auo.mutation.AddNodeIDs(ids...)
	return auo
}

// AddNodes adds the "nodes" edges to the Node entity.
func (auo *AgentUpdateOne) AddNodes(n ...*Node) *AgentUpdateOne {
	ids := make([]uint, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.AddNodeIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (auo *AgentUpdateOne) Mutation() *AgentMutation {
	return auo.mutation
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (auo *AgentUpdateOne) ClearNodes() *AgentUpdateOne {
	auo.mutation.ClearNodes()
	return auo
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (auo *AgentUpdateOne) RemoveNodeIDs(ids ...uint) *AgentUpdateOne {
	auo.mutation.RemoveNodeIDs(ids...)
	return auo
}

// RemoveNodes removes "nodes" edges to Node entities.
func (auo *AgentUpdateOne) RemoveNodes(n ...*Node) *AgentUpdateOne {
	ids := make([]uint, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.RemoveNodeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgentUpdateOne) Select(field string, fields ...string) *AgentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agent entity.
func (auo *AgentUpdateOne) Save(ctx context.Context) (*Agent, error) {
	var (
		err  error
		node *Agent
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgentUpdateOne) SaveX(ctx context.Context) *Agent {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AgentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := agent.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	if _, ok := auo.mutation.DeletedAt(); !ok {
		v := agent.UpdateDefaultDeletedAt()
		auo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AgentUpdateOne) check() error {
	if v, ok := auo.mutation.Version(); ok {
		if err := agent.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf("ent: validator failed for field \"version\": %w", err)}
		}
	}
	if v, ok := auo.mutation.Ipv4(); ok {
		if err := agent.Ipv4Validator(v); err != nil {
			return &ValidationError{Name: "ipv4", err: fmt.Errorf("ent: validator failed for field \"ipv4\": %w", err)}
		}
	}
	if v, ok := auo.mutation.Ipv6(); ok {
		if err := agent.Ipv6Validator(v); err != nil {
			return &ValidationError{Name: "ipv6", err: fmt.Errorf("ent: validator failed for field \"ipv6\": %w", err)}
		}
	}
	if v, ok := auo.mutation.PublicIpv4(); ok {
		if err := agent.PublicIpv4Validator(v); err != nil {
			return &ValidationError{Name: "public_ipv4", err: fmt.Errorf("ent: validator failed for field \"public_ipv4\": %w", err)}
		}
	}
	if v, ok := auo.mutation.PublicIpv6(); ok {
		if err := agent.PublicIpv6Validator(v); err != nil {
			return &ValidationError{Name: "public_ipv6", err: fmt.Errorf("ent: validator failed for field \"public_ipv6\": %w", err)}
		}
	}
	if v, ok := auo.mutation.UUID(); ok {
		if err := agent.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf("ent: validator failed for field \"uuid\": %w", err)}
		}
	}
	if v, ok := auo.mutation.MachineId(); ok {
		if err := agent.MachineIdValidator(v); err != nil {
			return &ValidationError{Name: "machineId", err: fmt.Errorf("ent: validator failed for field \"machineId\": %w", err)}
		}
	}
	return nil
}

func (auo *AgentUpdateOne) sqlSave(ctx context.Context) (_node *Agent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agent.Table,
			Columns: agent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: agent.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Agent.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for _, f := range fields {
			if !agent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.Online(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: agent.FieldOnline,
		})
	}
	if value, ok := auo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldVersion,
		})
	}
	if value, ok := auo.mutation.Ipv4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldIpv4,
		})
	}
	if value, ok := auo.mutation.Ipv6(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldIpv6,
		})
	}
	if value, ok := auo.mutation.PublicIpv4(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldPublicIpv4,
		})
	}
	if value, ok := auo.mutation.PublicIpv6(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldPublicIpv6,
		})
	}
	if value, ok := auo.mutation.LastContact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agent.FieldLastContact,
		})
	}
	if value, ok := auo.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: agent.FieldDisabled,
		})
	}
	if value, ok := auo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldUUID,
		})
	}
	if value, ok := auo.mutation.MachineId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldMachineId,
		})
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agent.FieldDescription,
		})
	}
	if value, ok := auo.mutation.ClusterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: agent.FieldClusterId,
		})
	}
	if value, ok := auo.mutation.AddedClusterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: agent.FieldClusterId,
		})
	}
	if auo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NodesTable,
			Columns: []string{agent.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !auo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NodesTable,
			Columns: []string{agent.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NodesTable,
			Columns: []string{agent.NodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: node.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Agent{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
