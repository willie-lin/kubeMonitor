// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sconnector"
)

// K8sConnector is the model entity for the K8sConnector schema.
type K8sConnector struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// InCluster holds the value of the "inCluster" field.
	InCluster bool `json:"inCluster,omitempty"`
	// BearerToken holds the value of the "bearerToken" field.
	BearerToken string `json:"bearerToken,omitempty"`
	// KubeConfig holds the value of the "kubeConfig" field.
	KubeConfig string `json:"kubeConfig,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*K8sConnector) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case k8sconnector.FieldInCluster:
			values[i] = new(sql.NullBool)
		case k8sconnector.FieldID:
			values[i] = new(sql.NullInt64)
		case k8sconnector.FieldName, k8sconnector.FieldStatus, k8sconnector.FieldMethod, k8sconnector.FieldBearerToken, k8sconnector.FieldKubeConfig:
			values[i] = new(sql.NullString)
		case k8sconnector.FieldCreatedAt, k8sconnector.FieldUpdatedAt, k8sconnector.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type K8sConnector", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the K8sConnector fields.
func (kc *K8sConnector) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case k8sconnector.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kc.ID = uint(value.Int64)
		case k8sconnector.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				kc.CreatedAt = value.Time
			}
		case k8sconnector.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				kc.UpdatedAt = value.Time
			}
		case k8sconnector.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				kc.DeletedAt = value.Time
			}
		case k8sconnector.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				kc.Name = value.String
			}
		case k8sconnector.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				kc.Status = value.String
			}
		case k8sconnector.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				kc.Method = value.String
			}
		case k8sconnector.FieldInCluster:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field inCluster", values[i])
			} else if value.Valid {
				kc.InCluster = value.Bool
			}
		case k8sconnector.FieldBearerToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bearerToken", values[i])
			} else if value.Valid {
				kc.BearerToken = value.String
			}
		case k8sconnector.FieldKubeConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kubeConfig", values[i])
			} else if value.Valid {
				kc.KubeConfig = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this K8sConnector.
// Note that you need to call K8sConnector.Unwrap() before calling this method if this K8sConnector
// was returned from a transaction, and the transaction was committed or rolled back.
func (kc *K8sConnector) Update() *K8sConnectorUpdateOne {
	return (&K8sConnectorClient{config: kc.config}).UpdateOne(kc)
}

// Unwrap unwraps the K8sConnector entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kc *K8sConnector) Unwrap() *K8sConnector {
	tx, ok := kc.config.driver.(*txDriver)
	if !ok {
		panic("ent: K8sConnector is not a transactional entity")
	}
	kc.config.driver = tx.drv
	return kc
}

// String implements the fmt.Stringer.
func (kc *K8sConnector) String() string {
	var builder strings.Builder
	builder.WriteString("K8sConnector(")
	builder.WriteString(fmt.Sprintf("id=%v", kc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(kc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(kc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(kc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(kc.Name)
	builder.WriteString(", status=")
	builder.WriteString(kc.Status)
	builder.WriteString(", method=")
	builder.WriteString(kc.Method)
	builder.WriteString(", inCluster=")
	builder.WriteString(fmt.Sprintf("%v", kc.InCluster))
	builder.WriteString(", bearerToken=")
	builder.WriteString(kc.BearerToken)
	builder.WriteString(", kubeConfig=")
	builder.WriteString(kc.KubeConfig)
	builder.WriteByte(')')
	return builder.String()
}

// K8sConnectors is a parsable slice of K8sConnector.
type K8sConnectors []*K8sConnector

func (kc K8sConnectors) config(cfg config) {
	for _i := range kc {
		kc[_i].config = cfg
	}
}
