// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metric"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metricendpoint"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metriclabel"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/metricname"
)

// Metric is the model entity for the Metric schema.
type Metric struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Ts holds the value of the "ts" field.
	Ts time.Time `json:"ts,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// EndpointId holds the value of the "endpointId" field.
	EndpointId uint `json:"endpointId,omitempty"`
	// TypeId holds the value of the "typeId" field.
	TypeId uint `json:"typeId,omitempty"`
	// NameId holds the value of the "nameId" field.
	NameId uint `json:"nameId,omitempty"`
	// LabelId holds the value of the "labelId" field.
	LabelId uint `json:"labelId,omitempty"`
	// ClusterId holds the value of the "clusterId" field.
	ClusterId uint `json:"clusterId,omitempty"`
	// NodeId holds the value of the "nodeId" field.
	NodeId uint `json:"nodeId,omitempty"`
	// ProcesId holds the value of the "procesId" field.
	ProcesId uint `json:"procesId,omitempty"`
	// ContainerId holds the value of the "containerId" field.
	ContainerId uint `json:"containerId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetricQuery when eager-loading is set.
	Edges                   MetricEdges `json:"edges"`
	metric_endpoint_metrics *uint
	metric_label_metrics    *uint
	metric_name_metrics     *uint
}

// MetricEdges holds the relations/edges for other nodes in the graph.
type MetricEdges struct {
	// MetricNameMetrics holds the value of the MetricName_Metrics edge.
	MetricNameMetrics *MetricName `json:"MetricName_Metrics,omitempty"`
	// MetricEndpointMetrics holds the value of the MetricEndpoint_Metrics edge.
	MetricEndpointMetrics *MetricEndpoint `json:"MetricEndpoint_Metrics,omitempty"`
	// MetricLabelMetrics holds the value of the MetricLabel_Metrics edge.
	MetricLabelMetrics *MetricLabel `json:"MetricLabel_Metrics,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MetricNameMetricsOrErr returns the MetricNameMetrics value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MetricEdges) MetricNameMetricsOrErr() (*MetricName, error) {
	if e.loadedTypes[0] {
		if e.MetricNameMetrics == nil {
			// The edge MetricName_Metrics was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metricname.Label}
		}
		return e.MetricNameMetrics, nil
	}
	return nil, &NotLoadedError{edge: "MetricName_Metrics"}
}

// MetricEndpointMetricsOrErr returns the MetricEndpointMetrics value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MetricEdges) MetricEndpointMetricsOrErr() (*MetricEndpoint, error) {
	if e.loadedTypes[1] {
		if e.MetricEndpointMetrics == nil {
			// The edge MetricEndpoint_Metrics was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metricendpoint.Label}
		}
		return e.MetricEndpointMetrics, nil
	}
	return nil, &NotLoadedError{edge: "MetricEndpoint_Metrics"}
}

// MetricLabelMetricsOrErr returns the MetricLabelMetrics value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MetricEdges) MetricLabelMetricsOrErr() (*MetricLabel, error) {
	if e.loadedTypes[2] {
		if e.MetricLabelMetrics == nil {
			// The edge MetricLabel_Metrics was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metriclabel.Label}
		}
		return e.MetricLabelMetrics, nil
	}
	return nil, &NotLoadedError{edge: "MetricLabel_Metrics"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Metric) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case metric.FieldValue:
			values[i] = new(sql.NullFloat64)
		case metric.FieldID, metric.FieldEndpointId, metric.FieldTypeId, metric.FieldNameId, metric.FieldLabelId, metric.FieldClusterId, metric.FieldNodeId, metric.FieldProcesId, metric.FieldContainerId:
			values[i] = new(sql.NullInt64)
		case metric.FieldCreatedAt, metric.FieldUpdatedAt, metric.FieldDeletedAt, metric.FieldTs:
			values[i] = new(sql.NullTime)
		case metric.ForeignKeys[0]: // metric_endpoint_metrics
			values[i] = new(sql.NullInt64)
		case metric.ForeignKeys[1]: // metric_label_metrics
			values[i] = new(sql.NullInt64)
		case metric.ForeignKeys[2]: // metric_name_metrics
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Metric", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Metric fields.
func (m *Metric) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metric.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case metric.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case metric.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case metric.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				m.DeletedAt = value.Time
			}
		case metric.FieldTs:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ts", values[i])
			} else if value.Valid {
				m.Ts = value.Time
			}
		case metric.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				m.Value = value.Float64
			}
		case metric.FieldEndpointId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field endpointId", values[i])
			} else if value.Valid {
				m.EndpointId = uint(value.Int64)
			}
		case metric.FieldTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field typeId", values[i])
			} else if value.Valid {
				m.TypeId = uint(value.Int64)
			}
		case metric.FieldNameId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nameId", values[i])
			} else if value.Valid {
				m.NameId = uint(value.Int64)
			}
		case metric.FieldLabelId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field labelId", values[i])
			} else if value.Valid {
				m.LabelId = uint(value.Int64)
			}
		case metric.FieldClusterId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field clusterId", values[i])
			} else if value.Valid {
				m.ClusterId = uint(value.Int64)
			}
		case metric.FieldNodeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nodeId", values[i])
			} else if value.Valid {
				m.NodeId = uint(value.Int64)
			}
		case metric.FieldProcesId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field procesId", values[i])
			} else if value.Valid {
				m.ProcesId = uint(value.Int64)
			}
		case metric.FieldContainerId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field containerId", values[i])
			} else if value.Valid {
				m.ContainerId = uint(value.Int64)
			}
		case metric.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field metric_endpoint_metrics", value)
			} else if value.Valid {
				m.metric_endpoint_metrics = new(uint)
				*m.metric_endpoint_metrics = uint(value.Int64)
			}
		case metric.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field metric_label_metrics", value)
			} else if value.Valid {
				m.metric_label_metrics = new(uint)
				*m.metric_label_metrics = uint(value.Int64)
			}
		case metric.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field metric_name_metrics", value)
			} else if value.Valid {
				m.metric_name_metrics = new(uint)
				*m.metric_name_metrics = uint(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetricNameMetrics queries the "MetricName_Metrics" edge of the Metric entity.
func (m *Metric) QueryMetricNameMetrics() *MetricNameQuery {
	return (&MetricClient{config: m.config}).QueryMetricNameMetrics(m)
}

// QueryMetricEndpointMetrics queries the "MetricEndpoint_Metrics" edge of the Metric entity.
func (m *Metric) QueryMetricEndpointMetrics() *MetricEndpointQuery {
	return (&MetricClient{config: m.config}).QueryMetricEndpointMetrics(m)
}

// QueryMetricLabelMetrics queries the "MetricLabel_Metrics" edge of the Metric entity.
func (m *Metric) QueryMetricLabelMetrics() *MetricLabelQuery {
	return (&MetricClient{config: m.config}).QueryMetricLabelMetrics(m)
}

// Update returns a builder for updating this Metric.
// Note that you need to call Metric.Unwrap() before calling this method if this Metric
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Metric) Update() *MetricUpdateOne {
	return (&MetricClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Metric entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Metric) Unwrap() *Metric {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Metric is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Metric) String() string {
	var builder strings.Builder
	builder.WriteString("Metric(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ts=")
	builder.WriteString(m.Ts.Format(time.ANSIC))
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", m.Value))
	builder.WriteString(", endpointId=")
	builder.WriteString(fmt.Sprintf("%v", m.EndpointId))
	builder.WriteString(", typeId=")
	builder.WriteString(fmt.Sprintf("%v", m.TypeId))
	builder.WriteString(", nameId=")
	builder.WriteString(fmt.Sprintf("%v", m.NameId))
	builder.WriteString(", labelId=")
	builder.WriteString(fmt.Sprintf("%v", m.LabelId))
	builder.WriteString(", clusterId=")
	builder.WriteString(fmt.Sprintf("%v", m.ClusterId))
	builder.WriteString(", nodeId=")
	builder.WriteString(fmt.Sprintf("%v", m.NodeId))
	builder.WriteString(", procesId=")
	builder.WriteString(fmt.Sprintf("%v", m.ProcesId))
	builder.WriteString(", containerId=")
	builder.WriteString(fmt.Sprintf("%v", m.ContainerId))
	builder.WriteByte(')')
	return builder.String()
}

// Metrics is a parsable slice of Metric.
type Metrics []*Metric

func (m Metrics) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
