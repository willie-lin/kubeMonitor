// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/k8sobject"
)

// K8sObjectCreate is the builder for creating a K8sObject entity.
type K8sObjectCreate struct {
	config
	mutation *K8sObjectMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (koc *K8sObjectCreate) SetCreatedAt(t time.Time) *K8sObjectCreate {
	koc.mutation.SetCreatedAt(t)
	return koc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (koc *K8sObjectCreate) SetNillableCreatedAt(t *time.Time) *K8sObjectCreate {
	if t != nil {
		koc.SetCreatedAt(*t)
	}
	return koc
}

// SetUpdatedAt sets the "updated_at" field.
func (koc *K8sObjectCreate) SetUpdatedAt(t time.Time) *K8sObjectCreate {
	koc.mutation.SetUpdatedAt(t)
	return koc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (koc *K8sObjectCreate) SetNillableUpdatedAt(t *time.Time) *K8sObjectCreate {
	if t != nil {
		koc.SetUpdatedAt(*t)
	}
	return koc
}

// SetDeletedAt sets the "deleted_at" field.
func (koc *K8sObjectCreate) SetDeletedAt(t time.Time) *K8sObjectCreate {
	koc.mutation.SetDeletedAt(t)
	return koc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (koc *K8sObjectCreate) SetNillableDeletedAt(t *time.Time) *K8sObjectCreate {
	if t != nil {
		koc.SetDeletedAt(*t)
	}
	return koc
}

// SetK8sClusterId sets the "k8sClusterId" field.
func (koc *K8sObjectCreate) SetK8sClusterId(u uint) *K8sObjectCreate {
	koc.mutation.SetK8sClusterId(u)
	return koc
}

// SetApiVersion sets the "apiVersion" field.
func (koc *K8sObjectCreate) SetApiVersion(s string) *K8sObjectCreate {
	koc.mutation.SetApiVersion(s)
	return koc
}

// SetKind sets the "kind" field.
func (koc *K8sObjectCreate) SetKind(s string) *K8sObjectCreate {
	koc.mutation.SetKind(s)
	return koc
}

// SetName sets the "name" field.
func (koc *K8sObjectCreate) SetName(s string) *K8sObjectCreate {
	koc.mutation.SetName(s)
	return koc
}

// SetMetadata sets the "metadata" field.
func (koc *K8sObjectCreate) SetMetadata(s []string) *K8sObjectCreate {
	koc.mutation.SetMetadata(s)
	return koc
}

// SetSpec sets the "spec" field.
func (koc *K8sObjectCreate) SetSpec(s []string) *K8sObjectCreate {
	koc.mutation.SetSpec(s)
	return koc
}

// SetStatus sets the "status" field.
func (koc *K8sObjectCreate) SetStatus(s []string) *K8sObjectCreate {
	koc.mutation.SetStatus(s)
	return koc
}

// SetID sets the "id" field.
func (koc *K8sObjectCreate) SetID(u uint) *K8sObjectCreate {
	koc.mutation.SetID(u)
	return koc
}

// Mutation returns the K8sObjectMutation object of the builder.
func (koc *K8sObjectCreate) Mutation() *K8sObjectMutation {
	return koc.mutation
}

// Save creates the K8sObject in the database.
func (koc *K8sObjectCreate) Save(ctx context.Context) (*K8sObject, error) {
	var (
		err  error
		node *K8sObject
	)
	koc.defaults()
	if len(koc.hooks) == 0 {
		if err = koc.check(); err != nil {
			return nil, err
		}
		node, err = koc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sObjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = koc.check(); err != nil {
				return nil, err
			}
			koc.mutation = mutation
			if node, err = koc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(koc.hooks) - 1; i >= 0; i-- {
			if koc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = koc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, koc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (koc *K8sObjectCreate) SaveX(ctx context.Context) *K8sObject {
	v, err := koc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (koc *K8sObjectCreate) Exec(ctx context.Context) error {
	_, err := koc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (koc *K8sObjectCreate) ExecX(ctx context.Context) {
	if err := koc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (koc *K8sObjectCreate) defaults() {
	if _, ok := koc.mutation.CreatedAt(); !ok {
		v := k8sobject.DefaultCreatedAt()
		koc.mutation.SetCreatedAt(v)
	}
	if _, ok := koc.mutation.UpdatedAt(); !ok {
		v := k8sobject.DefaultUpdatedAt()
		koc.mutation.SetUpdatedAt(v)
	}
	if _, ok := koc.mutation.DeletedAt(); !ok {
		v := k8sobject.DefaultDeletedAt()
		koc.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (koc *K8sObjectCreate) check() error {
	if _, ok := koc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := koc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := koc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "deleted_at"`)}
	}
	if _, ok := koc.mutation.K8sClusterId(); !ok {
		return &ValidationError{Name: "k8sClusterId", err: errors.New(`ent: missing required field "k8sClusterId"`)}
	}
	if _, ok := koc.mutation.ApiVersion(); !ok {
		return &ValidationError{Name: "apiVersion", err: errors.New(`ent: missing required field "apiVersion"`)}
	}
	if v, ok := koc.mutation.ApiVersion(); ok {
		if err := k8sobject.ApiVersionValidator(v); err != nil {
			return &ValidationError{Name: "apiVersion", err: fmt.Errorf(`ent: validator failed for field "apiVersion": %w`, err)}
		}
	}
	if _, ok := koc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "kind"`)}
	}
	if v, ok := koc.mutation.Kind(); ok {
		if err := k8sobject.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "kind": %w`, err)}
		}
	}
	if _, ok := koc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := koc.mutation.Name(); ok {
		if err := k8sobject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := koc.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "metadata"`)}
	}
	if _, ok := koc.mutation.Spec(); !ok {
		return &ValidationError{Name: "spec", err: errors.New(`ent: missing required field "spec"`)}
	}
	if _, ok := koc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	return nil
}

func (koc *K8sObjectCreate) sqlSave(ctx context.Context) (*K8sObject, error) {
	_node, _spec := koc.createSpec()
	if err := sqlgraph.CreateNode(ctx, koc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	return _node, nil
}

func (koc *K8sObjectCreate) createSpec() (*K8sObject, *sqlgraph.CreateSpec) {
	var (
		_node = &K8sObject{config: koc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: k8sobject.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: k8sobject.FieldID,
			},
		}
	)
	if id, ok := koc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := koc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobject.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := koc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobject.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := koc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8sobject.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := koc.mutation.K8sClusterId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: k8sobject.FieldK8sClusterId,
		})
		_node.K8sClusterId = value
	}
	if value, ok := koc.mutation.ApiVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sobject.FieldApiVersion,
		})
		_node.ApiVersion = value
	}
	if value, ok := koc.mutation.Kind(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sobject.FieldKind,
		})
		_node.Kind = value
	}
	if value, ok := koc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8sobject.FieldName,
		})
		_node.Name = value
	}
	if value, ok := koc.mutation.Metadata(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: k8sobject.FieldMetadata,
		})
		_node.Metadata = value
	}
	if value, ok := koc.mutation.Spec(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: k8sobject.FieldSpec,
		})
		_node.Spec = value
	}
	if value, ok := koc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: k8sobject.FieldStatus,
		})
		_node.Status = value
	}
	return _node, _spec
}

// K8sObjectCreateBulk is the builder for creating many K8sObject entities in bulk.
type K8sObjectCreateBulk struct {
	config
	builders []*K8sObjectCreate
}

// Save creates the K8sObject entities in the database.
func (kocb *K8sObjectCreateBulk) Save(ctx context.Context) ([]*K8sObject, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kocb.builders))
	nodes := make([]*K8sObject, len(kocb.builders))
	mutators := make([]Mutator, len(kocb.builders))
	for i := range kocb.builders {
		func(i int, root context.Context) {
			builder := kocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*K8sObjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kocb *K8sObjectCreateBulk) SaveX(ctx context.Context) []*K8sObject {
	v, err := kocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kocb *K8sObjectCreateBulk) Exec(ctx context.Context) error {
	_, err := kocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kocb *K8sObjectCreateBulk) ExecX(ctx context.Context) {
	if err := kocb.Exec(ctx); err != nil {
		panic(err)
	}
}
