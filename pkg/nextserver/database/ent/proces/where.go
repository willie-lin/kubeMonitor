// Code generated by entc, DO NOT EDIT.

package proces

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/kubeMonitor/pkg/nextserver/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// PId applies equality check predicate on the "pId" field. It's identical to PIdEQ.
func PId(v int32) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPId), v))
	})
}

// Cmd applies equality check predicate on the "cmd" field. It's identical to CmdEQ.
func Cmd(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCmd), v))
	})
}

// ClusterId applies equality check predicate on the "clusterId" field. It's identical to ClusterIdEQ.
func ClusterId(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClusterId), v))
	})
}

// NodeId applies equality check predicate on the "nodeId" field. It's identical to NodeIdEQ.
func NodeId(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeId), v))
	})
}

// ContainerId applies equality check predicate on the "containerId" field. It's identical to ContainerIdEQ.
func ContainerId(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContainerId), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// PIdEQ applies the EQ predicate on the "pId" field.
func PIdEQ(v int32) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPId), v))
	})
}

// PIdNEQ applies the NEQ predicate on the "pId" field.
func PIdNEQ(v int32) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPId), v))
	})
}

// PIdIn applies the In predicate on the "pId" field.
func PIdIn(vs ...int32) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPId), v...))
	})
}

// PIdNotIn applies the NotIn predicate on the "pId" field.
func PIdNotIn(vs ...int32) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPId), v...))
	})
}

// PIdGT applies the GT predicate on the "pId" field.
func PIdGT(v int32) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPId), v))
	})
}

// PIdGTE applies the GTE predicate on the "pId" field.
func PIdGTE(v int32) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPId), v))
	})
}

// PIdLT applies the LT predicate on the "pId" field.
func PIdLT(v int32) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPId), v))
	})
}

// PIdLTE applies the LTE predicate on the "pId" field.
func PIdLTE(v int32) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPId), v))
	})
}

// CmdEQ applies the EQ predicate on the "cmd" field.
func CmdEQ(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCmd), v))
	})
}

// CmdNEQ applies the NEQ predicate on the "cmd" field.
func CmdNEQ(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCmd), v))
	})
}

// CmdIn applies the In predicate on the "cmd" field.
func CmdIn(vs ...string) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCmd), v...))
	})
}

// CmdNotIn applies the NotIn predicate on the "cmd" field.
func CmdNotIn(vs ...string) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCmd), v...))
	})
}

// CmdGT applies the GT predicate on the "cmd" field.
func CmdGT(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCmd), v))
	})
}

// CmdGTE applies the GTE predicate on the "cmd" field.
func CmdGTE(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCmd), v))
	})
}

// CmdLT applies the LT predicate on the "cmd" field.
func CmdLT(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCmd), v))
	})
}

// CmdLTE applies the LTE predicate on the "cmd" field.
func CmdLTE(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCmd), v))
	})
}

// CmdContains applies the Contains predicate on the "cmd" field.
func CmdContains(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCmd), v))
	})
}

// CmdHasPrefix applies the HasPrefix predicate on the "cmd" field.
func CmdHasPrefix(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCmd), v))
	})
}

// CmdHasSuffix applies the HasSuffix predicate on the "cmd" field.
func CmdHasSuffix(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCmd), v))
	})
}

// CmdEqualFold applies the EqualFold predicate on the "cmd" field.
func CmdEqualFold(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCmd), v))
	})
}

// CmdContainsFold applies the ContainsFold predicate on the "cmd" field.
func CmdContainsFold(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCmd), v))
	})
}

// ClusterIdEQ applies the EQ predicate on the "clusterId" field.
func ClusterIdEQ(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClusterId), v))
	})
}

// ClusterIdNEQ applies the NEQ predicate on the "clusterId" field.
func ClusterIdNEQ(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClusterId), v))
	})
}

// ClusterIdIn applies the In predicate on the "clusterId" field.
func ClusterIdIn(vs ...string) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClusterId), v...))
	})
}

// ClusterIdNotIn applies the NotIn predicate on the "clusterId" field.
func ClusterIdNotIn(vs ...string) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClusterId), v...))
	})
}

// ClusterIdGT applies the GT predicate on the "clusterId" field.
func ClusterIdGT(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClusterId), v))
	})
}

// ClusterIdGTE applies the GTE predicate on the "clusterId" field.
func ClusterIdGTE(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClusterId), v))
	})
}

// ClusterIdLT applies the LT predicate on the "clusterId" field.
func ClusterIdLT(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClusterId), v))
	})
}

// ClusterIdLTE applies the LTE predicate on the "clusterId" field.
func ClusterIdLTE(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClusterId), v))
	})
}

// ClusterIdContains applies the Contains predicate on the "clusterId" field.
func ClusterIdContains(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClusterId), v))
	})
}

// ClusterIdHasPrefix applies the HasPrefix predicate on the "clusterId" field.
func ClusterIdHasPrefix(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClusterId), v))
	})
}

// ClusterIdHasSuffix applies the HasSuffix predicate on the "clusterId" field.
func ClusterIdHasSuffix(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClusterId), v))
	})
}

// ClusterIdEqualFold applies the EqualFold predicate on the "clusterId" field.
func ClusterIdEqualFold(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClusterId), v))
	})
}

// ClusterIdContainsFold applies the ContainsFold predicate on the "clusterId" field.
func ClusterIdContainsFold(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClusterId), v))
	})
}

// NodeIdEQ applies the EQ predicate on the "nodeId" field.
func NodeIdEQ(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeId), v))
	})
}

// NodeIdNEQ applies the NEQ predicate on the "nodeId" field.
func NodeIdNEQ(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNodeId), v))
	})
}

// NodeIdIn applies the In predicate on the "nodeId" field.
func NodeIdIn(vs ...string) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNodeId), v...))
	})
}

// NodeIdNotIn applies the NotIn predicate on the "nodeId" field.
func NodeIdNotIn(vs ...string) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNodeId), v...))
	})
}

// NodeIdGT applies the GT predicate on the "nodeId" field.
func NodeIdGT(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNodeId), v))
	})
}

// NodeIdGTE applies the GTE predicate on the "nodeId" field.
func NodeIdGTE(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNodeId), v))
	})
}

// NodeIdLT applies the LT predicate on the "nodeId" field.
func NodeIdLT(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNodeId), v))
	})
}

// NodeIdLTE applies the LTE predicate on the "nodeId" field.
func NodeIdLTE(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNodeId), v))
	})
}

// NodeIdContains applies the Contains predicate on the "nodeId" field.
func NodeIdContains(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNodeId), v))
	})
}

// NodeIdHasPrefix applies the HasPrefix predicate on the "nodeId" field.
func NodeIdHasPrefix(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNodeId), v))
	})
}

// NodeIdHasSuffix applies the HasSuffix predicate on the "nodeId" field.
func NodeIdHasSuffix(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNodeId), v))
	})
}

// NodeIdEqualFold applies the EqualFold predicate on the "nodeId" field.
func NodeIdEqualFold(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNodeId), v))
	})
}

// NodeIdContainsFold applies the ContainsFold predicate on the "nodeId" field.
func NodeIdContainsFold(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNodeId), v))
	})
}

// ContainerIdEQ applies the EQ predicate on the "containerId" field.
func ContainerIdEQ(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContainerId), v))
	})
}

// ContainerIdNEQ applies the NEQ predicate on the "containerId" field.
func ContainerIdNEQ(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContainerId), v))
	})
}

// ContainerIdIn applies the In predicate on the "containerId" field.
func ContainerIdIn(vs ...string) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContainerId), v...))
	})
}

// ContainerIdNotIn applies the NotIn predicate on the "containerId" field.
func ContainerIdNotIn(vs ...string) predicate.Proces {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proces(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContainerId), v...))
	})
}

// ContainerIdGT applies the GT predicate on the "containerId" field.
func ContainerIdGT(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContainerId), v))
	})
}

// ContainerIdGTE applies the GTE predicate on the "containerId" field.
func ContainerIdGTE(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContainerId), v))
	})
}

// ContainerIdLT applies the LT predicate on the "containerId" field.
func ContainerIdLT(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContainerId), v))
	})
}

// ContainerIdLTE applies the LTE predicate on the "containerId" field.
func ContainerIdLTE(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContainerId), v))
	})
}

// ContainerIdContains applies the Contains predicate on the "containerId" field.
func ContainerIdContains(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContainerId), v))
	})
}

// ContainerIdHasPrefix applies the HasPrefix predicate on the "containerId" field.
func ContainerIdHasPrefix(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContainerId), v))
	})
}

// ContainerIdHasSuffix applies the HasSuffix predicate on the "containerId" field.
func ContainerIdHasSuffix(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContainerId), v))
	})
}

// ContainerIdEqualFold applies the EqualFold predicate on the "containerId" field.
func ContainerIdEqualFold(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContainerId), v))
	})
}

// ContainerIdContainsFold applies the ContainsFold predicate on the "containerId" field.
func ContainerIdContainsFold(v string) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContainerId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Proces) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Proces) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Proces) predicate.Proces {
	return predicate.Proces(func(s *sql.Selector) {
		p(s.Not())
	})
}
